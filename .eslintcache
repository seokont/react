[{"F:\\PROJECTTEXASROOM\\po\\src\\App.tsx":"1","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Header\\Header.jsx":"2","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewPlayer\\NewPlayerContainer.jsx":"3","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Affiliate\\AffiliateContainer.jsx":"4","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getallrake\\GetallrakeConteiner.jsx":"5","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Plapla\\Plapla.jsx":"6","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatisticBetweenPlayers\\BalanceStatisticBetweenPlayersContainer.jsx":"7","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Ringgames\\Ringgames.jsx":"8","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditRingGame\\EditRingGame.jsx":"9","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewPlayer\\NewPlayer.jsx":"10","F:\\PROJECTTEXASROOM\\po\\src\\Components\\AddFastPlayer\\AddFastPlayer.jsx":"11","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Affiliate\\Affiliate.jsx":"12","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatistic\\BalanceStatistic.jsx":"13","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Login\\Login.jsx":"14","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\RedirectAfterGood.jsx":"15","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\Pokerhome.jsx":"16","F:\\PROJECTTEXASROOM\\po\\src\\Components\\ConectedPlayers\\ConectedPlayersContainer.jsx":"17","F:\\PROJECTTEXASROOM\\po\\src\\forinput\\newinput.js":"18","F:\\PROJECTTEXASROOM\\po\\src\\Components\\ConectedPlayers\\ConectedPlayers.jsx":"19","F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTableTurnaments\\SendMessageTableTurnaments.jsx":"20","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceInc.jsx":"21","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Slider\\Slider.jsx":"22","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewRingGame\\NewRingGameConteiner.jsx":"23","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Tournaments\\TournamentsContainer.jsx":"24","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Edittournament\\EdittournamentContainer.jsx":"25","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Players\\Players.jsx":"26","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewRingGame\\NewRingGame.jsx":"27","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Edittournament\\Edittournament.jsx":"28","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Poker\\Poker.jsx":"29","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\AuthRedirectNoneToken.jsx":"30","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\AuthRedirect.jsx":"31","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getplayers\\Getplayers.jsx":"32","F:\\PROJECTTEXASROOM\\po\\src\\index.js":"33","F:\\PROJECTTEXASROOM\\po\\src\\Redux\\store.ts":"34","F:\\PROJECTTEXASROOM\\po\\src\\reportWebVitals.js":"35","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\delgame-reducer.js":"36","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\onlinegame-reducer.js":"37","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getgame-reducer.js":"38","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\onlinetournaments-reducer.js":"39","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addtable-reducer.js":"40","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addtabletournaments-reducer.js":"41","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\rsetrakeall-reducer.js":"42","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getplayersforip-reducer.js":"43","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\session-reducer.js":"44","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balanceransfer-reducer.js":"45","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\allrake-reducer.js":"46","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Ringgames\\RinggamesConteiner.jsx":"47","F:\\PROJECTTEXASROOM\\po\\src\\Components\\AddFastPlayer\\AddFastPlayerContainer.jsx":"48","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getallrake\\Getallrake.jsx":"49","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Tournaments\\Tournaments.jsx":"50","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewTournaments\\NewTournaments.jsx":"51","F:\\PROJECTTEXASROOM\\po\\src\\IconionSvg\\Diamond.jsx":"52","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceDec.jsx":"53","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\offlinegame-reducer.js":"54","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\offlinetournaments-reducer.js":"55","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\edittournament-reducer.js":"56","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addplayer-reducer.js":"57","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\delplayer-reducer.js":"58","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\ipcountry-reducer.js":"59","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\auth-reducer.js":"60","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balancestatisticaplayers-reducer.js":"61","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\gettournamentsgame-reducer.js":"62","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewTournaments\\NewTournamentsConteiner.jsx":"63","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditRingGame\\EditRingGameConteiner.jsx":"64","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Poker\\PokerContainer.jsx":"65","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditPlayer\\EditPlayer.jsx":"66","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Passwordreplace\\Passwordreplace.jsx":"67","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\messagetableturnaments-reducer.js":"68","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getplayers-reducer.js":"69","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\editplayer-reducer.js":"70","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\totalrake-reducer.js":"71","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Login\\LoginContainer.jsx":"72","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatisticBetweenPlayers\\BalanceStatisticBetweenPlayers.jsx":"73","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceDecContainer.jsx":"74","F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTableTurnaments\\SendMessageTableTurnamentsContainer.jsx":"75","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\messagetable-reducer.js":"76","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditPlayer\\EditPlayerContainer.jsx":"77","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatistic\\BalanceStatisticContainer.jsx":"78","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getplayers\\GetplayersConteiner.jsx":"79","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\RedirectAfterGoodTournaments.jsx":"80","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceIncContainer.jsx":"81","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balancestatistica-reducer.js":"82","F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTable\\SendMessageTableContainer.jsx":"83","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\edittable-reducer.js":"84","F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTable\\SendMessageTable.jsx":"85","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\conectedplayers-reducer.js":"86","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balanceincdec-reducer.js":"87","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\deltournaments-reducer.js":"88","F:\\PROJECTTEXASROOM\\po\\src\\API\\Api.js":"89","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\passwordreplace-reducer.js":"90","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceTransfer\\BalanceTransfer.jsx":"91"},{"size":5105,"mtime":1617626556582,"results":"92","hashOfConfig":"93"},{"size":16592,"mtime":1616702078655,"results":"94","hashOfConfig":"93"},{"size":525,"mtime":1609574558000,"results":"95","hashOfConfig":"93"},{"size":425,"mtime":1609575130000,"results":"96","hashOfConfig":"93"},{"size":599,"mtime":1612259336000,"results":"97","hashOfConfig":"93"},{"size":3733,"mtime":1615230713560,"results":"98","hashOfConfig":"93"},{"size":653,"mtime":1611071714000,"results":"99","hashOfConfig":"93"},{"size":20968,"mtime":1612628530000,"results":"100","hashOfConfig":"93"},{"size":34211,"mtime":1609928948000,"results":"101","hashOfConfig":"93"},{"size":21208,"mtime":1610701616000,"results":"102","hashOfConfig":"93"},{"size":29809,"mtime":1614602766537,"results":"103","hashOfConfig":"93"},{"size":276,"mtime":1609273770000,"results":"104","hashOfConfig":"93"},{"size":11524,"mtime":1611129602000,"results":"105","hashOfConfig":"93"},{"size":7250,"mtime":1614602782367,"results":"106","hashOfConfig":"93"},{"size":349,"mtime":1607808040000,"results":"107","hashOfConfig":"93"},{"size":285,"mtime":1610441010000,"results":"108","hashOfConfig":"93"},{"size":458,"mtime":1608886520000,"results":"109","hashOfConfig":"93"},{"size":4673,"mtime":1611849868000,"results":"110","hashOfConfig":"93"},{"size":16171,"mtime":1611925212000,"results":"111","hashOfConfig":"93"},{"size":1240,"mtime":1607673898000,"results":"112","hashOfConfig":"93"},{"size":1318,"mtime":1610701340000,"results":"113","hashOfConfig":"93"},{"size":1745,"mtime":1617633535371,"results":"114","hashOfConfig":"93"},{"size":573,"mtime":1609574596000,"results":"115","hashOfConfig":"93"},{"size":1352,"mtime":1609574386000,"results":"116","hashOfConfig":"93"},{"size":694,"mtime":1608721292000,"results":"117","hashOfConfig":"93"},{"size":2743,"mtime":1611926636000,"results":"118","hashOfConfig":"93"},{"size":33276,"mtime":1609929110000,"results":"119","hashOfConfig":"93"},{"size":54521,"mtime":1609927908000,"results":"120","hashOfConfig":"93"},{"size":2142,"mtime":1617373305272,"results":"121","hashOfConfig":"93"},{"size":399,"mtime":1612187724000,"results":"122","hashOfConfig":"93"},{"size":370,"mtime":1612370698000,"results":"123","hashOfConfig":"93"},{"size":29020,"mtime":1612190146000,"results":"124","hashOfConfig":"93"},{"size":750,"mtime":1609578110000,"results":"125","hashOfConfig":"93"},{"size":3828,"mtime":1614607110219,"results":"126","hashOfConfig":"93"},{"size":362,"mtime":1607099176000,"results":"127","hashOfConfig":"93"},{"size":794,"mtime":1607251138000,"results":"128","hashOfConfig":"93"},{"size":827,"mtime":1607248924000,"results":"129","hashOfConfig":"93"},{"size":1387,"mtime":1608377228000,"results":"130","hashOfConfig":"93"},{"size":910,"mtime":1607629590000,"results":"131","hashOfConfig":"93"},{"size":1589,"mtime":1608823110000,"results":"132","hashOfConfig":"93"},{"size":1662,"mtime":1607771196000,"results":"133","hashOfConfig":"93"},{"size":1479,"mtime":1608196942000,"results":"134","hashOfConfig":"93"},{"size":1416,"mtime":1608544690000,"results":"135","hashOfConfig":"93"},{"size":3090,"mtime":1612254648000,"results":"136","hashOfConfig":"93"},{"size":1277,"mtime":1616697565222,"results":"137","hashOfConfig":"93"},{"size":845,"mtime":1612190830000,"results":"138","hashOfConfig":"93"},{"size":1203,"mtime":1609574198000,"results":"139","hashOfConfig":"93"},{"size":527,"mtime":1613498370201,"results":"140","hashOfConfig":"93"},{"size":20001,"mtime":1612259240000,"results":"141","hashOfConfig":"93"},{"size":21838,"mtime":1608720724000,"results":"142","hashOfConfig":"93"},{"size":52754,"mtime":1609928820000,"results":"143","hashOfConfig":"93"},{"size":1984,"mtime":1608484032000,"results":"144","hashOfConfig":"93"},{"size":1386,"mtime":1609249266000,"results":"145","hashOfConfig":"93"},{"size":837,"mtime":1607248924000,"results":"146","hashOfConfig":"93"},{"size":908,"mtime":1607629364000,"results":"147","hashOfConfig":"93"},{"size":2324,"mtime":1608719302000,"results":"148","hashOfConfig":"93"},{"size":1292,"mtime":1607958362000,"results":"149","hashOfConfig":"93"},{"size":785,"mtime":1608028630000,"results":"150","hashOfConfig":"93"},{"size":1049,"mtime":1608642598000,"results":"151","hashOfConfig":"93"},{"size":2115,"mtime":1617371795957,"results":"152","hashOfConfig":"93"},{"size":894,"mtime":1611070930000,"results":"153","hashOfConfig":"93"},{"size":1630,"mtime":1608716922000,"results":"154","hashOfConfig":"93"},{"size":594,"mtime":1609574828000,"results":"155","hashOfConfig":"93"},{"size":744,"mtime":1609927584000,"results":"156","hashOfConfig":"93"},{"size":744,"mtime":1612254538000,"results":"157","hashOfConfig":"93"},{"size":25012,"mtime":1611764466000,"results":"158","hashOfConfig":"93"},{"size":7024,"mtime":1614608259699,"results":"159","hashOfConfig":"93"},{"size":1334,"mtime":1607673232000,"results":"160","hashOfConfig":"93"},{"size":2528,"mtime":1612361526000,"results":"161","hashOfConfig":"93"},{"size":2179,"mtime":1608299496000,"results":"162","hashOfConfig":"93"},{"size":847,"mtime":1611157828000,"results":"163","hashOfConfig":"93"},{"size":649,"mtime":1617355369739,"results":"164","hashOfConfig":"93"},{"size":11583,"mtime":1611129782000,"results":"165","hashOfConfig":"93"},{"size":448,"mtime":1608413936000,"results":"166","hashOfConfig":"93"},{"size":534,"mtime":1607965822000,"results":"167","hashOfConfig":"93"},{"size":1151,"mtime":1607672510000,"results":"168","hashOfConfig":"93"},{"size":556,"mtime":1608307870000,"results":"169","hashOfConfig":"93"},{"size":556,"mtime":1610719312000,"results":"170","hashOfConfig":"93"},{"size":2002,"mtime":1612188554000,"results":"171","hashOfConfig":"93"},{"size":367,"mtime":1607807010000,"results":"172","hashOfConfig":"93"},{"size":448,"mtime":1608448670000,"results":"173","hashOfConfig":"93"},{"size":808,"mtime":1610718614000,"results":"174","hashOfConfig":"93"},{"size":504,"mtime":1607965824000,"results":"175","hashOfConfig":"93"},{"size":2129,"mtime":1608382134000,"results":"176","hashOfConfig":"93"},{"size":1184,"mtime":1607672892000,"results":"177","hashOfConfig":"93"},{"size":2001,"mtime":1608842072000,"results":"178","hashOfConfig":"93"},{"size":1481,"mtime":1608413428000,"results":"179","hashOfConfig":"93"},{"size":871,"mtime":1607627734000,"results":"180","hashOfConfig":"93"},{"size":22610,"mtime":1617634369473,"results":"181","hashOfConfig":"93"},{"size":811,"mtime":1614607318124,"results":"182","hashOfConfig":"93"},{"size":8147,"mtime":1617636467007,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"187"},"13qxmqu",{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"187"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"187"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"187"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"187"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"200"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"187"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"187"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"187"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"220"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"187"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"213"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"187"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"237"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"187"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"237"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"237"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"213"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"200"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"291"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"291"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"220"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"200"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"187"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"187"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"200"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"291"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"187"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"306"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"335"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"244"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"288"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"200"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"220"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"187"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"200"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"200"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"213"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"200"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"213"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"213"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"291"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"237"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"394"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"187"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"187"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"200"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"187"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"213"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\PROJECTTEXASROOM\\po\\src\\App.tsx",["426","427","428"],"import {Route, withRouter} from \"react-router-dom\";\nimport RingGamesConteiner from \"./Components/Ringgames/RinggamesConteiner\";\nimport NewRingGameConteiner from \"./Components/NewRingGame/NewRingGameConteiner\";\nimport HeaderContainer from \"./Components/Header/Header\";\nimport {Redirect} from \"react-router\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport EditRingGameConteiner from \"./Components/EditRingGame/EditRingGameConteiner\";\nimport TournamentsConteiner from \"./Components/Tournaments/TournamentsContainer\";\nimport NewTournamentsConteiner from \"./Components/NewTournaments/NewTournamentsConteiner\";\nimport EdittournamentConteiner from \"./Components/Edittournament/EdittournamentContainer\";\nimport NewPlayerConteiner from \"./Components/NewPlayer/NewPlayerContainer\";\nimport EditPlayerConteiner from \"./Components/EditPlayer/EditPlayerContainer\";\nimport AddFastPlayerConteiner from \"./Components/AddFastPlayer/AddFastPlayerContainer\";\nimport AffiliateContainer from \"./Components/Affiliate/AffiliateContainer\";\nimport NavTabs from \"./Components/Players/Players\";\nimport LoginContainer from \"./Components/Login/LoginContainer\";\nimport PokerContainer from \"./Components/Poker/PokerContainer\";\nimport GetallrakeConteiner from \"./Components/Getallrake/GetallrakeConteiner\";\nimport BalanceStatisticContainer from \"./Components/BalanceStatistic/BalanceStatisticContainer\";\nimport BalanceStatisticBetweenPlayersContainer\n    from \"./Components/BalanceStatisticBetweenPlayers/BalanceStatisticBetweenPlayersContainer\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport aces2 from \"../src/img/main-bg.png\";\n\nimport Plapla from \"./Components/Plapla/Plapla\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 0,\n        background: '#0E0E0E',\n        backgroundColor: \"black\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"repeat-y\",\n        backgroundPosition: \"center center\",\n        backgroundAttachment: 'fixed',\n        height: '100vh'\n    },\n    paper: {\n        padding: theme.spacing(0),\n    },\n}));\n\nfunction App(props) {\n    const classes = useStyles();\n\n    let fer = () => {\n        return \"#fer\";\n    };\n\n    return (\n        <div className={classes.root}>\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"space-between\"\n                alignItems=\"stretch\"\n                spacing={0}\n            >\n                <Grid\n                    item\n                    spacing={0}\n                    xs={12}\n                    sm={12}\n                    md={12}\n                    lg={12}\n                    xl={12}\n                    container\n                    direction=\"column\"\n                    justify=\"space-between\"\n                    alignItems=\"stretch\"\n                >\n                    <HeaderContainer/>\n\n\n                </Grid>\n            </Grid>\n\n            <Grid item xs={12}>\n\n\n                <Route\n                    path=\"/newtournamentsgame\"\n                    render={() => <NewTournamentsConteiner/>}\n                />\n                <Route path=\"/newringgame\" render={() => <NewRingGameConteiner/>}/>\n                <Route path=\"/editringgame\" render={() => <EditRingGameConteiner/>}/>\n                <Route\n                    path=\"/edittournament\"\n                    render={() => <EdittournamentConteiner/>}\n                />\n                <Route path=\"/ringgames\" render={() => <RingGamesConteiner/>}/>\n                <Route path=\"/tournaments\" render={() => <TournamentsConteiner/>}/>\n                <Route path=\"/affiliate\" render={() => <AffiliateContainer/>}/>\n                <Route path=\"/newplayers\" render={() => <NewPlayerConteiner/>}/>\n                <Route path=\"/editplayers\" render={() => <EditPlayerConteiner/>}/>\n                <Route\n                    path=\"/addplayersfast\"\n                    render={() => <AddFastPlayerConteiner/>}\n                />\n                <Route path=\"/conplayers\" render={() => <NavTabs/>}/>\n                <Route path=\"/login\" render={() => <LoginContainer/>}/>\n                <Route path=\"/poker\" render={() => <PokerContainer/>}/>\n\n                <Route path=\"/allrake\" render={() => <GetallrakeConteiner/>}/>\n\n                <Route path=\"/pla\" render={() => <Plapla/>}/>\n\n                <Route path=\"/balance\" render={() => <BalanceStatisticContainer/>}/>\n\n\n                <Route\n                    path=\"/balanceplayers\"\n                    render={() => <BalanceStatisticBetweenPlayersContainer/>}\n                />\n\n\n                <Route exact path=\"/\" component={Plapla}/>\n\n                <Route exact path=\"/\">\n                    {props.token.Token === \"\" ? (\n                        <Redirect to=\"/\"/>\n                    ) : (\n                        <PokerContainer/>\n                    )}\n                </Route>\n\n\n            </Grid>\n\n\n        </div>\n    );\n}\n\nlet mapStateToProps = (state) => ({\n    token: state.Token,\n});\n\nexport default compose(connect(mapStateToProps, {}))(App);\n",["429","430"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Header\\Header.jsx",["431","432","433","434"],"import React, {useEffect, useState} from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, Link, Menu, MenuItem} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutThunk} from \"../../Reducer/auth-reducer\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {authPlayersThunk} from \"../../Reducer/getplayers-reducer\";\r\nimport LoginContainer from \"../Login/LoginContainer\";\r\nimport BalanceTransferContainerContainer from \"../BalanceTransfer/BalanceTransfer\";\r\nimport LocalAtmIcon from \"@material-ui/icons/LocalAtm\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport PasswordreplaceContainerContainer from \"../Passwordreplace/Passwordreplace\";\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <SimpleMenu {...props} />\r\n    );\r\n};\r\n\r\nconst SimpleMenu2 = (props) => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const logout = () => {\r\n        props.logoutThunk(props.session.Name);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                onClick={handleClick}\r\n            >\r\n                {props.token.Token === \"\" ? (\r\n                    <div className={s.vegas_header_login_button}>\r\n                        <p>Menu</p>\r\n                    </div>\r\n                ) : (\r\n                    <div className={s.vegas_header_login_button}>\r\n                        <p>Menu</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {props.token.Token === \"\" ? (\r\n                    \"\"\r\n                ) : (\r\n                    <div>\r\n                        <MenuItem onClick={handleClose}>\r\n                            <a href={`#t`} title=\"Login\" onClick={() => {\r\n                            }}>\r\n                                <LocalAtmIcon style={{verticalAlign: \"middle\"}}/> Transfer\r\n                                Money\r\n                            </a>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem onClick={handleClose}>\r\n                            <a href={`#p`} title=\"Login\" onClick={() => {\r\n                            }}>\r\n                                <LockOpenIcon style={{verticalAlign: \"middle\"}}/>\r\n                                Change Password\r\n                            </a>\r\n                        </MenuItem>\r\n                    </div>\r\n                )}\r\n\r\n                <MenuItem onClick={handleClose}>\r\n                    {props.token.Token === \"\" ? (\r\n                        <a\r\n                            href={`#fer`}\r\n                            title=\"Login\"\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{backgroundColor: \"#ad1f2f\", color: \"#fff\"}}\r\n                            >\r\n                                <ExitToAppIcon/> Login\r\n                            </Button>\r\n                        </a>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            onClick={logout}\r\n                            style={{backgroundColor: \"#ad1f2f\", color: \"#fff\"}}\r\n                        >\r\n                            <ExitToAppIcon/> Log Out\r\n                        </Button>\r\n                    )}\r\n                </MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SimpleMenu = (props) => {\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    const [countRender, setCountRender] = useState(0);\r\n\r\n    useEffect(() => {\r\n        props.authPlayersThunk();\r\n    }, [countRender]);\r\n\r\n    return (\r\n        <>\r\n            {props.session.Role === \"admin\" && props.token.Token ? (\r\n                <div>\r\n                    <div className={s.menu_desktop}>\r\n                        <Grid\r\n\r\n\r\n                            spacing={0}\r\n                            xs={12}\r\n                            sm={12}\r\n                            md={12}\r\n                            lg={12}\r\n                            xl={12}\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <NavLink to=\"/ringgames\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#85582f\", color: \"#fff\"}}\r\n                                >\r\n                                    Ring Games\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/tournaments\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#85582f\", color: \"#fff\"}}\r\n                                >\r\n                                    Tournaments Games\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/newringgame\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#348119\", color: \"#fff\"}}\r\n                                >\r\n                                    Add Ring Games\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/newtournamentsgame\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#348119\", color: \"#fff\"}}\r\n                                >\r\n                                    Add Tournament\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/newplayers\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#348119\", color: \"#fff\"}}\r\n                                >\r\n                                    Add New Player\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/addplayersfast\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#348119\", color: \"#fff\"}}\r\n                                >\r\n                                    Add Fast Player\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/conplayers\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#f7941d\", color: \"#fff\"}}\r\n                                >\r\n                                    Players\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/balance\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#8892bf\", color: \"#fff\"}}\r\n                                >\r\n                                    Balance\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/allrake\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#8892bf\", color: \"#fff\"}}\r\n                                >\r\n                                    All Rake\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            <NavLink to=\"/balanceplayers\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{backgroundColor: \"#8892bf\", color: \"#fff\"}}\r\n                                >\r\n                                    Balance Players\r\n                                </Button>\r\n                            </NavLink>\r\n                            {/*\r\n    <NavLink to=\"/affiliate\"><Button variant=\"contained\" >Affiliate</Button></NavLink> */}\r\n\r\n                            <NavLink to=\"/poker\">\r\n                                <Button\r\n                                    style={{backgroundColor: \"red\", color: \"#fff\"}}\r\n                                    variant=\"contained\"\r\n                                >\r\n                                    Poker\r\n                                </Button>\r\n                            </NavLink>\r\n\r\n                            {/* {props.token.Token===''?'':<Button variant=\"contained\" onClick={logout} style={{backgroundColor:'#ad1f2f', color:'#fff'}}><ExitToAppIcon/>  Log Out</Button>} */}\r\n                        </Grid>\r\n                    </div>\r\n                    <Grid className={s.menu_mob}>\r\n                        <Button\r\n                            aria-controls=\"simple-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={handleClick}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </Button>\r\n                        <Menu\r\n                            id=\"simple-menu\"\r\n                            anchorEl={anchorEl}\r\n                            keepMounted\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/ringgames\">Ring Games</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/tournaments\">Tournaments Games</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/newringgame\">Add Ring Games</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/newtournamentsgame\">Add Tournament</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/newplayers\">Add New Player</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/addplayersfast\">Add Fast Player</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/conplayers\">Players</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/balance\">Balance</NavLink>\r\n                            </MenuItem>\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/balanceplayers\">Balance Players</NavLink>\r\n                            </MenuItem>\r\n\r\n                            {/* <MenuItem onClick={handleClose} ><NavLink to=\"/affiliate\">Affiliate</NavLink></MenuItem> */}\r\n\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink to=\"/poker\">Poker</NavLink>\r\n                            </MenuItem>\r\n\r\n                            {/* {props.token.Token===''?'':<MenuItem onClick={handleClose} ><Link href=\"/\" ><ExitToAppIcon/>  Log Out</Link></MenuItem>} */}\r\n                        </Menu>\r\n                    </Grid>\r\n\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n<div className={s.main_root}>\r\n    <div className={s.root}>\r\n\r\n        <div id=\"t\" className={s.modalDialog}>\r\n            <div>\r\n                <a\r\n                    href=\"#close\"\r\n                    onClick={() => setCountRender(countRender + 1)}\r\n                    title=\"Close\"\r\n                    className={s.close}\r\n                >\r\n                    X\r\n                </a>\r\n\r\n\r\n                <BalanceTransferContainerContainer/>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"p\" className={s.modalDialog}>\r\n            <div>\r\n                <a\r\n                    href=\"#close\"\r\n                    onClick={() => setCountRender(countRender + 1)}\r\n                    title=\"Close\"\r\n                    className={s.close}\r\n                >\r\n                    X\r\n                </a>\r\n\r\n\r\n                <PasswordreplaceContainerContainer/>\r\n            </div>\r\n        </div>\r\n\r\n        <div id={\"fer\"} className={s.modalDialog}>\r\n            <div>\r\n                <a href=\"#close\" title=\"Close\" className={s.close}>\r\n                    X\r\n                </a>\r\n\r\n                <LoginContainer/>\r\n\r\n\r\n                {props.session.Name && (\r\n                    <div style={{color: \"#000\"}}>\r\n                        Your Login as: <div>{props.session.Name}</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div className={s.live_dealers}>\r\n            <a href=\"https://tunbet400.com/index.php?width=1\">\r\n                <p style={{paddingTop: '10px', height: '12px'}}>Home</p>\r\n            </a>\r\n        </div>\r\n\r\n\r\n        <div className={s.block_two}>\r\n\r\n            {props.session.Name && props.token.Token ? (\r\n                <span>\r\n                  <div style={{\r\n                      textAlign: \"center\",\r\n                      color: '#F3E25E',\r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      fontFamily: 'Arial'\r\n                  }}>\r\n\r\n                      {props.session.Name}\r\n                  </div>\r\n                  <div style={{textAlign: \"center\", color: '#62D826', fontWeight: 'bold'}}>\r\n\r\n                      <div style={{\r\n                          fontSize: '11px',\r\n                          display: 'block',\r\n                          lineHeight: '12px'\r\n                      }}>Balance:</div>\r\n\r\n\r\n                       <span style={{\r\n                           lineHeight: '15px',\r\n                           fontSize: '15px'\r\n                       }}>{props.session.Balance }</span>\r\n\r\n                      {/*{props.getplayers.map((m) => (*/}\r\n\r\n\r\n                      {/*    <span style={{*/}\r\n                      {/*        lineHeight: '15px',*/}\r\n                      {/*        fontSize: '15px'*/}\r\n                      {/*    }}>{props.session.Name == m.Player ? m.Balance:''}</span>*/}\r\n                      {/*))}*/}\r\n                  </div>\r\n                </span>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n\r\n        </div>\r\n\r\n\r\n        <div className={s.block_tree}>\r\n\r\n\r\n            <SimpleMenu2 {...props} />\r\n\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    token: state.Token,\r\n    session: state.Session,\r\n    getplayers: state.GetPlayers.AllPlayers,\r\n});\r\n\r\nlet HeaderContainer = compose(\r\n    connect(mapStateToProps, {\r\n        logoutThunk,\r\n        authPlayersThunk,\r\n    })\r\n)(Header);\r\nexport default HeaderContainer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewPlayer\\NewPlayerContainer.jsx",["435"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport AddPlayer from \"./NewPlayer\";\r\nimport {addPlayerThunk} from \"../../Reducer/addplayer-reducer\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    adplayer:state.Addplayer,\r\n    token: state.Token\r\n\r\n})\r\n\r\nlet NewPlayerConteiner = compose(connect(mapStateToProps, {addPlayerThunk}),AuthRedirectNoneToken)(AddPlayer);\r\nexport default NewPlayerConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Affiliate\\AffiliateContainer.jsx",["436"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Affiliate from \"./Affiliate\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    \r\n    token: state.Token\r\n\r\n\r\n})\r\n\r\nlet AffiliateContainer = compose(connect(mapStateToProps, {}),AuthRedirectNoneToken)(Affiliate);\r\nexport default AffiliateContainer;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getallrake\\GetallrakeConteiner.jsx",["437"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Getallrake from \"./Getallrake\";\r\n\r\nimport {addAllRakeThunk} from \"../../Reducer/allrake-reducer\";\r\n\r\n\r\nimport AuthRedirectNoneToken from \"../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n    token: state.Token,\r\n    totalrake:state.TotalRake.TotalRake,\r\n    allrake:state.Allrake.AllRake\r\n\r\n\r\n})\r\n\r\nlet GetallrakeConteiner = compose(connect(mapStateToProps, {\r\n    \r\n    addAllRakeThunk\r\n}),AuthRedirectNoneToken)(Getallrake);\r\nexport default GetallrakeConteiner;\r\n",["438","439"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Plapla\\Plapla.jsx",["440","441","442","443"],"import * as React from 'react';\r\nimport SSlider from \"../Slider/Slider\";\r\nimport s from './Plapla.module.css';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LoginContainer from \"../Login/LoginContainer\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport style from \"../Getplayers/Getplayers.module.css\";\r\nimport BalanceDecContainer from \"../Balance/BalanceDecContainer\";\r\nimport AddFastPlayerConteiner from \"../AddFastPlayer/AddFastPlayerContainer\";\r\nimport Slider from \"../Slider/Slider\";\r\n\r\n\r\nconst Plapla = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n\r\n                {props.token.Token === \"\" ? (\r\n                    <Slider />\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </Grid>\r\n            <Grid container>\r\n                {props.token.Token === \"\" ? (\r\n                    <Grid container direction=\"column\"\r\n                          justify=\"space-evenly\"\r\n                          alignItems=\"center\" style={{margin: '0 auto', height: '20vh'}}>\r\n\r\n\r\n                        <div>\r\n                            <a\r\n                                href='#create'\r\n                                title=\"Create Player\"\r\n                                style={{color: \"#706468\"}}\r\n                            >\r\n                                <button className={s.button1} >Create Player\r\n                                </button>\r\n                            </a>\r\n                            <div\r\n                                id='create'\r\n                                className={style.modalDialog}\r\n                            >\r\n                                <div>\r\n                                    <a\r\n                                        href=\"#close\"\r\n                                        title=\"Close\"\r\n\r\n                                        className={style.close}\r\n                                    >\r\n                                        X\r\n                                    </a>\r\n                                   <AddFastPlayerConteiner/>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <div>\r\n                            <a\r\n                                href='#login'\r\n                                title=\"Login\"\r\n                                style={{color: \"#706468\"}}\r\n                            >\r\n                                <button className={s.button2} >Login\r\n                                </button>\r\n                            </a>\r\n                            <div\r\n                                id='login'\r\n                                className={style.modalDialog}\r\n                            >\r\n                                <div>\r\n                                    <a\r\n                                        href=\"#close\"\r\n                                        title=\"Close\"\r\n\r\n                                        className={style.close}\r\n                                    >\r\n                                        X\r\n                                    </a>\r\n                                    <LoginContainer/>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    token: state.Token,\r\n});\r\n\r\nexport default compose(connect(mapStateToProps, {}))(Plapla);\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatisticBetweenPlayers\\BalanceStatisticBetweenPlayersContainer.jsx",["444"],"import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport BalanceStatisticBetweenPlayers from \"./BalanceStatisticBetweenPlayers\";\nimport AuthRedirectNoneToken from \"../../Hoc/AuthRedirectNoneToken\";\nimport {addBalPlayersThunk} from \"../../Reducer/balancestatisticaplayers-reducer\";\n\n\n\nlet mapStateToProps = (state) => ({\n    \nallbalpl:state.AllbalancePlayer.Object,\ntoken: state.Token\n\n})\n\nlet BalanceStatisticBetweenPlayersContainer = compose(connect(mapStateToProps, {\n    addBalPlayersThunk\n}),AuthRedirectNoneToken)(BalanceStatisticBetweenPlayers);\nexport default BalanceStatisticBetweenPlayersContainer;\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Ringgames\\Ringgames.jsx",["445","446","447","448","449","450","451","452"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport style from './Ringgames.module.css';\r\nimport {lighten, makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport {authThunk, getGameObj} from \"../../Reducer/getgame-reducer\";\r\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ChatBubbleOutline, DesktopAccessDisabled, DesktopWindows, Edit} from \"@material-ui/icons\";\r\nimport {deleteGameThunk} from \"../../Reducer/delgame-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport SendMessageTableContainer from \"../SendMesageTable/SendMessageTableContainer\";\r\n\r\nfunction createData(Name, Description, Status, Auto, Game) {\r\n    return {Name, Description, Status, Auto, Game};\r\n}\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    {id: 'Name', numeric: false, disablePadding: true, label: 'Name'},\r\n    {id: 'Game', numeric: true, disablePadding: false, label: 'Game'},\r\n    {id: 'Status', numeric: true, disablePadding: false, label: 'Status'},\r\n    \r\n  \r\n    {id: 'Auto', numeric: true, disablePadding: false, label: 'Auto'},\r\n    \r\n    {id: 'PW', numeric: true, disablePadding: false, label: 'PW'},\r\n    {id: 'PermPlay', numeric: true, disablePadding: false, label: 'PermPlay'},\r\n    {id: 'Description', numeric: true, disablePadding: false, label: 'Description'},\r\n    {id: 'Seats', numeric: true, disablePadding: false, label: 'Seats'},\r\n    {id: 'StartMin', numeric: true, disablePadding: false, label: 'StartMin'},\r\n    {id: 'SmallestChip', numeric: true, disablePadding: false, label: 'SmallestChip'},\r\n    {id: 'BuyInMin', numeric: true, disablePadding: false, label: 'BuyInMin'},\r\n    {id: 'BuyInMax', numeric: true, disablePadding: false, label: 'BuyInMax'},\r\n    {id: 'BuyInDef', numeric: true, disablePadding: false, label: 'BuyInDef'},\r\n    {id: 'RakePercent', numeric: true, disablePadding: false, label: 'RakePercent'},\r\n    {id: 'TimeBank', numeric: true, disablePadding: false, label: 'TimeBank'},\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const {classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort} = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{'aria-label': 'select all desserts'}}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    rounded: {\r\nborderRadius:'0'\r\n\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n\r\n    const [countDel, setCountDel] = useState(0);\r\n    useEffect(() => {\r\n        props.authThunk();\r\n    }, [countDel]);\r\n\r\n    const classes = useToolbarStyles();\r\n    const {numSelected} = props;\r\n\r\n\r\n    let deleteRingGames = () => {\r\n        for (let i = 0; i < props.getgamesobject.length; i++) {\r\n            props.deleteGameThunk(props.getgamesobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n    let offlineGames = () => {\r\n        for (let i = 0; i < props.getgamesobject.length; i++) {\r\n            props.offlineGameThunk(props.getgamesobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n    let onlineGames = () => {\r\n        for (let i = 0; i < props.getgamesobject.length; i++) {\r\n            props.onlineGameThunk(props.getgamesobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n\r\n    const editor = (name) => {\r\n        props.getGameOneThunk(name)\r\n    }\r\n\r\n    let formessage = () => {\r\n        for (let i = 0; i < props.getgamesobject.length; i++) {\r\n            props.addMessageForTableName(props.getgamesobject[i]);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Ring Games\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n\r\n\r\n                <div>\r\n                    <table>\r\n                        <tr>\r\n                            <td><Tooltip title=\"Delete\">\r\n                                <IconButton aria-label=\"delete\">\r\n                                    <DeleteIcon onClick={() => {\r\n                                        deleteRingGames()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip></td>\r\n                            <td><Tooltip title=\"Disabled\">\r\n                                <IconButton aria-label=\"Disabled\">\r\n                                    <DesktopAccessDisabled className={style.red} onClick={() => {\r\n                                        offlineGames()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            </td>\r\n\r\n\r\n                            <td><Tooltip title=\"Enabled\">\r\n                                <IconButton aria-label=\"Enabled\">\r\n                                    <DesktopWindows className={style.green} onClick={() => {\r\n                                        onlineGames()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            </td>\r\n\r\n                            <td>\r\n\r\n\r\n                                <NavLink to='/editringgame'\r\n                                         style={{}}\r\n                                         title='Edit'>\r\n                                    <Tooltip title=\"Edit Ring Games\">\r\n                                        <IconButton aria-label=\"Edit Ring Games\">\r\n                                            <Edit onClick={() => {\r\n                                                editor(props.getgamesobject[0]);\r\n                                            }}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </NavLink>\r\n\r\n                            </td>\r\n\r\n\r\n                            <td>\r\n                                <Tooltip title=\"Message\">\r\n                                    <IconButton aria-label=\"Message\">\r\n\r\n                                    <span>\r\n                                                <a href={`#${props.getgamesobject[0]}`} title='Message' onClick={() => {\r\n                                                    formessage(props.getgamesobject[0])\r\n\r\n                                                }}\r\n                                                   style={{color: '#706468'}}><ChatBubbleOutline/></a>\r\n                                                <div id={props.getgamesobject[0]} className={style.modalDialog}>\r\n                                                    <div>\r\n                                                        <a href=\"#close\" title=\"Close\" className={style.close}>X</a>\r\n                                                        <h3>Message From {props.getgamesobject[0]}</h3>\r\n                                                        <SendMessageTableContainer myprops={props.getgamesobject[0]}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </span>\r\n\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n\r\n\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"filter list\">\r\n                        <FilterListIcon/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function Ringgames(props) {\r\n\r\n    useEffect(() => {\r\n        props.authThunk();\r\n    }, []);\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = props.getgames.map((n) => n.Name);\r\n            props.getGameObj(newSelecteds);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, Name) => {\r\n        const selectedIndex = selected.indexOf(Name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, Name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n        props.getGameObj(newSelected);\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (Name) => selected.indexOf(Name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.getgames.length - page * rowsPerPage);\r\n\r\n    return (\r\n\r\n        <div className={classes.root}>\r\n            {props.resultgetgames === \"\" ? <div style={{textAlign: 'center'}}><CircularProgress/></div> : <div>\r\n                <Paper className={classes.paper}>\r\n                    <EnhancedTableToolbar {...props} numSelected={selected.length}/>\r\n                    <TableContainer>\r\n                        <Table\r\n                            className={classes.table}\r\n                            aria-labelledby=\"tableTitle\"\r\n                            size={dense ? 'small' : 'medium'}\r\n                            aria-label=\"enhanced table\"\r\n                        >\r\n                            <EnhancedTableHead\r\n                                classes={classes}\r\n                                numSelected={selected.length}\r\n                                order={order}\r\n                                orderBy={orderBy}\r\n                                onSelectAllClick={handleSelectAllClick}\r\n                                onRequestSort={handleRequestSort}\r\n                                rowCount={props.getgames.length}\r\n                            />\r\n                            <TableBody>\r\n                                {stableSort(props.getgames, getComparator(order, orderBy))\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, index) => {\r\n                                        const isItemSelected = isSelected(row.Name);\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                onClick={(event) => handleClick(event, row.Name)}\r\n                                                role=\"checkbox\"\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={row.Name}\r\n                                                selected={isItemSelected}\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        checked={isItemSelected}\r\n                                                        inputProps={{'aria-labelledby': labelId}}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                    {row.Name}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align=\"right\">{row.Game}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Status=='Offline'?<div style={{color:'red'}}>{row.Status}</div>:<div style={{color:'green'}}>{row.Status}</div>}</TableCell>\r\n\r\n                                                \r\n                                                \r\n                                                <TableCell align=\"right\">{row.Auto}</TableCell>\r\n                                                \r\n                                                <TableCell align=\"right\">{row.PW}</TableCell>\r\n                                                <TableCell align=\"right\">{row.PermPlay}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Description}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Seats}</TableCell>\r\n                                                <TableCell align=\"right\">{row.StartMin}</TableCell>\r\n                                                <TableCell align=\"right\">{row.SmallestChip}</TableCell>\r\n                                                <TableCell align=\"right\">{row.BuyInMin}</TableCell>\r\n                                                <TableCell align=\"right\">{row.BuyInMax}</TableCell>\r\n                                                <TableCell align=\"right\">{row.BuyInDef}</TableCell>\r\n                                                <TableCell align=\"right\">{row.RakePercent}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TimeBank}</TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                {emptyRows > 0 && (\r\n                                    <TableRow style={{height: (dense ? 33 : 53) * emptyRows}}>\r\n                                        <TableCell colSpan={16}/>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[15, 25]}\r\n                        component=\"div\"\r\n                        count={props.getgames.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n                <FormControlLabel\r\n                    control={<Switch checked={dense} onChange={handleChangeDense}/>}\r\n                    label=\"Dense padding\"\r\n                />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditRingGame\\EditRingGame.jsx",["453","454"],"import React from \"react\";\r\nimport style from './EditRingGame.module.css';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nconst FormEditTable = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <table className={style.table_edit_table}>\r\n                    <tbody>\r\n\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>Edit table: {props.EditMessag.Object.Name}</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>New Name:</td>\r\n                        <td><Field type=\"text\" name={\"NewGameID\"} component={\"input\"} placeholder='Enter a new name'\r\n                                   title=\"Specify a unique table name, up to 40 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Description:</td>\r\n                        <td><Field type=\"text\" component={\"input\"} name={\"Description\"}\r\n                                   placeholder={props.EditMessag.Object.Description}\r\n                                   title=\"This is an optional description, up to 500 characters. It is displayed at the top of the table's information window and may include HTML tags, including links. See help file for details.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Auto online:</td>\r\n                        <td><Field name={\"AutoStart\"} component={\"select\"} required\r\n                                   title=\"When this option is set to Yes, the ring game will be put online when the game server is started. Otherwise tables must be manually put online with the Action button.\">\r\n                            <option value={props.EditMessag.Object.Auto}\r\n                                    selected>{props.EditMessag.Object.Auto}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Game:</td>\r\n                        <td><Field name={\"GameType\"} component={\"select\"} required\r\n                                   title=\"Select a Hold'em, Omaha, Omaha-5, Razz, 7-Card Stud, or Mixed game. When Mixed is selected, fill in the Mixed field also. Only Limit games are available in the Trial Version.\">\r\n                            <option value={props.EditMessag.Object.Game}\r\n                                    selected>{props.EditMessag.Object.Game}</option>\r\n                            <option value=\"Limit Hold'em\">Limit Hold'em</option>\r\n                            <option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>\r\n                            <option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>\r\n                            <option value=\"Cap Limit Hold'em\">Cap Limit Hold'em</option>\r\n                            <option value=\"Limit Omaha\">Limit Omaha</option>\r\n                            <option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>\r\n                            <option value=\"No Limit Omaha\">No Limit Omaha</option>\r\n                            <option value=\"Cap Limit Omaha\">Cap Limit Omaha</option>\r\n                            <option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Cap Limit Omaha Hi-Lo\">Cap Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Limit Omaha-5\">Limit Omaha-5</option>\r\n                            <option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>\r\n                            <option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>\r\n                            <option value=\"Cap Limit Omaha-5\">Cap Limit Omaha-5</option>\r\n                            <option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Cap Limit Omaha-5 Hi-Lo\">Cap Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Limit Razz\">Limit Razz</option>\r\n                            <option value=\"Limit Stud\">Limit Stud</option>\r\n                            <option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>\r\n                            <option value=\"Mixed\">Mixed</option>\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Mixed:</td>\r\n                        <td><Field type=\"text\" name={\"MixedList\"} component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.MixedList}\r\n                                   title=\"Select a list of games when Game type is set to Mixed, otherwise leave blank. Each game is played for the duration set by &quot;Mixed hands&quot; and the list loops indefinitely.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Mixed hands:</td>\r\n                        <td><Field type=\"text\" name={\"MixedHands\"} component={\"input\"} placeholder=\"0\"\r\n                                   placeholder={props.EditMessag.Object.MixedHands}\r\n                                   title=\"Number of hands per game when Game type is set to Mixed, 1 to 1000. Or set to 0 to use the seat count.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field type=\"text\" name={\"Password\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.PW}\r\n                                   title=\"Specify a password needed to take a seat at the table or leave this field blank for an open table. You can also use the play permission to restrict play to specific players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Private:</td>\r\n                        <td><Field name={\"Private\"} component={\"select\"} required\r\n                                   title=\"If a password is set for the table, select Yes to make it completely private or select No to allow observers to watch. You can also use the observe permission to restrict observers.\">\r\n                            <option value={props.EditMessag.Object.Private}\r\n                                    selected>{props.EditMessag.Object.Private}</option>\r\n                            <option value=\"No\">No</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Play permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermPlay\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.PermPlay}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict play to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observe permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermObserve\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.PermObserve}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict observing to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the private setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player chat permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermPlayerChat\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.PermPlayerChat}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to players who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all seated players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observer chat permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermObserverChat\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.PermObserverChat}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to observers who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all observers.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Suspend chat all-in:</td>\r\n                        <td><select name={\"SuspendChatAllIn\"} component={\"select\"} required\r\n                                    title=\"Select Yes to suspend the table chat when any player has an all-in bet.\">\r\n                            <option value={props.EditMessag.Object.SuspendChatAllIn}\r\n                                    selected>{props.EditMessag.Object.SuspendChatAllIn}</option>\r\n                            <option value=\"No\">No</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n\r\n                        </select></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Seats:</td>\r\n                        <td><Field type=\"text\" name={\"Seats\"} placeholder=\"9\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.Seats}\r\n                                   title=\"Select the number of seats available at this table, from 2 to 10 (8 max for Stud or Razz).\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {/*<tr>*/}\r\n                    {/*    <td>Start minimum:</td>*/}\r\n                    {/*    <td><Field type=\"text\" name={\"StartMin\"} value=\"2\" component={\"input\"}*/}\r\n                    {/*               title=\"Select the minimum number of ready players needed to start a new session.\"/>*/}\r\n                    {/*    </td>*/}\r\n                    {/*</tr>*/}\r\n                    {/*<tr>*/}\r\n                    {/*    <td>Start code:</td>*/}\r\n                    {/*    <td><Field type=\"text\" name={\"StartCode\"} value=\"0\" component={\"input\"}*/}\r\n                    {/*               title=\"This is a code (1 to 999999) that can be entered in the Lobby window (Options menu) to start a game that has not met the Start Minimum requirement. Enter 0 to disable this feature.\"/>*/}\r\n                    {/*    </td>*/}\r\n                    {/*</tr>*/}\r\n                    <tr>\r\n                        <td>Primary currency:</td>\r\n                        <td><Field name={\"PrimaryCurrency\"} component={\"select\"} required\r\n                                   title=\"Select Yes for primary (Balance) or No for secondary (Balance2) funding of the buy-ins. Secondary currency is only supported in the Gold edition.\">\r\n                            <option value={props.EditMessag.Object.PrimaryCurrency}\r\n                                    selected>{props.EditMessag.Object.PrimaryCurrency}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Smallest chip:</td>\r\n                        <td><Field name={\"SmallestChip\"} component={\"select\"} required\r\n                                   title=\"Select the denomination of the smallest chip allowed at this table. Buy-in, rake, blinds, and player bets must all be a multiple of this value.\">\r\n                            <option value={props.EditMessag.Object.SmallestChip}\r\n                                    selected=\"\">{props.EditMessag.Object.SmallestChip}</option>\r\n                            <option value=\"0.01\">0.01</option>\r\n                            <option value=\"0.05\">0.05</option>\r\n                            <option value=\"0.25\">0.25</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"500\">500</option>\r\n                            <option value=\"1000\">1000</option>\r\n                            <option value=\"5000\">5000</option>\r\n                            <option value=\"25000\">25000</option>\r\n                            <option value=\"100000\">100000</option>\r\n                            <option value=\"500000\">500000</option>\r\n                            <option value=\"1000000\">1000000</option>\r\n                            <option value=\"5000000\">5000000</option>\r\n                            <option value=\"25000000\">25000000</option>\r\n                            <option value=\"100000000\">100000000</option>\r\n                            <option value=\"500000000\">500000000</option>\r\n                            <option value=\"1000000000\">1000000000</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Minimum buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInMin\"} component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BuyInMin}\r\n                                   title=\"Select the minimum buy-in for this table. The default value is 400.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInMax\"} component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BuyInMax}\r\n                                   title=\"Select the maximum buy-in for this table. The default value is 2000.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Default buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInDef\"} value=\"1200\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BuyInDef}\r\n                                   title=\"Select the default buy-in for this table. The default value is 1200.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Cap limit:</td>\r\n                        <td><Field type=\"text\" name={\"CapLimit\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.CapLimit}\r\n                                   title=\"Cap limit for CL games, typically set at 20 to 40 times the big blind. This setting is not used in Limit/NL/PL games.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rake percent:</td>\r\n                        <td><Field type=\"text\" name={\"RakePercent\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.RakePercent}\r\n                                   title=\"Enter the percentage of chips from each pot that will be raked into the house rake account. This is a Pro/Gold version feature. Set to 0 for the Trial/Lite version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rake cap:</td>\r\n                        <td><Field type=\"text\" name={\"RakeCap\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.RakeCap}\r\n                                   title=\"Enter the maximum number of chips that can be raked in a single hand. Set to 0 for no cap limit. This is a Pro/Gold version feature. Set to 0 for the Trial/Lite version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn clock:</td>\r\n                        <td><Field type=\"text\" name={\"TurnClock\"} value=\"30\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.TurnClock}\r\n                                   title=\"This is the number of seconds (10 to 120) that the player has to act on each turn. The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn warning:</td>\r\n                        <td><Field type=\"text\" name={\"TurnWarning\"} value=\"10\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.TurnWarning}\r\n                                   title=\"This is number of seconds remaining (5 to 119) on the turn clock when a warning is sent to the player and (if sync enabled) their time bank button appears. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank:</td>\r\n                        <td><Field type=\"text\" name=\"BankClock\" value=\"60\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.TimeBank}\r\n                                   title=\"This is a reserve of time (0 to 600 seconds) available to each player on request and via disconnect detection. The default value is 60.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <td>Time bank sync:</td>\r\n                        <td><Field name={\"BankSync\"} component={\"select\"} required\r\n                                   title=\"Select Yes (the default) to show the time bank button with the turn warning. Select No to show the time bank button immediately.\">\r\n                            <option value={props.EditMessag.Object.BankSync}\r\n                                    selected>{props.EditMessag.Object.BankSync}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank reset:</td>\r\n                        <td><Field type=\"text\" name={\"BankReset\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BankReset}\r\n                                   title=\"This is the number of hands that must be played before a player's time bank is automatically refilled. Use 0 to disable the reset feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Disconnect protection:</td>\r\n                        <td><Field name={\"DisProtect\"} component={\"select\"} required\r\n                                   title=\"Select Yes to automatically activate a player's time bank if they disconnect during their turn and run out of normal time.\">\r\n                            <option value={props.EditMessag.Object.DisProtect}\r\n                                    selected>{props.EditMessag.Object.DisProtect}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Small blind:</td>\r\n                        <td><Field type=\"text\" name={\"SmallBlind\"} value=\"10\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.SmallBlind}\r\n                                   title=\"This is the Small Blind setting. It is only used in Pot Limit and No Limit games. The default value is 10. In Limit games, the Small Blind is half the Small Bet setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Big blind:</td>\r\n                        <td><Field type=\"text\" name={\"BigBlind\"} value=\"20\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BigBlind}\r\n                                   title=\"This is the Big Blind setting. It is only used in Pot Limit and No Limit games. The default value is 20. In Limit games, the Big Blind is equal to the Small Bet setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Allow straddle:</td>\r\n                        <td><Field name={\"AllowStraddle\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to give the Under-The-Gun player the option to post a straddle bet (twice the big blind) before the cards are dealt in Hold'em and Omaha games. The default value is &quot;No&quot;.\">\r\n                            <option value={props.EditMessag.Object.AllowStraddle}\r\n                                    selected>{props.EditMessag.Object.AllowStraddle}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Small bet:</td>\r\n                        <td><Field type=\"text\" name={\"SmallBet\"} value=\"20\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.SmallBet}\r\n                                   title=\"This is the Small Bet setting. It is only used in Limit games and also determines the blinds in Limit games that use blinds.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Big bet:</td>\r\n                        <td><Field type=\"text\" name={\"BigBet\"} value=\"40\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BigBet}\r\n                                   title=\"This is the Big Bet setting. It is only used in Limit games.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ante:</td>\r\n                        <td><Field type=\"text\" name={\"Ante\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.Ante}\r\n                                   title=\"This is the ante. Normally not used in Hold'em and Omaha unless &quot;Ante all&quot; is also enabled.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ante all:</td>\r\n                        <td><Field name={\"AnteAll\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to collect an ante for all games. Set to No (the default) to only collect an ante in Razz and Stud games.\">\r\n                            <option value={props.EditMessag.Object.AnteAll}\r\n                                    selected>{props.EditMessag.Object.AnteAll}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bring-in:</td>\r\n                        <td><Field type=\"text\" name={\"BringIn\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.BringIn}\r\n                                   title=\"This is the bring-in. It is only used in Stud and Razz games and is typically no more than half the Small Bet value.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Allow duplicate IPs:</td>\r\n                        <td><Field name={\"AllowDupeIPs\"} component={\"select\"} required\r\n                                   title=\"When this option is set to No, a player cannot join the table if they have the same IP address as another player already seated at the table. Localhost IPs 127.0.0.1 and 0:0:0:0:0:0:0:1 are exempted.\">\r\n                            <option value={props.EditMessag.Object.DupeIPs}\r\n                                    selected>{props.EditMessag.Object.DupeIPs}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rathole minutes:</td>\r\n                        <td><Field type=\"text\" name={\"RatholeMinutes\"} value=\"0\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.RatholeMinutes}\r\n                                   title=\"When a player leaves the table, this is the minimum number of minutes (0 to 999999) they must wait if they want to return with a smaller stack. The default value is 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Sitout minutes:</td>\r\n                        <td><Field type=\"text\" name={\"SitoutMinutes\"} value=\"10\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.SitoutMinutes}\r\n                                   title=\"This is the maximum number of consecutive minutes (1 to 120) that a player can sit out before being automatically removed from the table. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Sitout relaxed:</td>\r\n                        <td><Field name={\"SitoutRelaxed\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to keep sitout-expired players at the table if the waiting list is empty.\">\r\n                            <option value={props.EditMessag.Object.SitoutRelaxed}\r\n                                    selected>{props.EditMessag.Object.SitoutRelaxed}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Table graphic:</td>\r\n                        <td><Field type=\"text\" name={\"TableGraphic\"} component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.TableGraphic}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the table graphic. Leave this value blank to use the default system graphic.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field type=\"text\" name={\"Note\"} value=\"\" component={\"input\"}\r\n                                   placeholder={props.EditMessag.Object.Note}\r\n                                   title=\"This is an optional note field, not seen by the players. 500 characters maximum.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            {/*<Field type=\"button\" value=\"Ok\" onClick=\"send('RGSaveAdd')\" component={\"button\"}/> */}\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n                            {props.id}\r\n\r\n                            &nbsp;\r\n                            {/*<NavLink to=\"/ringgames\">*/}\r\n                            {/*    <span>Cancel</span>*/}\r\n                            {/*</NavLink>*/}\r\n\r\n                           <NavLink to='/ringgames'> <Button variant=\"contained\" color=\"primary\" >\r\n                                Return\r\n                            </Button></NavLink>\r\n                            {props.EditMessag.Error !== '' ? <h3 style={{color: 'red'}}>{props.EditMessag.Error === '' ?\r\n                                <CircularProgress/> : props.EditMessag.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.EditMessag.Result}</h3>}\r\n\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('edittable'));\r\n}\r\n\r\n\r\nlet ContactFormEdit = reduxForm({form: 'edittable', onSubmitSuccess: afterSubmit,})(FormEditTable);\r\n\r\nconst EditTable = (props) => {\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n\r\n            values.NewGameID === undefined ? '' : values.NewGameID,\r\n            values.Description === undefined ? props.EditMessag.Object.Description : values.Description,\r\n            values.AutoStart === undefined ? props.EditMessag.Object.Auto : values.AutoStart,\r\n            values.GameType === undefined ? props.EditMessag.Object.Game : values.GameType,\r\n            values.MixedList === undefined ? props.EditMessag.Object.MixedList : values.MixedList,\r\n            values.MixedHands === undefined ? props.EditMessag.Object.MixedHands : values.MixedHands,\r\n            values.Password === undefined ? props.EditMessag.Object.PW : values.Password,\r\n            values.Private === undefined ? props.EditMessag.Object.Private : values.Private,\r\n            values.PermPlay === undefined ? props.EditMessag.Object.PermPlay : values.PermPlay,\r\n            values.PermObserve === undefined ? props.EditMessag.Object.PermObserve : values.PermObserve,\r\n            values.PermPlayerChat === undefined ? props.EditMessag.Object.PermPlayerChat : values.PermPlayerChat,\r\n            values.PermObserverChat === undefined ? props.EditMessag.Object.PermObserverChat : values.PermObserverChat,\r\n            values.SuspendChatAllIn === undefined ? props.EditMessag.Object.SuspendChatAllIn : values.SuspendChatAllIn,\r\n            values.Seats === undefined ? props.EditMessag.Object.Seats : values.Seats,\r\n            // values.StartMin,\r\n            // values.StartCode,\r\n            values.PrimaryCurrency === undefined ? props.EditMessag.Object.PrimaryCurrency : values.PrimaryCurrency,\r\n            values.SmallestChip === undefined ? props.EditMessag.Object.SmallestChip : values.SmallestChip,\r\n            values.BuyInMin === undefined ? props.EditMessag.Object.BuyInMin : values.BuyInMin,\r\n            values.BuyInMax === undefined ? props.EditMessag.Object.BuyInMax : values.BuyInMax,\r\n            values.BuyInDef === undefined ? props.EditMessag.Object.BuyInDef : values.BuyInDef,\r\n            values.CapLimit === undefined ? props.EditMessag.Object.CapLimit : values.CapLimit,\r\n            values.RakePercent === undefined ? props.EditMessag.Object.RakePercent : values.RakePercent,\r\n            values.RakeCap === undefined ? props.EditMessag.Object.RakeCap : values.RakeCap,\r\n            values.TurnClock === undefined ? props.EditMessag.Object.TurnClock : values.TurnClock,\r\n            values.TurnWarning === undefined ? props.EditMessag.Object.TurnWarning : values.TurnWarning,\r\n            values.BankClock === undefined ? props.EditMessag.Object.TimeBank : values.BankClock,\r\n            values.BankSync === undefined ? props.EditMessag.Object.BankSync : values.BankSync,\r\n            values.BankReset === undefined ? props.EditMessag.Object.BankReset : values.BankReset,\r\n            values.DisProtect === undefined ? props.EditMessag.Object.DisProtect : values.DisProtect,\r\n            values.SmallBlind === undefined ? props.EditMessag.Object.SmallBlind : values.SmallBlind,\r\n            values.BigBlind === undefined ? props.EditMessag.Object.BigBlind : values.BigBlind,\r\n            values.AllowStraddle === undefined ? props.EditMessag.Object.AllowStraddle : values.AllowStraddle,\r\n            values.SmallBet === undefined ? props.EditMessag.Object.SmallBet : values.SmallBet,\r\n            values.BigBet === undefined ? props.EditMessag.Object.BigBet : values.BigBet,\r\n            values.Ante === undefined ? props.EditMessag.Object.Ante : values.Ante,\r\n            values.AnteAll === undefined ? props.EditMessag.Object.AnteAll : values.AnteAll,\r\n            values.BringIn === undefined ? props.EditMessag.Object.BringIn : values.BringIn,\r\n            values.AllowDupeIPs === undefined ? props.EditMessag.Object.DupeIPs : values.DupeIPs,\r\n            values.RatholeMinutes === undefined ? props.EditMessag.Object.RatholeMinutes : values.RatholeMinutes,\r\n            values.SitoutMinutes === undefined ? props.EditMessag.Object.SitoutMinutes : values.SitoutMinutes,\r\n            values.SitoutRelaxed === undefined ? props.EditMessag.Object.SitoutRelaxed : values.SitoutRelaxed,\r\n            values.TableGraphic === undefined ? props.EditMessag.Object.TableGraphic : values.TableGraphic,\r\n            values.Note === undefined ? props.EditMessag.Object.Note : values.Note,\r\n            props.EditMessag.Object.Name\r\n        ];\r\n\r\n        props.editTableThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormEdit adtablenew={props.adtablenew} EditMessag={props.EditMessag} {...props} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default EditTable;\r\n",["455","456"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewPlayer\\NewPlayer.jsx",["457"],"import React from \"react\";\r\nimport style from \"../NewPlayer/NewPlayer.module.css\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {addPlayerThunk} from \"../../Reducer/addplayer-reducer\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NewPlayer = (props) => {\r\n\r\n    let d = new Date();\r\n    function addZero(i) {\r\n        if (i < 10) {\r\n            i = \"0\" + i;\r\n            return i;\r\n        }\r\n        return i;}\r\n\r\n    let time = `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`;\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <table className={style.table}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>New Player Account</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Player\"} component={'input'}\r\n                                   title=\"Enter a unique player name, up to 12 characters. You may only include letters, numbers, dashes, and underscore characters.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Admin profile:</td>\r\n                        <td><Field className=\"stretch\" name={\"AdminProfile\"} component={'select'}\r\n                                   title=\"Remote Admin profile name. A blank value indicates no admin rights. This feature is only available in the Gold version.\">\r\n                            <option value=\"\" selected=\"\"></option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Title:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Title\"} component={'input'}\r\n                                   title=\"This is an optional parameter (0 to 15 characters) that can be used to identify a player with a specific site title (moderator, banker, administrator, etc.). The title appears in the player's mouseover hint when seated at a table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Level:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Level\"} component={'input'}\r\n                                   title=\"This is an optional parameter (0 to 50 characters) that can be used to identify a player's level or ranking as a player based on parameters determined by the site administrator. The level appears in the player's mouseover hint when seated at a table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Real name:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RealName\"} component={'input'}\r\n                                   title=\"Player's real name, 0 to 50 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Password\"} component={'input'}\r\n                                   title=\"Player's password.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Gender:</td>\r\n                        <td><Field className=\"stretch\" name={\"Gender\"} title=\"Player's gender.\" component={'select'}>\r\n                            <option value=\"Male\" selected=\"\">Male</option>\r\n                            <option value=\"Female\">Female</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Location:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Location\"} component={'input'}\r\n                                   title=\"Player's location (e.g., City), from 1 to 30 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Balance:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Balance\"} component={'input'}\r\n                                   title=\"Player's primary account balance. The default value for a new account is determined from the &quot;Starting balance&quot; system setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Balance2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Balance2\"} component={'input'}\r\n                                   title=\"Player's secondary account balance (Gold edition only). The default value for a new account is determined from the &quot;Starting balance 2&quot; system setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last reset:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastReset\"} component={'input'}\r\n                                   placeholder={`${time}`}\r\n                                   title=\"This is the last date and time that the player's primary balance was last reset.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last reset2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastReset2\"} component={'input'}\r\n                                   placeholder={`${time}`}\r\n                                   title=\"This is the last date and time that the player's secondary balance was last reset.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Permissions:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Permissions\"} component={'input'}\r\n                                   title=\"This is a comma-separated list of permission tokens, giving the player access to restricted ring tables, tournaments, and chat that have a matching token. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Tickets:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Tickets\"} component={'input'}\r\n                                   title=\"This is a comma-separated list of ticket tokens, given as prizes from satellite tournaments for entry into other tournaments. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips transfer:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsTransfer\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to transfer primary (balance) chips to other players from lobby menu. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips transfer2:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsTransfer2\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to transfer secondary (balance2) chips to other players from lobby menu. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips accept:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsAccept\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to accept primary (balance) chip transfers from other players. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option value=\"Yes\" selected=\"\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips accept2:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsAccept2\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to accept secondary (balance2) chip transfers from other players. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option value=\"Yes\" selected=\"\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Chat\"} component={'input'}\r\n                                   placeholder='0000-00-00 00:00'\r\n                                   title=\"Set to 0000-00-00 00:00 to enable chat privileges or set to a date &amp; time in the future when chat privileges will be automatically reinstated. Set to 9999-99-99 99:99 to keep a permanent ban.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat color 1:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor1\"} component={'input'}\r\n                                   title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) in the lobby window and when seated at a table. Leave blank to use the default &quot;Player chat color&quot; setting specified in the system settings.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat color 2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor2\"} component={'input'}\r\n                                   title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) when they are an observer at a table. Leave blank to use the default &quot;Observer chat color&quot; setting specified in the system settings.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>First login:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"FirstLogin\"} component={'input'}\r\n                                   title=\"This is the date and time that the player first logged into your site. It is initially set to all zeros.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last login:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastLogin\"} component={'input'}\r\n                                   title=\"This is the last date and time that the player logged into your site. It is initially set to all zeros.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Logins:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Logins\"} component={'input'}\r\n                                   title=\"This is the number of times the player has logged into your site.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Email:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Email\"} component={'input'}\r\n                                   title=\"Player's email address. If a player forgets their password, a reset code will be sent to this address.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Val code:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ValCode\"} component={'input'}\r\n                                   title=\"This is a random code sent by the server to the player's email address for account validation or password resets. This field is erased automatically once the account is validated.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Avatar index:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Avatar\"} component={'input'}\r\n                                   title=\"This is the player's avatar number in the communal avatar set. Set value to 0 to use the Avatar file instead.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Avatar file:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"AvatarFile\"} component={'input'}\r\n                                   title=\"This is an optional (Pro/Gold only) setting that assigns a specific 32x32 image (GIF, PNG, JPG) file to the player to use as their avatar. This setting is ignored if Avatar Index is not set to 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Custom:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Custom\"} component={'input'}\r\n                                   title=\"Optional custom field, up to 50 characters. The caption and other options for this field are set in the Account Settings group on the System tab.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Note\"} component={'input'}\r\n                                   title=\"Optional field for notes, up to 250 characters.\"/></td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>ERake:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ERake\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated primary currency rake contributions, calculated via the equal distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>ERake2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ERake2\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated secondary currency rake contributions, calculated via the equal distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>PRake:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PRake\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated primary currency rake contributions, calculated via the proportional distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>PRake2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PRake2\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated secondary currency rake contributions, calculated via the proportional distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>TFees:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TFees\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated primary currency tournament fee contributions.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>TFees2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TFees2\"} component={'input'} placeholder='0'\r\n                                   title=\"Player's accumulated secondary currency tournament fee contributions.\"/></td>\r\n                    </tr> */}\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n\r\n                            &nbsp;\r\n\r\n\r\n                            <NavLink to=\"/conplayers\"><Button variant=\"contained\" color=\"primary\">\r\n                                Return\r\n                            </Button></NavLink>\r\n\r\n                            {props.adplayer.Error !== '' ? <h3 style={{color: 'red'}}>{props.adplayer.Error === '' ?\r\n                                <CircularProgress/> : props.adplayer.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.adplayer.Result}</h3>}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('addplayer'));\r\n}\r\n\r\nlet ContactFormPlayer = reduxForm({\r\n    form: 'addplayer',\r\n    onSubmitSuccess: afterSubmit,\r\n})(NewPlayer);\r\n\r\n\r\nconst AddPlayer = (props) => {\r\n    let d = new Date();\r\n    function addZero(i) {\r\n        if (i < 10) {\r\n            i = \"0\" + i;\r\n            return i;\r\n        }\r\n        return i;}\r\n\r\n    let time = `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`;\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n\r\n            values.Player === undefined ? '' : values.Player,\r\n            values.AdminProfile === undefined ? '' : values.AdminProfile,\r\n            values.Title === undefined ? '' : values.Title,\r\n            values.Level === undefined ? '' : values.Level,\r\n            values.RealName === undefined ? '' : values.RealName,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Location === undefined ? '' : values.Location,\r\n            values.Email === undefined ? '' : values.Email,\r\n            values.ValCode === undefined ? '' : values.ValCode,\r\n            values.Balance === undefined ? '0' : values.Balance,\r\n            values.Balance2 === undefined ? '0' : values.Balance2,\r\n            values.LastReset === undefined ? time : values.LastReset,\r\n            values.LastReset2 === undefined ? time : values.LastReset2,\r\n            values.Avatar === undefined ? '1' : values.Avatar,\r\n            values.AvatarFile === undefined ? '' : values.AvatarFile,\r\n            values.Logins === undefined ? '0' : values.Logins,\r\n            values.FirstLogin === undefined ? '' : values.FirstLogin,\r\n            values.LastLogin === undefined ? '' : values.LastLogin,\r\n            values.Gender === undefined ? 'Male' : values.Gender,\r\n            values.Permissions === undefined ? '' : values.Permissions,\r\n            values.Tickets === undefined ? '' : values.Tickets,\r\n            values.ChipsTransfer === undefined ? 'Yes' : values.ChipsTransfer,\r\n            values.ChipsTransfer2 === undefined ? 'Yes' : values.ChipsTransfer2,\r\n            values.ChipsAccept === undefined ? 'Yes' : values.ChipsAccept,\r\n            values.ChipsAccept2 === undefined ? 'Yes' : values.ChipsAccept2,\r\n            values.Chat === undefined ? time : values.Chat,\r\n            values.ChatColor1 === undefined ? '' : values.ChatColor1,\r\n            values.ChatColor2 === undefined ? '' : values.ChatColor2,\r\n            values.Custom === undefined ? '' : values.Custom,\r\n            values.Note === undefined ? '' : values.Note,\r\n            values.ERake === undefined ? '0' : values.ERake,\r\n            values.ERake2 === undefined ? '0' : values.ERake2,\r\n            values.PRake === undefined ? '0' : values.PRake,\r\n            values.PRake2 === undefined ? '0' : values.PRake2,\r\n            values.TFees === undefined ? '0' : values.TFees,\r\n            values.TFees2 === undefined ? '0' : values.TFees2,\r\n            // values.RingChips === undefined ? '' : values.RingChips,\r\n            // values.RingChips2 === undefined ? '' : values.RingChips2,\r\n            // values.RegChips === undefined ? '' : values.RegChips,\r\n            // values.RegChips2 === undefined ? '' : values.RegChips2,\r\n            // values.SessionID === undefined ? '' : values.SessionID,\r\n        ];\r\n\r\n        props.addPlayerThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormPlayer adplayer={props.adplayer} mixedThunk={props.mixedThunk} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default AddPlayer;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\AddFastPlayer\\AddFastPlayer.jsx",["458","459","460","461"],"import React from \"react\";\r\nimport style from \"../NewPlayer/NewPlayer.module.css\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {addPlayerThunk} from \"../../Reducer/addplayer-reducer\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {myInputs} from \"../../forinput/newinput\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {makeStyles, withStyles} from \"@material-ui/core/styles\";\r\nimport ac from \"../../img/main-bg.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n\r\n        background: `url(${ac})`,\r\n        backgroundColor: \"black\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"repeat-y\",\r\n        backgroundPosition: \"center center\",\r\n        backgroundAttachment: 'fixed',\r\n\r\n\r\n\r\n        padding: \"15px\",\r\n        border: \"1px solid #FEF4B0!important\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        \"& label.Mui-focused\": {\r\n            color: \"green\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {},\r\n        \"& .MuiOutlinedInput-root\": {\r\n            \"& fieldset\": {\r\n                borderRadius: \"0px\",\r\n            },\r\n            \"&.MuiInputBase-root\": {\r\n                backgroundColor: \"#fff\",\r\n                borderRadius: \"0px\",\r\n            },\r\n\r\n            \"&:hover fieldset\": {},\r\n            \"&.Mui-focused fieldset\": {},\r\n        },\r\n    },\r\n})(Field);\r\n\r\nconst BootstrapButton = withStyles({\r\n    root: {\r\n        boxShadow: \"none\",\r\n        textTransform: \"none\",\r\n        fontSize: 21,\r\n        padding: \"10px 12px\",\r\n        border: \"1px solid\",\r\n        borderRadius: \"50px\",\r\n        lineHeight: 1.5,\r\n        backgroundColor: \"green\",\r\n        borderColor: \"green\",\r\n        fontFamily: [\r\n            \"-apple-system\",\r\n            \"BlinkMacSystemFont\",\r\n            '\"Segoe UI\"',\r\n            \"Roboto\",\r\n            '\"Helvetica Neue\"',\r\n            \"Arial\",\r\n            \"sans-serif\",\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(\",\"),\r\n        \"&:hover\": {\r\n            backgroundColor: \"#333\",\r\n            borderColor: \"#333\",\r\n            boxShadow: \"none\",\r\n        },\r\n        \"&:active\": {\r\n            boxShadow: \"none\",\r\n            backgroundColor: \"#333\",\r\n            borderColor: \"#333\",\r\n        },\r\n        \"&:focus\": {\r\n            boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.5)\",\r\n        },\r\n    },\r\n})(Button);\r\n\r\n\r\nconst AddFastPlayer = (props) => {\r\n\r\n    let d = new Date();\r\n    let day = d.getDate();\r\n    let month = d.getMonth() + 1;\r\n    let year = d.getFullYear();\r\n\r\n    let min = () => {\r\n        if (d.getMinutes().length < 2) {\r\n            return '0' + d.getMinutes();\r\n        }\r\n        return d.getMinutes();\r\n    }\r\n\r\n    let hours = () => {\r\n        if (d.getHours().length < 2) {\r\n            return '0' + d.getHours();\r\n        }\r\n        return d.getHours();\r\n    }\r\n    let time = `${year}-${month}-${day} ${hours()}:${min()}`;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <div className={classes.paper}>\r\n\r\n                        <form\r\n                            className={classes.form}\r\n                            noValidate\r\n                            onSubmit={props.handleSubmit}\r\n                        >\r\n                            <CssTextField\r\n                                component={myInputs}\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                placeholder=\"Player\"\r\n                                name={\"Player\"}\r\n                                autoComplete=\"login\"\r\n                                autoFocus\r\n                            />\r\n                            <CssTextField\r\n                                component={myInputs}\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                name={\"Password\"}\r\n                                placeholder=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                            {/* <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    /> */}\r\n                            <BootstrapButton\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                            >\r\n                                GO\r\n                            </BootstrapButton>\r\n                            {/* <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid> */}\r\n                        </form>\r\n\r\n                </div>\r\n\r\n                <Box mt={8} style={{textAlign:'center'}}>\r\n                    {props.adplayer.Error !== '' ? <h3 style={{color: 'red'}}>{props.adplayer.Error === '' ?\r\n                        <CircularProgress/> : props.adplayer.Error}</h3>\r\n                        : <h3 style={{color: 'green'}}>{props.adplayer.Result==\"Ok\"&&<div>Active Account</div>}</h3>}\r\n                </Box>\r\n            </Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {/*<form onSubmit={props.handleSubmit}>*/}\r\n            {/*    <table className={style.table}>*/}\r\n            {/*        <tbody>*/}\r\n\r\n            {/*        <tr>*/}\r\n\r\n            {/*            <td><Field className=\"stretch\" type=\"text\" name={\"Player\"} component={'input'} placeholder='Player' style={{padding: '10px',width:'250px',margin:'10px 0'}}*/}\r\n            {/*                       title=\"Enter a unique player name, up to 12 characters. You may only include letters, numbers, dashes, and underscore characters.\"/>*/}\r\n            {/*            </td>*/}\r\n            {/*        </tr>*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Admin profile:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"AdminProfile\"} component={'select'}*!/*/}\r\n            {/*        /!*               title=\"Remote Admin profile name. A blank value indicates no admin rights. This feature is only available in the Gold version.\">*!/*/}\r\n            {/*        /!*        <option value=\"\" selected=\"\"></option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Title:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Title\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is an optional parameter (0 to 15 characters) that can be used to identify a player with a specific site title (moderator, banker, administrator, etc.). The title appears in the player's mouseover hint when seated at a table.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Level:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Level\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is an optional parameter (0 to 50 characters) that can be used to identify a player's level or ranking as a player based on parameters determined by the site administrator. The level appears in the player's mouseover hint when seated at a table.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Real name:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"RealName\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Player's real name, 0 to 50 characters.\"/></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        <tr>*/}\r\n\r\n            {/*            <td><Field className=\"stretch\" type=\"text\" name={\"Password\"} component={'input'} placeholder='Password' style={{padding: '10px',width:'250px',margin:'10px 0'}}*/}\r\n            {/*                       title=\"Player's password.\"/></td>*/}\r\n            {/*        </tr>*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Gender:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"Gender\"} title=\"Player's gender.\" component={'select'}>*!/*/}\r\n            {/*        /!*        <option value=\"Male\" selected=\"\">Male</option>*!/*/}\r\n            {/*        /!*        <option value=\"Female\">Female</option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        <tr>*/}\r\n            {/*          /!* <td>Location:</td> *!/*/}\r\n            {/*          /!* <td>Agent:</td>*/}\r\n            {/*          <td><Field className=\"stretch\" type=\"text\" name={\"Location\"} component={'input'}*/}\r\n            {/*                     title=\"Agent, from 1 to 30 characters.\"/></td> *!/*/}\r\n            {/*         /!* <td><Field className=\"stretch\" type=\"text\" name={\"Location\"} component={'input'}*/}\r\n            {/*                     title=\"Player's location (e.g., City), from 1 to 30 characters.\"/></td> *!/*/}\r\n            {/*        </tr>*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Balance:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Balance\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Player's primary account balance. The default value for a new account is determined from the &quot;Starting balance&quot; system setting.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Balance2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Balance2\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Player's secondary account balance (Gold edition only). The default value for a new account is determined from the &quot;Starting balance 2&quot; system setting.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Last reset:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"LastReset\"} component={'input'}*!/*/}\r\n            {/*        /!*               placeholder={`${time}`}*!/*/}\r\n            {/*        /!*               title=\"This is the last date and time that the player's primary balance was last reset.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Last reset2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"LastReset2\"} component={'input'}*!/*/}\r\n            {/*        /!*               placeholder={`${time}`}*!/*/}\r\n            {/*        /!*               title=\"This is the last date and time that the player's secondary balance was last reset.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Permissions:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Permissions\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is a comma-separated list of permission tokens, giving the player access to restricted ring tables, tournaments, and chat that have a matching token. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Tickets:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Tickets\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is a comma-separated list of ticket tokens, given as prizes from satellite tournaments for entry into other tournaments. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chips transfer:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"ChipsTransfer\"} component={'select'}*!/*/}\r\n            {/*        /!*               title=\"Set to Yes to allow player to transfer primary (balance) chips to other players from lobby menu. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">*!/*/}\r\n            {/*        /!*        <option value=\"Yes\">Yes</option>*!/*/}\r\n            {/*        /!*        <option value=\"No\">No</option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chips transfer2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"ChipsTransfer2\"} component={'select'}*!/*/}\r\n            {/*        /!*               title=\"Set to Yes to allow player to transfer secondary (balance2) chips to other players from lobby menu. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">*!/*/}\r\n            {/*        /!*        <option value=\"Yes\">Yes</option>*!/*/}\r\n            {/*        /!*        <option value=\"No\">No</option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chips accept:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"ChipsAccept\"} component={'select'}*!/*/}\r\n            {/*        /!*               title=\"Set to Yes to allow player to accept primary (balance) chip transfers from other players. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">*!/*/}\r\n            {/*        /!*        <option value=\"Yes\" selected=\"\">Yes</option>*!/*/}\r\n            {/*        /!*        <option value=\"No\">No</option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chips accept2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" name={\"ChipsAccept2\"} component={'select'}*!/*/}\r\n            {/*        /!*               title=\"Set to Yes to allow player to accept secondary (balance2) chip transfers from other players. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">*!/*/}\r\n            {/*        /!*        <option value=\"Yes\" selected=\"\">Yes</option>*!/*/}\r\n            {/*        /!*        <option value=\"No\">No</option>*!/*/}\r\n            {/*        /!*    </Field></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chat:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Chat\"} component={'input'}*!/*/}\r\n            {/*        /!*               placeholder='0000-00-00 00:00'*!/*/}\r\n            {/*        /!*               title=\"Set to 0000-00-00 00:00 to enable chat privileges or set to a date &amp; time in the future when chat privileges will be automatically reinstated. Set to 9999-99-99 99:99 to keep a permanent ban.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chat color 1:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor1\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) in the lobby window and when seated at a table. Leave blank to use the default &quot;Player chat color&quot; setting specified in the system settings.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Chat color 2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor2\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) when they are an observer at a table. Leave blank to use the default &quot;Observer chat color&quot; setting specified in the system settings.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>First login:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"FirstLogin\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is the date and time that the player first logged into your site. It is initially set to all zeros.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Last login:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"LastLogin\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is the last date and time that the player logged into your site. It is initially set to all zeros.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Logins:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Logins\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is the number of times the player has logged into your site.\"/></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Email:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Email\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Player's email address. If a player forgets their password, a reset code will be sent to this address.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Val code:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"ValCode\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is a random code sent by the server to the player's email address for account validation or password resets. This field is erased automatically once the account is validated.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Avatar index:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Avatar\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is the player's avatar number in the communal avatar set. Set value to 0 to use the Avatar file instead.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Avatar file:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"AvatarFile\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"This is an optional (Pro/Gold only) setting that assigns a specific 32x32 image (GIF, PNG, JPG) file to the player to use as their avatar. This setting is ignored if Avatar Index is not set to 0.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Custom:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Custom\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Optional custom field, up to 50 characters. The caption and other options for this field are set in the Account Settings group on the System tab.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>Note:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"Note\"} component={'input'}*!/*/}\r\n            {/*        /!*               title=\"Optional field for notes, up to 250 characters.\"/></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>ERake:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"ERake\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated primary currency rake contributions, calculated via the equal distribution method.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>ERake2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"ERake2\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated secondary currency rake contributions, calculated via the equal distribution method.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>PRake:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"PRake\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated primary currency rake contributions, calculated via the proportional distribution method.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>PRake2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"PRake2\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated secondary currency rake contributions, calculated via the proportional distribution method.\"/>*!/*/}\r\n            {/*        /!*    </td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>TFees:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"TFees\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated primary currency tournament fee contributions.\"/></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        /!*<tr>*!/*/}\r\n            {/*        /!*    <td>TFees2:</td>*!/*/}\r\n            {/*        /!*    <td><Field className=\"stretch\" type=\"text\" name={\"TFees2\"} component={'input'} placeholder='0'*!/*/}\r\n            {/*        /!*               title=\"Player's accumulated secondary currency tournament fee contributions.\"/></td>*!/*/}\r\n            {/*        /!*</tr>*!/*/}\r\n            {/*        <tr>*/}\r\n            {/*            <td colSpan=\"2\" height=\"60\" align=\"center\">*/}\r\n            {/*                <button className={style.button} style={{padding: '10px',width:'250px',margin:'10px 0'}}>*/}\r\n            {/*                    Ok*/}\r\n            {/*                </button>*/}\r\n\r\n\r\n\r\n            {/*                {props.adplayer.Error !== '' ? <h3 style={{color: 'red'}}>{props.adplayer.Error === '' ?*/}\r\n            {/*                    <CircularProgress/> : props.adplayer.Error}</h3>*/}\r\n            {/*                    : <h3 style={{color: 'green'}}>{props.adplayer.Result}</h3>}*/}\r\n            {/*            </td>*/}\r\n            {/*        </tr>*/}\r\n            {/*        </tbody>*/}\r\n            {/*    </table>*/}\r\n            {/*</form>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('addplayerfast'));\r\n}\r\n\r\nlet ContactFormPlayerFast = reduxForm({\r\n    form: 'addplayerfast',\r\n    onSubmitSuccess: afterSubmit,\r\n})(AddFastPlayer);\r\n\r\n\r\nconst AddPlayerfast = (props) => {\r\n    let d = new Date();\r\n    let day = d.getDate();\r\n    let month = d.getMonth() + 1;\r\n    let year = d.getFullYear();\r\n\r\n    let min = () => {\r\n        if (d.getMinutes().length < 2) {\r\n            return '0' + d.getMinutes();\r\n        }\r\n        return d.getMinutes();\r\n    }\r\n\r\n    let hours = () => {\r\n        if (d.getHours().length < 2) {\r\n            return '0' + d.getHours();\r\n        }\r\n        return d.getHours();\r\n    }\r\n    let time = `${year}-${month}-${day} ${hours()}:${min()}`;\r\n\r\n    let randomEmail = () => {\r\n        let a = Math.floor(Math.random() * 10000) + 1 + 'player@mail.com';\r\n\r\n        return a;\r\n    }\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n\r\n            values.Player === undefined ? '' : values.Player,\r\n            values.AdminProfile === undefined ? '' : values.AdminProfile,\r\n            values.Title === undefined ? '' : values.Title,\r\n            values.Level === undefined ? '' : values.Level,\r\n            values.RealName === undefined ? '' : values.Player,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Location === undefined ? 'Internet' : values.Location,\r\n            values.Email === undefined ? randomEmail() : values.Email,\r\n            values.ValCode === undefined ? '' : values.ValCode,\r\n            values.Balance === undefined ? '0' : values.Balance,\r\n            values.Balance2 === undefined ? '0' : values.Balance2,\r\n            values.LastReset === undefined ? time : values.LastReset,\r\n            values.LastReset2 === undefined ? time : values.LastReset2,\r\n            values.Avatar === undefined ? '1' : values.Avatar,\r\n            values.AvatarFile === undefined ? '' : values.AvatarFile,\r\n            values.Logins === undefined ? '0' : values.Logins,\r\n            values.FirstLogin === undefined ? '' : values.FirstLogin,\r\n            values.LastLogin === undefined ? '' : values.LastLogin,\r\n            values.Gender === undefined ? 'Male' : values.Gender,\r\n            values.Permissions === undefined ? '' : values.Permissions,\r\n            values.Tickets === undefined ? '' : values.Tickets,\r\n            values.ChipsTransfer === undefined ? 'Yes' : values.ChipsTransfer,\r\n            values.ChipsTransfer2 === undefined ? 'Yes' : values.ChipsTransfer2,\r\n            values.ChipsAccept === undefined ? 'Yes' : values.ChipsAccept,\r\n            values.ChipsAccept2 === undefined ? 'Yes' : values.ChipsAccept2,\r\n            values.Chat === undefined ? '' : values.Chat,\r\n            values.ChatColor1 === undefined ? '' : values.ChatColor1,\r\n            values.ChatColor2 === undefined ? '' : values.ChatColor2,\r\n            values.Custom === undefined ? '' : values.Custom,\r\n            values.Note === undefined ? '' : values.Note,\r\n            values.ERake === undefined ? '0' : values.ERake,\r\n            values.ERake2 === undefined ? '0' : values.ERake2,\r\n            values.PRake === undefined ? '0' : values.PRake,\r\n            values.PRake2 === undefined ? '0' : values.PRake2,\r\n            values.TFees === undefined ? '0' : values.TFees,\r\n            values.TFees2 === undefined ? '0' : values.TFees2,\r\n\r\n        ];\r\n\r\n        props.addPlayerThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormPlayerFast adplayer={props.adplayer} mixedThunk={props.mixedThunk} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default AddPlayerfast;\r\n\r\n",["462","463"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Affiliate\\Affiliate.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatistic\\BalanceStatistic.jsx",["464","465","466","467","468","469"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport {Button, Link, Menu, MenuItem} from \"@material-ui/core\";\nimport  '../BalanceStatistic/style.css';\nfunction createData(name, agent, balance, time) {\n  return { name, agent, balance, time };\n}\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'id', numeric: false, disablePadding: true, label: 'Id' },\n  { id: 'name', numeric: true, disablePadding: false, label: 'Username' },\n  { id: 'agent', numeric: true, disablePadding: false, label: 'Agent' },\n  { id: 'balance', numeric: true, disablePadding: false, label: 'Amount' },\n  { id: 'data', numeric: true, disablePadding: false, label: 'Data & Time' },\n  \n  \n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all name' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n\n  const refresh=()=>{\n    props.addBalThunk();\n\n  }\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Balance\n        </Typography>\n      )}\n\n<Button variant=\"contained\" style={{backgroundColor:'#f7941d', color:'#fff'}} onClick={refresh}>Refresh</Button>\n\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n   \n    borderRadius:'0'\n    \n  },\n  \n  table: {\n    minWidth: 100,\n   \n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function BalanceStatistic(props) {\n\n\n    useEffect(() => {\n        props.addBalThunk();\n       \n\n    }, []);\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = props.allbal.map((n) => n.id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.allbal.length - page * rowsPerPage);\n\n  return (\n      \n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar addBalThunk={props.addBalThunk} numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={props.allbal.length}\n            />\n            <TableBody>\n              {stableSort(props.allbal, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.id);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell> \n                      \n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.id}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.name}</TableCell>\n                      <TableCell align=\"right\">{row.agent}</TableCell>\n                      <TableCell align=\"right\">{row.balance < 0 ? <div style={{color:'red', fontSize:'15px',fontWeight:'bold'}}>{row.balance}</div>:\n                      <div style={{color:'green', fontSize:'15px',fontWeight:'bold'}}>{row.balance}</div>}</TableCell>\n                      <TableCell align=\"right\">{row.data}</TableCell>\n                      \n                      \n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[50, 100, 500]}\n          component=\"div\"\n          count={props.allbal.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Login\\Login.jsx",["470","471","472","473","474","475","476","477","478","479","480"],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { myInputs } from \"./../../forinput/newinput\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport almaz from \"../../img/cropped-58b3096bc5b5915a7b5ccd22.png\";\r\nimport ac from \"../../img/main-bg.png\";\r\n// function Copyright() {\r\n//     return (\r\n//         <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n//             {'Copyright © '}\r\n//             <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n//                 Your Website\r\n//             </Link>{' '}\r\n//             {new Date().getFullYear()}\r\n//             {'.'}\r\n//         </Typography>\r\n//     );\r\n// }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n\r\n    background: `url(${ac})`,\r\n    backgroundColor: \"black\",\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"repeat-y\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundAttachment: 'fixed',\r\n\r\n\r\n\r\n    padding: \"15px\",\r\n    border: \"1px solid #FEF4B0!important\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"green\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {},\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderRadius: \"0px\",\r\n      },\r\n      \"&.MuiInputBase-root\": {\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: \"0px\",\r\n      },\r\n\r\n      \"&:hover fieldset\": {},\r\n      \"&.Mui-focused fieldset\": {},\r\n    },\r\n  },\r\n})(Field);\r\n\r\nconst BootstrapButton = withStyles({\r\n  root: {\r\n    boxShadow: \"none\",\r\n    textTransform: \"none\",\r\n    fontSize: 21,\r\n    padding: \"10px 12px\",\r\n    border: \"1px solid\",\r\n    borderRadius: \"50px\",\r\n    lineHeight: 1.5,\r\n    backgroundColor: \"green\",\r\n    borderColor: \"green\",\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#333\",\r\n      borderColor: \"#333\",\r\n      boxShadow: \"none\",\r\n    },\r\n    \"&:active\": {\r\n      boxShadow: \"none\",\r\n      backgroundColor: \"#333\",\r\n      borderColor: \"#333\",\r\n    },\r\n    \"&:focus\": {\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.5)\",\r\n    },\r\n  },\r\n})(Button);\r\n\r\nlet Login = (props) => {\r\n  useEffect(() => {\r\n    props.authPlayersThunk();\r\n  }, []);\r\n\r\n  // const [countpass, setPass] = useState('');\r\n  // const [countlog, setLog] = useState('');\r\n\r\n  // useEffect(() => {\r\n\r\n  //     props.addPlayerTokenThunk('demo0000','12345');\r\n\r\n  // }, []);\r\n\r\n  // let handleSubmit = (event) =>{\r\n\r\n  // props.addPlayerTokenThunk(countlog,countpass);\r\n\r\n  // }\r\n\r\n  // let handleChangeLog=(event) =>{\r\n  //     setLog( event.target.value);\r\n  //   }\r\n\r\n  //   let handleChangePass=(event) =>{\r\n  //     setPass(event.target.value);\r\n  //   }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <div className={classes.paper}>\r\n        {props.token.Token === \"\" ? (\r\n          <form\r\n            className={classes.form}\r\n            noValidate\r\n            onSubmit={props.handleSubmit}\r\n          >\r\n            <CssTextField\r\n              component={myInputs}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              placeholder=\"Username\"\r\n              name={\"email\"}\r\n              autoComplete=\"login\"\r\n              autoFocus\r\n            />\r\n            <CssTextField\r\n              component={myInputs}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name={\"password\"}\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            {/* <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    /> */}\r\n            <BootstrapButton\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              GO\r\n            </BootstrapButton>\r\n            {/* <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid> */}\r\n          </form>\r\n        ) : (\r\n          <div style={{ color: \"#fff\", fontSize: \"30px\", textAlign: \"center\" }}>\r\n            GREAT PLAYER\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <Box mt={8}>\r\n        {props.token.Password === \"Password Error\" ? (\r\n          <h3 style={{ textAlign: \"center\", color: \"red\" }}>\r\n            {props.token.Password}\r\n          </h3>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {props.token.Login === \"Login Error\" ? (\r\n          <h3 style={{ textAlign: \"center\", color: \"red\" }}>\r\n            {props.token.Login}\r\n          </h3>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {/*<Copyright />*/}\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n  dispatch(reset(\"loginadmin\"));\r\n};\r\n\r\nlet LoginAdminEnter = reduxForm({\r\n  form: \"loginadmin\",\r\n  onSubmitSuccess: afterSubmit,\r\n})(Login);\r\n\r\nconst LoginAdmin = (props) => {\r\n  const onSubmit = (values) => {\r\n    let args = [values.email, values.password];\r\n\r\n    props.addPlayerTokenThunk(args);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LoginAdminEnter\r\n        {...props}\r\n        addPlayerTokenThunk={props.addPlayerTokenThunk}\r\n        addPlayerSessionThunk={props.addPlayerSessionThunk}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default LoginAdmin;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\RedirectAfterGood.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\Pokerhome.jsx",[],["481","482"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\ConectedPlayers\\ConectedPlayersContainer.jsx",["483"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport ConectedPlayers from \"./ConectedPlayers\";\r\nimport {conectedPlayersThunk} from \"../../Reducer/conectedplayers-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    con:state.Conected.Allconected\r\n})\r\n\r\nlet ConectedPlayersContainer = compose(connect(mapStateToProps, {conectedPlayersThunk}))(ConectedPlayers);\r\nexport default ConectedPlayersContainer;\r\n",["484","485"],"F:\\PROJECTTEXASROOM\\po\\src\\forinput\\newinput.js",["486","487","488","489","490","491"],"import {Button, FormControl, InputLabel, MenuItem, NativeSelect, Select, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const myInputs=({input, meta,...props})=>{\r\n\r\n   return (\r\n\r\n       <TextField\r\n       \r\n           name=\"GameID\"\r\n           id=\"outlined-size-small\"\r\n           {...input}\r\n           {...props}\r\n           variant=\"outlined\"\r\n           size=\"medium\"\r\n       />\r\n\r\n\r\n   )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const myInputsField=({input, meta,...props})=>{\r\n\r\n    return (\r\n \r\n        <Field\r\n        \r\n            name=\"GameID\"\r\n            id=\"outlined-size-small\"\r\n            {...input}\r\n            {...props}\r\n            variant=\"outlined\"\r\n            size=\"medium\"\r\n        />\r\n \r\n \r\n    )\r\n \r\n }\r\n\r\n\r\n\r\n\r\nexport const mySelected=({input, meta,...props})=>{\r\n\r\n   return(\r\n\r\n\r\n       <select>\r\n           <option value=\"uno\" selected=\"selected\">{props.game}</option>\r\n           <option value=\"Limit Hold'em\">Limit Hold'em</option>\r\n           <option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>\r\n           <option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>\r\n           <option value=\"Cap Limit Hold'em\">Cap Limit Hold'em</option>\r\n           <option value=\"Limit Omaha\">Limit Omaha</option>\r\n           <option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>\r\n           <option value=\"No Limit Omaha\">No Limit Omaha</option>\r\n           <option value=\"Cap Limit Omaha\">Cap Limit Omaha</option>\r\n           <option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>\r\n           <option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>\r\n           <option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>\r\n           <option value=\"Cap Limit Omaha Hi-Lo\">Cap Limit Omaha Hi-Lo</option>\r\n           <option value=\"Limit Omaha-5\">Limit Omaha-5</option>\r\n           <option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>\r\n           <option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>\r\n           <option value=\"Cap Limit Omaha-5\">Cap Limit Omaha-5</option>\r\n           <option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>\r\n           <option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>\r\n           <option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>\r\n           <option value=\"Cap Limit Omaha-5 Hi-Lo\">Cap Limit Omaha-5 Hi-Lo</option>\r\n           <option value=\"Limit Razz\">Limit Razz</option>\r\n           <option value=\"Limit Stud\">Limit Stud</option>\r\n           <option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>\r\n           <option value=\"Mixed\">Mixed</option>\r\n       </select>\r\n\r\n\r\n\r\n   )\r\n}\r\n\r\n\r\n\r\n\r\nexport const mySelectedPlayers=({input, meta,...props})=>{\r\n\r\n\r\n    return(\r\n \r\n \r\n        <select>\r\n            <option value=\"uno\" selected=\"selected\">{props.game}</option>\r\n            <option value=\"Limit Hold'em\">Limit Hold'em</option>\r\n            <option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>\r\n            <option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>\r\n            <option value=\"Cap Limit Hold'em\">Cap Limit Hold'em</option>\r\n            <option value=\"Limit Omaha\">Limit Omaha</option>\r\n            <option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>\r\n            <option value=\"No Limit Omaha\">No Limit Omaha</option>\r\n            <option value=\"Cap Limit Omaha\">Cap Limit Omaha</option>\r\n            <option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>\r\n            <option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>\r\n            <option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>\r\n            <option value=\"Cap Limit Omaha Hi-Lo\">Cap Limit Omaha Hi-Lo</option>\r\n            <option value=\"Limit Omaha-5\">Limit Omaha-5</option>\r\n            <option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>\r\n            <option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>\r\n            <option value=\"Cap Limit Omaha-5\">Cap Limit Omaha-5</option>\r\n            <option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>\r\n            <option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>\r\n            <option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>\r\n            <option value=\"Cap Limit Omaha-5 Hi-Lo\">Cap Limit Omaha-5 Hi-Lo</option>\r\n            <option value=\"Limit Razz\">Limit Razz</option>\r\n            <option value=\"Limit Stud\">Limit Stud</option>\r\n            <option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>\r\n            <option value=\"Mixed\">Mixed</option>\r\n        </select>\r\n \r\n \r\n \r\n    )\r\n }","F:\\PROJECTTEXASROOM\\po\\src\\Components\\ConectedPlayers\\ConectedPlayers.jsx",["492","493"],"import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\nfunction createData(Player, SessionID, Login, Status, Lang) {\r\n    return { Player, SessionID, Login, Status, Lang };\r\n}\r\n\r\n// const rows = [\r\n//     createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//     createData('Donut', 452, 25.0, 51, 4.9),\r\n//     createData('Eclair', 262, 16.0, 24, 6.0),\r\n//     createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//     createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//     createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n//     createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n//     createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n//     createData('KitKat', 518, 26.0, 65, 7.0),\r\n//     createData('Lollipop', 392, 0.2, 98, 0.0),\r\n//     createData('Marshmallow', 318, 0, 81, 2.0),\r\n//     createData('Nougat', 360, 19.0, 9, 37.0),\r\n//     createData('Oreo', 437, 18.0, 63, 4.0),\r\n// ];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'Player', numeric: false, disablePadding: true, label: 'Player' },\r\n    { id: 'SessionID', numeric: true, disablePadding: false, label: 'SessionID' },\r\n    { id: 'Login', numeric: true, disablePadding: false, label: 'Login' },\r\n\r\n    { id: 'Status', numeric: true, disablePadding: false, label: 'Status' },\r\n    { id: 'Lang', numeric: true, disablePadding: false, label: 'Lang' },\r\n    { id: 'PC', numeric: true, disablePadding: false, label: 'PC' },\r\n    { id: 'IP', numeric: true, disablePadding: false, label: 'IP' },\r\n    // { id: 'Proxy', numeric: true, disablePadding: false, label: 'Proxy' },\r\n    { id: 'Connect', numeric: true, disablePadding: false, label: 'Connect' },\r\n    { id: 'LastAction', numeric: true, disablePadding: false, label: 'LastAction' },\r\n    { id: 'PacketsIn', numeric: true, disablePadding: false, label: 'PacketsIn' },\r\n    { id: 'PacketsOut', numeric: true, disablePadding: false, label: 'PacketsOut' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Connections\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"filter list\">\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function ConectedPlayers(props) {\r\n\r\n\r\n    useEffect(() => {\r\n        props.conectedPlayersThunk();\r\n\r\n    }, []);\r\n\r\n    const generateArray=()=> {\r\n\r\n        let mass = [];\r\n        for (let i = 0; i < props.con.SessionID.length; i++) {\r\n            mass[i] = {\r\n                Player: props.con.Player[i],\r\n                SessionID: props.con.SessionID[i],\r\n                Status: props.con.Status[i],\r\n                Lang: props.con.Lang[i],\r\n                PC: props.con.PC[i],\r\n                IP: props.con.IP[i],\r\n                Proxy: props.con.Proxy[i],\r\n                Connect: props.con.Connect[i],\r\n                Login: props.con.Login[i],\r\n                LastAction: props.con.LastAction[i],\r\n                PacketsIn: props.con.PacketsIn[i],\r\n                PacketsOut: props.con.PacketsOut[i],\r\n            }\r\n        }\r\n        return mass;\r\n    }\r\n\r\n\r\n\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = generateArray().map((n) => n.SessionID);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, generateArray().length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={generateArray().length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(generateArray(), getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.SessionID);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.SessionID)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.SessionID}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.Player===''?<div style={{color:'red'}}>not authorized</div>:row.Player}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">{row.SessionID}</TableCell>\r\n                                            <TableCell align=\"right\">{row.Login}</TableCell>\r\n\r\n                                            <TableCell align=\"right\">{row.Status}</TableCell>\r\n                                            <TableCell align=\"right\">{row.Lang}</TableCell>\r\n                                            <TableCell align=\"right\">{row.PC}</TableCell>\r\n                                            <TableCell align=\"right\">{row.IP}</TableCell>\r\n                                            {/*<TableCell align=\"right\">{row.Proxy}</TableCell>*/}\r\n                                            <TableCell align=\"right\">{row.Connect}</TableCell>\r\n                                            <TableCell align=\"right\">{row.LastAction}</TableCell>\r\n                                            <TableCell align=\"right\">{row.PacketsIn}</TableCell>\r\n                                            <TableCell align=\"right\">{row.PacketsOut}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={12} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={generateArray().length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n",["494","495"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTableTurnaments\\SendMessageTableTurnaments.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceInc.jsx",["496"],"import React from \"react\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\nconst SendMessageTable = (props) => {\r\n\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n\r\n            <Field name={\"numberbalance\"} step=\"any\" min=\"0\" type=\"number\" component={\"input\"}/>\r\n            <div>\r\n\r\n\r\n                <button style={{\r\n                    background: 'red',\r\n                    padding: '5px 15px',\r\n                    color: '#fff',\r\n                    border: 'solid red 1px',\r\n                    borderRadius: '5px'\r\n                }}>Send\r\n                </button>\r\n            </div>\r\n\r\n            {props.balance.Result}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('balanceforminc'));\r\n}\r\n\r\n\r\nlet BalanceForm = reduxForm({form: 'balanceforminc', onSubmitSuccess: afterSubmit})(SendMessageTable);\r\n\r\n\r\nconst BalanceAddOrClearInc = (props) => {\r\n    const onSubmit = (values) => {\r\n        \r\nfor(let o=0; o<props.getplayersobj.length; o++)\r\n{\r\n    props.authIncBalanceThunk(values.numberbalance,props.getplayersobj[o]);\r\n}\r\n\r\n\r\n    }\r\n    return <BalanceForm balance={props.balance} getplayersobj={props.getplayersobj} onSubmit={onSubmit}/>\r\n}\r\nexport default BalanceAddOrClearInc;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Slider\\Slider.jsx",["497","498","499","500"],"import React from \"react\";\r\nimport \"./styles.css\";\r\nimport slide1 from '../../img/Slider1.png'\r\nimport slide2 from '../../img/Slider2.png'\r\nimport slide3 from '../../img/Slider3.png'\r\nimport slide4 from '../../img/Slider4.png'\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nimport Slider from \"react-slick\";\r\n\r\nexport default function SSlider() {\r\n\r\n\r\n    let settings = {\r\n        dots: false,\r\n        infinite: true,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        autoplay: true,\r\n        variableWidth: true,\r\n        centerMode: true,\r\n        responsive: [\r\n            {\r\n                breakpoint: 768,\r\n                settings: {\r\n                    arrows: false,\r\n                    centerMode: true,\r\n                    centerPadding: '40px',\r\n                    slidesToShow: 1,\r\n                    variableWidth: false,\r\n                }\r\n            },\r\n            {\r\n                breakpoint: 480,\r\n                settings: {\r\n                    arrows: false,\r\n                    centerMode: true,\r\n                    centerPadding: '40px',\r\n                    slidesToShow: 1\r\n                }\r\n            }\r\n        ]\r\n\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <div style={{margin: '0 auto', height: '400px', width: '100%', overflow: 'hidden'}}>\r\n            <Slider {...settings}>\r\n                <div style={{width: 'auto'}}><img src={slide1}/></div>\r\n                <div style={{width: 'auto'}}><img src={slide2}/></div>\r\n                <div style={{width: 'auto'}}><img src={slide3}/></div>\r\n                <div style={{width: 'auto'}}><img src={slide4}/></div>\r\n\r\n\r\n            </Slider>\r\n        </div>\r\n    );\r\n}\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewRingGame\\NewRingGameConteiner.jsx",["501"],"import React from \"react\";\r\nimport {addTableThunk, mixedRingGamesThunk} from \"../../Reducer/addtable-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport AddTable from \"./NewRingGame\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\nadtablenew:state.Addtablereducer,\r\ntoken: state.Token\r\n\r\n})\r\n\r\nlet NewRingGameConteiner = compose(connect(mapStateToProps, {mixedRingGamesThunk,addTableThunk}),AuthRedirectNoneToken)(AddTable);\r\nexport default NewRingGameConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Tournaments\\TournamentsContainer.jsx",["502"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {authTournamentsThunk, getTournamentsObj} from \"../../Reducer/gettournamentsgame-reducer\";\r\nimport Tournaments from \"./Tournaments\";\r\nimport {deleteTournamentsThunk} from \"../../Reducer/deltournaments-reducer\";\r\nimport {offlinetournamentsThunk} from \"../../Reducer/offlinetournaments-reducer\";\r\nimport {onlineTournamentsThunk} from \"../../Reducer/onlinetournaments-reducer\";\r\nimport {addMessageForTableTurnamentsName} from \"../../Reducer/messagetableturnaments-reducer\";\r\nimport {eddTournThunk, getTournamentsOneThunk} from \"../../Reducer/edittournament-reducer\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    getgamestourn: state.Gettournaments.AllRingGamesTournaments,\r\n    resultgetgames: state.Gettournaments.Result,\r\n    gettsobject: state.Gettournaments.TournObj,\r\n    token: state.Token\r\n\r\n\r\n})\r\n\r\nlet TournamentsConteiner = compose(connect(mapStateToProps, {\r\n    getTournamentsOneThunk,\r\n    getTournamentsObj,\r\n    deleteTournamentsThunk,\r\n    authTournamentsThunk,\r\n    offlinetournamentsThunk,\r\n    addMessageForTableTurnamentsName,\r\n    onlineTournamentsThunk,\r\n    eddTournThunk\r\n}),AuthRedirectNoneToken)(Tournaments);\r\nexport default TournamentsConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Edittournament\\EdittournamentContainer.jsx",["503"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport EditTournaments from \"./Edittournament\";\r\nimport {editTForGamesResultNull, editTournamentsThunk} from \"../../Reducer/edittournament-reducer\";\r\nimport RedirectAfterGoodTournaments from \"../../Hoc/RedirectAfterGoodTournaments\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n    EditMessag: state.EditTournaments,\r\n    getgames: state.Gettournaments.AllRingGamesTournaments,\r\n})\r\n\r\nlet EdittournamentConteiner = compose(connect(mapStateToProps, {\r\n    editTournamentsThunk,\r\n    editTForGamesResultNull\r\n}), RedirectAfterGoodTournaments)(EditTournaments);\r\nexport default EdittournamentConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Players\\Players.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewRingGame\\NewRingGame.jsx",["504","505","506"],"import React from \"react\";\r\nimport style from './NewRingGame.module.css';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {myInputs, mySelected} from \"../../forinput/newinput\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport styled, {keyframes} from \"styled-components\";\r\nimport {zoomIn} from \"react-animations\";\r\n\r\nimport {mixedRingGamesThunk} from \"../../Reducer/addtable-reducer\";\r\nconst Bounce = styled.div`animation: 0.5s ${keyframes`${zoomIn}`} ease-out`;\r\n\r\nconst FormAddTable = (props) => {\r\n\r\n\r\n    let adValueFromSel = (value) => {\r\n        if (value === 'Mixed') {\r\n            props.mixedRingGamesThunk(value);\r\n        }\r\n        props.mixedRingGamesThunk(value);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <form onSubmit={props.handleSubmit}>\r\n                <table className={style.table}>\r\n\r\n                    <tbody>\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>Add new table</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Name:</td>\r\n                        <td><Field type=\"text\" name={\"GameID\"} component={\"input\"}\r\n                                   title=\"Specify a unique table name, up to 40 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Description:</td>\r\n                        <td><Field  type=\"text\" component={\"input\"} name={\"Description\"}\r\n                                   title=\"This is an optional description, up to 500 characters. It is displayed at the top of the table's information window and may include HTML tags, including links. See help file for details.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Auto online:</td>\r\n                        <td><Field name={\"AutoStart\"} component={\"select\"} required\r\n                                   title=\"When this option is set to Yes, the ring game will be put online when the game server is started. Otherwise tables must be manually put online with the Action button.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Game:</td>\r\n                        <td><Field name={\"GameType\"} component={\"select\"} required\r\n                                   onChange={(event) => adValueFromSel(event.target.value)}\r\n                                   title=\"Select a Hold'em, Omaha, Omaha-5, Razz, 7-Card Stud, or Mixed game. When Mixed is selected, fill in the Mixed field also. Only Limit games are available in the Trial Version.\">\r\n                            <option selected>Choose a game</option>\r\n                            <option value=\"Limit Hold'em\">Limit Hold'em</option>\r\n                            <option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>\r\n                            <option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>\r\n                            <option value=\"Cap Limit Hold'em\">Cap Limit Hold'em</option>\r\n                            <option value=\"Limit Omaha\">Limit Omaha</option>\r\n                            <option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>\r\n                            <option value=\"No Limit Omaha\">No Limit Omaha</option>\r\n                            <option value=\"Cap Limit Omaha\">Cap Limit Omaha</option>\r\n                            <option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Cap Limit Omaha Hi-Lo\">Cap Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Limit Omaha-5\">Limit Omaha-5</option>\r\n                            <option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>\r\n                            <option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>\r\n                            <option value=\"Cap Limit Omaha-5\">Cap Limit Omaha-5</option>\r\n                            <option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Cap Limit Omaha-5 Hi-Lo\">Cap Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Limit Razz\">Limit Razz</option>\r\n                            <option value=\"Limit Stud\">Limit Stud</option>\r\n                            <option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>\r\n                            <option value=\"Mixed\">Mixed</option>\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n\r\n\r\n\r\n                    {props.mixed === 'Mixed' ? <tr>\r\n                        <td>Mixed:</td>\r\n                        {/*<td>Limit Razz: <Field className=\"stretch\" type=\"checkbox\" name={\"MixedList1\"} value=\"\" component={'input'}*/}\r\n                        {/*           title=\"Select a list of games when Game type is set to Mixed, otherwise leave blank. Each game is played for a full level and the list loops indefinitely.\"/>*/}\r\n\r\n\r\n                        <td>\r\n\r\n                            <Bounce><Field type=\"checkbox\" component={'input'} name={\"on1\"} />Limit\r\n                                Hold'em<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on2\"} />Pot Limit\r\n                                Hold'em <br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on3\"}/>No Limit\r\n                                Hold'em<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on4\"}/>Limit Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on5\"}/>Pot Limit\r\n                                Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on6\"}/>No Limit\r\n                                Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on7\"}/>Limit Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on8\"}/>Pot Limit\r\n                                Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on9\"}/>No Limit Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on10\"}/>Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on11\"}/>Pot Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on12\"}/>No Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on13\"}/>Limit Omaha-5\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on14\"}/>Pot Limit\r\n                                Omaha-5 Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on15\"}/>No Limit\r\n                                Omaha-5\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on16\"}/>Limit Razz<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on17\"}/>Limit Stud<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on18\"}/>Limit Stud Hi-Lo<br></br></Bounce>\r\n\r\n\r\n                        </td>\r\n                    </tr> : ''}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/*<tr>*/}\r\n                    {/*    <td>Mixed:</td>*/}\r\n                    {/*    <td><Field type=\"text\" name={\"MixedList\"} component={\"input\"}*/}\r\n                    {/*               title=\"Select a list of games when Game type is set to Mixed, otherwise leave blank. Each game is played for the duration set by &quot;Mixed hands&quot; and the list loops indefinitely.\"/>*/}\r\n                    {/*    </td>*/}\r\n                    {/*</tr>*/}\r\n                    <tr>\r\n                        <td>Mixed hands:</td>\r\n                        <td><Field type=\"text\" name={\"MixedHands\"} component={\"input\"} placeholder=\"0\"\r\n                                   title=\"Number of hands per game when Game type is set to Mixed, 1 to 1000. Or set to 0 to use the seat count.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field type=\"text\" name={\"Password\"} value=\"\" component={\"input\"}\r\n                                   title=\"Specify a password needed to take a seat at the table or leave this field blank for an open table. You can also use the play permission to restrict play to specific players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Private:</td>\r\n                        <td><Field name={\"Private\"} component={\"select\"} required\r\n                                   title=\"If a password is set for the table, select Yes to make it completely private or select No to allow observers to watch. You can also use the observe permission to restrict observers.\">\r\n                            <option value=\"No\">No</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Play permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermPlay\"} value=\"\" component={\"input\"}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict play to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observe permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermObserve\"} value=\"\" component={\"input\"}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict observing to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the private setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player chat permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermPlayerChat\"} value=\"\" component={\"input\"}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to players who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all seated players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observer chat permission:</td>\r\n                        <td><Field type=\"text\" name={\"PermObserverChat\"} value=\"\" component={\"input\"}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to observers who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all observers.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Suspend chat all-in:</td>\r\n                        <td><select name={\"SuspendChatAllIn\"} component={\"select\"} required\r\n                                    title=\"Select Yes to suspend the table chat when any player has an all-in bet.\">\r\n                            <option value=\"No\">No</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n\r\n                        </select></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Seats:</td>\r\n                        <td><Field type=\"text\" name={\"Seats\"} placeholder=\"9\" component={\"input\"}\r\n                                   title=\"Select the number of seats available at this table, from 2 to 10 (8 max for Stud or Razz).\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {/*<tr>*/}\r\n                    {/*    <td>Start minimum:</td>*/}\r\n                    {/*    <td><Field type=\"text\" name={\"StartMin\"} value=\"2\" component={\"input\"}*/}\r\n                    {/*               title=\"Select the minimum number of ready players needed to start a new session.\"/>*/}\r\n                    {/*    </td>*/}\r\n                    {/*</tr>*/}\r\n                    {/*<tr>*/}\r\n                    {/*    <td>Start code:</td>*/}\r\n                    {/*    <td><Field type=\"text\" name={\"StartCode\"} value=\"0\" component={\"input\"}*/}\r\n                    {/*               title=\"This is a code (1 to 999999) that can be entered in the Lobby window (Options menu) to start a game that has not met the Start Minimum requirement. Enter 0 to disable this feature.\"/>*/}\r\n                    {/*    </td>*/}\r\n                    {/*</tr>*/}\r\n                    <tr>\r\n                        <td>Primary currency:</td>\r\n                        <td><Field name={\"PrimaryCurrency\"} component={\"select\"} required\r\n                                   title=\"Select Yes for primary (Balance) or No for secondary (Balance2) funding of the buy-ins. Secondary currency is only supported in the Gold edition.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Smallest chip:</td>\r\n                        <td><Field name={\"SmallestChip\"} component={\"select\"} required\r\n                                   title=\"Select the denomination of the smallest chip allowed at this table. Buy-in, rake, blinds, and player bets must all be a multiple of this value.\">\r\n\r\n                            <option value=\"0.01\" selected=\"\">0.01</option>\r\n                            <option value=\"0.05\">0.05</option>\r\n                            <option value=\"0.25\">0.25</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"500\">500</option>\r\n                            <option value=\"1000\">1000</option>\r\n                            <option value=\"5000\">5000</option>\r\n                            <option value=\"25000\">25000</option>\r\n                            <option value=\"100000\">100000</option>\r\n                            <option value=\"500000\">500000</option>\r\n                            <option value=\"1000000\">1000000</option>\r\n                            <option value=\"5000000\">5000000</option>\r\n                            <option value=\"25000000\">25000000</option>\r\n                            <option value=\"100000000\">100000000</option>\r\n                            <option value=\"500000000\">500000000</option>\r\n                            <option value=\"1000000000\">1000000000</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Minimum buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInMin\"} component={\"input\"} placeholder=\"400\"\r\n                                   title=\"Select the minimum buy-in for this table. The default value is 400.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInMax\"} placeholder=\"2000\" component={\"input\"}\r\n                                   title=\"Select the maximum buy-in for this table. The default value is 2000.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Default buy-in:</td>\r\n                        <td><Field type=\"text\" name={\"BuyInDef\"} value=\"1200\" component={\"input\"} placeholder=\"1200\"\r\n                                   title=\"Select the default buy-in for this table. The default value is 1200.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Cap limit:</td>\r\n                        <td><Field type=\"text\" name={\"CapLimit\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"Cap limit for CL games, typically set at 20 to 40 times the big blind. This setting is not used in Limit/NL/PL games.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rake percent:</td>\r\n                        <td><Field type=\"text\" name={\"RakePercent\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"Enter the percentage of chips from each pot that will be raked into the house rake account. This is a Pro/Gold version feature. Set to 0 for the Trial/Lite version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rake cap:</td>\r\n                        <td><Field type=\"text\" name={\"RakeCap\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"Enter the maximum number of chips that can be raked in a single hand. Set to 0 for no cap limit. This is a Pro/Gold version feature. Set to 0 for the Trial/Lite version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn clock:</td>\r\n                        <td><Field type=\"text\" name={\"TurnClock\"} value=\"30\" component={\"input\"} placeholder=\"30\"\r\n                                   title=\"This is the number of seconds (10 to 120) that the player has to act on each turn. The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn warning:</td>\r\n                        <td><Field type=\"text\" name={\"TurnWarning\"} value=\"10\" component={\"input\"} placeholder=\"10\"\r\n                                   title=\"This is number of seconds remaining (5 to 119) on the turn clock when a warning is sent to the player and (if sync enabled) their time bank button appears. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank:</td>\r\n                        <td><Field type=\"text\" name=\"BankClock\" value=\"60\" component={\"input\"} placeholder=\"60\"\r\n                                   title=\"This is a reserve of time (0 to 600 seconds) available to each player on request and via disconnect detection. The default value is 60.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n\r\n                    <tr>\r\n                        <td>Time bank sync:</td>\r\n                        <td><Field name={\"BankSync\"} component={\"select\"} required\r\n                                   title=\"Select Yes (the default) to show the time bank button with the turn warning. Select No to show the time bank button immediately.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank reset:</td>\r\n                        <td><Field type=\"text\" name={\"BankReset\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"This is the number of hands that must be played before a player's time bank is automatically refilled. Use 0 to disable the reset feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Disconnect protection:</td>\r\n                        <td><Field name={\"DisProtect\"} component={\"select\"} required\r\n                                   title=\"Select Yes to automatically activate a player's time bank if they disconnect during their turn and run out of normal time.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Small blind:</td>\r\n                        <td><Field type=\"text\" name={\"SmallBlind\"} value=\"10\" component={\"input\"} placeholder=\"10\"\r\n                                   title=\"This is the Small Blind setting. It is only used in Pot Limit and No Limit games. The default value is 10. In Limit games, the Small Blind is half the Small Bet setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Big blind:</td>\r\n                        <td><Field type=\"text\" name={\"BigBlind\"} value=\"20\" component={\"input\"} placeholder=\"20\"\r\n                                   title=\"This is the Big Blind setting. It is only used in Pot Limit and No Limit games. The default value is 20. In Limit games, the Big Blind is equal to the Small Bet setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>Allow straddle:</td>\r\n                        <td><Field name={\"AllowStraddle\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to give the Under-The-Gun player the option to post a straddle bet (twice the big blind) before the cards are dealt in Hold'em and Omaha games. The default value is &quot;No&quot;.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Small bet:</td>\r\n                        <td><Field type=\"text\" name={\"SmallBet\"} value=\"20\" component={\"input\"} placeholder=\"20\"\r\n                                   title=\"This is the Small Bet setting. It is only used in Limit games and also determines the blinds in Limit games that use blinds.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Big bet:</td>\r\n                        <td><Field type=\"text\" name={\"BigBet\"} value=\"40\" component={\"input\"} placeholder=\"40\"\r\n                                   title=\"This is the Big Bet setting. It is only used in Limit games.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ante:</td>\r\n                        <td><Field type=\"text\" name={\"Ante\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"This is the ante. Normally not used in Hold'em and Omaha unless &quot;Ante all&quot; is also enabled.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ante all:</td>\r\n                        <td><Field name={\"AnteAll\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to collect an ante for all games. Set to No (the default) to only collect an ante in Razz and Stud games.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bring-in:</td>\r\n                        <td><Field type=\"text\" name={\"BringIn\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"This is the bring-in. It is only used in Stud and Razz games and is typically no more than half the Small Bet value.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Allow duplicate IPs:</td>\r\n                        <td><Field name={\"AllowDupeIPs\"} component={\"select\"} required\r\n                                   title=\"When this option is set to No, a player cannot join the table if they have the same IP address as another player already seated at the table. Localhost IPs 127.0.0.1 and 0:0:0:0:0:0:0:1 are exempted.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rathole minutes:</td>\r\n                        <td><Field type=\"text\" name={\"RatholeMinutes\"} value=\"0\" component={\"input\"} placeholder=\"0\"\r\n                                   title=\"When a player leaves the table, this is the minimum number of minutes (0 to 999999) they must wait if they want to return with a smaller stack. The default value is 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Sitout minutes:</td>\r\n                        <td><Field type=\"text\" name={\"SitoutMinutes\"} value=\"10\" component={\"input\"} placeholder=\"10\"\r\n                                   title=\"This is the maximum number of consecutive minutes (1 to 120) that a player can sit out before being automatically removed from the table. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Sitout relaxed:</td>\r\n                        <td><Field name={\"SitoutRelaxed\"} component={\"select\"} required\r\n                                   title=\"Set to Yes to keep sitout-expired players at the table if the waiting list is empty.\">\r\n\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Table graphic:</td>\r\n                        <td><Field type=\"text\" name={\"TableGraphic\"} component={\"input\"}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the table graphic. Leave this value blank to use the default system graphic.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field type=\"text\" name={\"Note\"} value=\"\" component={\"input\"}\r\n                                   title=\"This is an optional note field, not seen by the players. 500 characters maximum.\"/>\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            {/*<Field type=\"button\" value=\"Ok\" onClick=\"send('RGSaveAdd')\" component={\"button\"}/> */}\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n\r\n\r\n                            &nbsp;\r\n                            {/*<NavLink to=\"/ringgames\">*/}\r\n                            {/*    <span>Cancel</span>*/}\r\n                            {/*</NavLink>*/}\r\n\r\n                            <NavLink to=\"/ringgames\"> <Button variant=\"contained\" color=\"primary\">\r\n                                Return\r\n                            </Button></NavLink>\r\n                            {props.adtablenew.Error !== '' ? <h3 style={{color: 'red'}}>{props.adtablenew.Error === '' ?\r\n                                <CircularProgress/> : props.adtablenew.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.adtablenew.Result}</h3>}\r\n                            {/*<Field type=\"button\" value=\"Cancel\" onClick=\"send('RGCancel')\" component={\"button\"}/>*/}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) => {dispatch(reset('addtable'));}\r\n\r\n\r\nlet ContactForm = reduxForm({form: 'addtable', onSubmitSuccess: afterSubmit,})(FormAddTable);\r\n\r\nconst AddTable = (props) => {\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n            values.GameID,\r\n            values.Description === undefined ? '' : values.Description,\r\n            values.AutoStart,\r\n            values.GameType,\r\n            values.MixedList,\r\n            values.MixedHands === undefined ? 0 : values.MixedHands,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Private,\r\n            values.PermPlay === undefined ? '' : values.PermPlay,\r\n            values.PermObserve === undefined ? '' : values.PermObserve,\r\n            values.PermPlayerChat === undefined ? '' : values.PermPlayerChat,\r\n            values.PermObserverChat === undefined ? '' : values.PermObserverChat,\r\n            values.SuspendChatAllIn,\r\n            values.Seats === undefined ? 9 : values.Seats,\r\n            // values.StartMin,\r\n            // values.StartCode,\r\n            values.PrimaryCurrency,\r\n            values.SmallestChip === undefined ? 0.01 : values.SmallestChip,\r\n            values.BuyInMin === undefined ? 400 : values.BuyInMin,\r\n            values.BuyInMax === undefined ? 5000 : values.BuyInMax,\r\n            values.BuyInDef === undefined ? 1200 : values.BuyInDef,\r\n            values.CapLimit === undefined ? 20 : values.CapLimit,\r\n            values.RakePercent === undefined ? 0 : values.RakePercent,\r\n            values.RakeCap === undefined ? 0 : values.RakeCap,\r\n            values.TurnClock === undefined ? 30 : values.TurnClock,\r\n            values.TurnWarning === undefined ? 10 : values.TurnWarning,\r\n            values.BankClock === undefined ? 60 : values.BankClock,\r\n            values.BankSync,\r\n            values.BankReset === undefined ? 0 : values.BankReset,\r\n            values.DisProtect,\r\n            values.SmallBlind === undefined ? 10 : values.SmallBlind,\r\n            values.BigBlind === undefined ? 20 : values.BigBlind,\r\n            values.AllowStraddle,\r\n            values.SmallBet === undefined ? 20 : values.SmallBet,\r\n            values.BigBet === undefined ? 40 : values.BigBet,\r\n            values.Ante === undefined ? 0 : values.Ante,\r\n            values.AnteAll,\r\n            values.BringIn === undefined ? 0 : values.BringIn,\r\n            values.AllowDupeIPs,\r\n            values.RatholeMinutes === undefined ? 0 : values.RatholeMinutes,\r\n            values.SitoutMinutes === undefined ? 10 : values.SitoutMinutes,\r\n            values.SitoutRelaxed,\r\n            values.TableGraphic === undefined ? '' : values.TableGraphic,\r\n            values.Note === undefined ? '' : values.Note,\r\n            values.on1 === true ? \"Limit Hold'em,\" : '',\r\n            values.on2 === true ? \"Pot Limit Hold'em,\" : '',\r\n            values.on3 === true ?\"No Limit Hold'em,\" : '',\r\n            values.on4 === true ?\"Limit Omaha,\": '',\r\n            values.on5 === true ?\"Pot Limit Omaha,\": '',\r\n            values.on6 === true ?\"No Limit Omaha,\": '',\r\n            values.on7 === true ?\"Limit Omaha Hi-Lo,\": '',\r\n            values.on8 === true ?\"Pot Limit Omaha Hi-Lo,\": '',\r\n            values.on9 === true ?\"No Limit Omaha Hi-Lo,\": '',\r\n            values.on10 === true ?\"Limit Omaha-5,\": '',\r\n            values.on11 === true ?\"Pot Limit Omaha-5,\": '',\r\n            values.on12 === true ?\"No Limit Omaha-5,\": '',\r\n            values.on13 === true ?\"Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on14 === true ?\"Pot Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on15 === true ?\"No Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on16 === true ?\"Limit Razz,\": '',\r\n            values.on17 === true ?\"Limit Stud,\": '',\r\n            values.on18 === true ?\"Limit Stud Hi-Lo,\": '',\r\n        ];\r\n\r\n        props.addTableThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactForm mixed={props.adtablenew.MixedRing} adtablenew={props.adtablenew} mixedRingGamesThunk={props.mixedRingGamesThunk} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default AddTable;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Edittournament\\Edittournament.jsx",["507","508","509","510","511","512"],"import React from \"react\";\r\nimport style from './Edittournament.module.css';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {myInputs, mySelected} from \"../../forinput/newinput\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {keyframes} from 'styled-components';\r\nimport styled from 'styled-components'\r\nimport {zoomIn} from 'react-animations';\r\nimport {editTournamentsThunk} from \"../../Reducer/edittournament-reducer\";\r\n\r\n\r\nconst Bounce = styled.div`animation: 0.5s ${keyframes`${zoomIn}`} ease-out`;\r\n\r\n\r\nconst FormEditTournaments = (props) => {\r\n\r\n    let adValueFromSelect = (value) => {\r\n\r\n        if (value === 'Mixed') {\r\n            props.mixedThunk(value);\r\n        }\r\n        props.mixedThunk(value);\r\n\r\n    }\r\n\r\n\r\n    // let massiv = [\"Limit Hold'em\", \"Pot Limit Hold'em\", \"No Limit Hold'em\", \"Limit Omaha\", \"Pot Limit Omaha\", \"No Limit Omaha\", \"Limit Omaha-5\", \"Pot Limit Omaha-5\", \"No Limit Omaha-5\", \"Limit Omaha Hi-Lo\", \"Pot Limit Omaha Hi-Lo\", \"No Limit Omaha Hi-Lo\", \"Limit Omaha-5 Hi-Lo\", \"Pot Limit Omaha-5 Hi-Lo\", \"No Limit Omaha-5 Hi-Lo\", \"Limit Razz\", \"Limit Stud\", \"Limit Stud Hi-Lo\"];\r\n    // let g = props.EditMessag.Object.MixedList;\r\n    // let rse = () => {\r\n    //     let a = g.split(',');\r\n    //     for (let i = 0; i < a.length; i++) {\r\n    //         if (massiv.indexOf(a[i])) {\r\n    //             console.log(massiv.indexOf(a[i]))\r\n    //         }\r\n    //     }\r\n    //     return a;\r\n    // }\r\n    // rse();\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <form onSubmit={props.handleSubmit}>\r\n                <table className={style.table_edit_table}>\r\n\r\n                    <tbody>\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>Edit Tournament: {props.EditMessag.Object.Name}</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Name:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"GameID\"} component={'input'}\r\n                                   placeholder={props.EditMessag.Object.Name}\r\n                                   title=\"Specify a unique tournament name, up to 40 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Description:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Description\"} value=\"\" component={'input'}\r\n                                   placeholder={props.EditMessag.Object.Description}\r\n                                   title=\"This is an optional description, up to 500 characters. It is displayed at the top of the tournament's information window and may include HTML tags, including links. See help file for details.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Auto online:</td>\r\n                        <td><Field className=\"stretch\" name={\"AutoStart\"} component={\"select\"}\r\n                                   title=\"When this option is set to Yes, the tournament table will be put online when the game server is started. Otherwise tables must be manually put online with the Action button.\">\r\n                            <option value={props.EditMessag.Object.Auto}\r\n                                    disabled>{props.EditMessag.Object.Auto}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Game:</td>\r\n                        <td><Field className=\"stretch\" name={\"GameType\"} component={\"select\"}\r\n                                   onChange={(event) => adValueFromSelect(event.target.value)}\r\n\r\n                                   title=\"Select a Hold'em, Omaha, Omaha-5, Razz, 7-Card Stud, or Mixed game. When Mixed is selected, fill in the Mixed field also. Only Limit games are available in the Trial Version.\">\r\n                            <option value={props.EditMessag.Object.Game}>{props.EditMessag.Object.Game}</option>\r\n                            {/*<option value=\"No Limit Hold'em\">No Limit Hold'em</option>*/}\r\n                            {/*<option value=\"Limit Hold'em\">Limit Hold'em</option>*/}\r\n                            {/*<option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>*/}\r\n                            {/*<option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>*/}\r\n                            {/*<option value=\"Limit Omaha\">Limit Omaha</option>*/}\r\n                            {/*<option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>*/}\r\n                            {/*<option value=\"No Limit Omaha\">No Limit Omaha</option>*/}\r\n                            {/*<option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>*/}\r\n                            {/*<option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>*/}\r\n                            {/*<option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>*/}\r\n                            {/*<option value=\"Limit Omaha-5\">Limit Omaha-5</option>*/}\r\n                            {/*<option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>*/}\r\n                            {/*<option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>*/}\r\n                            {/*<option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>*/}\r\n                            {/*<option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>*/}\r\n                            {/*<option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>*/}\r\n                            {/*<option value=\"Limit Razz\">Limit Razz</option>*/}\r\n                            {/*<option value=\"Limit Stud\">Limit Stud</option>*/}\r\n                            {/*<option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>*/}\r\n                            {/*<option value=\"Mixed\">Mixed</option>*/}\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n                    {props.EditMessag.Object.Game === 'Mixed' ? <tr>\r\n                        <td>Mixed:</td>\r\n                        {/*<td>Limit Razz: <Field className=\"stretch\" type=\"checkbox\" name={\"MixedList1\"} value=\"\" component={'input'}*/}\r\n                        {/*           title=\"Select a list of games when Game type is set to Mixed, otherwise leave blank. Each game is played for a full level and the list loops indefinitely.\"/>*/}\r\n\r\n\r\n                        <td>\r\n\r\n                            <Bounce>\r\n                                {props.EditMessag.Object.MixedList}\r\n\r\n\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on1\"}  checked/>Limit*/}\r\n                                {/*Hold'em<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on2\"} />Pot Limit*/}\r\n                                {/*Hold'em <br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on3\"}/>No Limit*/}\r\n                                {/*Hold'em<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on4\"}/>Limit Omaha<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on5\"}/>Pot Limit*/}\r\n                                {/*Omaha<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on6\"}/>No Limit*/}\r\n                                {/*Omaha<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on7\"}/>Limit Omaha*/}\r\n                                {/*Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on8\"}/>Pot Limit*/}\r\n                                {/*Omaha*/}\r\n                                {/*Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on9\"}/>No Limit Omaha*/}\r\n                                {/*Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on10\"}/>Limit*/}\r\n                                {/*Omaha-5<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on11\"}/>Pot Limit*/}\r\n                                {/*Omaha-5<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on12\"}/>No Limit*/}\r\n                                {/*Omaha-5<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on13\"}/>Limit Omaha-5*/}\r\n                                {/*Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on14\"}/>Pot Limit*/}\r\n                                {/*Omaha-5 Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on15\"}/>No Limit*/}\r\n                                {/*Omaha-5*/}\r\n                                {/*Hi-Lo<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on16\"}/>Limit Razz<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on17\"}/>Limit Stud<br></br>*/}\r\n                                {/*<Field type=\"checkbox\" component={'input'} name={\"on18\"}/>Limit Stud Hi-Lo<br></br>*/}\r\n\r\n\r\n                            </Bounce>\r\n\r\n\r\n                        </td>\r\n                    </tr> : ''}\r\n\r\n                    <tr>\r\n                        <td>Shootout:</td>\r\n                        <td><Field className=\"stretch\" name={\"Shootout\"} component={\"select\"}  placeholder={props.EditMessag.Object.Shootout}\r\n                                   title=\"Select Yes for a shootout format where all tables play down to a single player before merging. Select No for a standard format with auto table balancing. Late registration and rebuys are not available for shootout tournaments.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Password\"} value=\"\" component={'input'} placeholder={props.EditMessag.Object.PW}\r\n                                   title=\"Specify a password needed to register for this tournament or leave this field blank for an open tournament. You can also use the register permission to restrict play to specific players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Private:</td>\r\n                        <td><Field className=\"stretch\" name={\"Private\"} component={\"select\"}\r\n                                   title=\"If a password is set for the tournament, select Yes to make it completely private or select No to allow observers to watch. You can also use the observe permission to restrict observers.\">\r\n                            <option >{props.EditMessag.Object.Private}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" >No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Register permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermRegister\"} value=\"\" component={'input'} placeholder={props.EditMessag.Object.PermRegister}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict registration to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Unregister permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermUnregister\"} value=\"\" component={'input'} placeholder={props.EditMessag.Object.PermUnregister}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict unregistration to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observe permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermObserve\"} value=\"\" component={'input'} placeholder={props.EditMessag.Object.PermObserve}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict observing to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the private setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player chat permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermPlayerChat\"} value=\"\" component={'input'} placeholder={props.EditMessag.Object.PermPlayerChat}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to players who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all seated players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observer chat permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermObserverChat\"} value=\"\" placeholder={props.EditMessag.Object.PermObserverChat}\r\n                                   component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to observers who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all observers.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Suspend chat all-in:</td>\r\n                        <td><Field className=\"stretch\" name={\"SuspendChatAllIn\"} component={\"select\"}\r\n                                   title=\"Select Yes to suspend the table chat when any player has an all-in bet.\">\r\n                            <option >{props.EditMessag.Object.SuspendChatAllIn}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Tables:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Tables\"} placeholder=\"1\" component={'input'} placeholder={props.EditMessag.Object.Tables}\r\n                                   title=\"Select the number of tables in the tournament, from 1 to 100 (Pro/Gold version only). Set to 1 for the Lite or Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Seats per table:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Seats\"} placeholder=\"9\" component={'input'} placeholder={props.EditMessag.Object.Seats}\r\n                                   title=\"Select the number of seats at each table, from 2 to 10.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start when full:</td>\r\n                        <td><Field className=\"stretch\" name={\"StartFull\"} component={\"select\"}\r\n                                   title=\"Select Yes and the tournament will automatically start when enough players register to fill all seats. When this setting is enabled (along with System tab -> Client Settings -> Sit and Go tab), the tournament will be listed under the &quot;Sit &amp; Go&quot; tab in the client.\">\r\n                            <option >{props.EditMessag.Object.StartFull}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start now:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartMin\"}  component={'input'} placeholder={props.EditMessag.Object.StartMin}\r\n                                   title=\"This is the minimum number of registered players that must check their &quot;Start Now&quot; box to start the tournament immediately. Select 0 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start code:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartCode\"}  placeholder={props.EditMessag.Object.StartCode}\r\n                                   component={'input'}\r\n                                   title=\"This is a code (1 to 999999) that can be entered in the Lobby window (Options menu) to start the tournament. Enter 0 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start time:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartTime\"}  placeholder={props.EditMessag.Object.StartTime}\r\n                                   component={'input'}\r\n                                   title=\"Enter a fixed time to auto-start the tournament in yyyy-mm-dd hh:mm format. Enter 0000-00-00 00:00 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Registration period:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RegMinutes\"}  placeholder={props.EditMessag.Object.RegMinutes}\r\n                                   component={'input'}\r\n                                   title=\"Set the number of minutes available for registration prior to the start time, up to 999999. A value of 0 represents an unlimited period. A value of -1 prevents registrations until the current tournament has completed.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Late registration:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LateRegMinutes\"} placeholder={props.EditMessag.Object.LateRegMinutes}\r\n                                   component={'input'}\r\n                                   title=\"Set the number of minutes available for late registration, 0 to 999999. Late registration will terminate early if payouts begin or the tournament fills up (max entrants = tables * seats per table).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Late penalty:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LatePenalty\"} placeholder={props.EditMessag.Object.LatePenalty}\r\n                                   component={'input'}\r\n                                   title=\"Set the number of chips to deduct from the starting stack of a late registration player. Use a negative number to represent a per-minute late penalty.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Minimum players:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MinPlayers\"} placeholder={props.EditMessag.Object.MinPlayers}\r\n                                   component={'input'}\r\n                                   title=\"This is the minimum number of players (2 to 1000) that must be registered to auto start the tournament at a set time. This feature is ignored when the Start Time setting is 0000-00-00 00:00.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Recur minutes:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RecurMinutes\"} placeholder={props.EditMessag.Object.RecurMinutes}\r\n                                   component={'input'}\r\n                                   title=\"Enter the number of minutes (0 to 999999) to add to the Start Time for an auto-recurring tournament. Reference: 1440 = 1 day, 10080 = 1 week.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Reset seconds:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ResetSeconds\"} placeholder={props.EditMessag.Object.ResetSeconds}\r\n                                   component={'input'}\r\n                                   title=\"Enter the number of seconds (10 to 999999, default 30) after the tournament completes before clearing the results and resetting for the next one.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum runs:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MaxRuns\"} placeholder={props.EditMessag.Object.MaxRuns} component={'input'}\r\n                                   title=\"Enter the maximum number of times this tournament can run before it is automatically taken offline. The count resets each time the tournament is put online. Enter 0 (the default) to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>No-shows minutes:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"NoShowMinutes\"} placeholder={props.EditMessag.Object.NoShowMinutes}\r\n                                   component={'input'}\r\n                                   title=\"Specify the number of minutes at which no-show players (never clicked their ready button) are removed from the tournament. Enter 0 to disable this feature. Buy-ins are refunded so best used only for freeroll tournaments.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Primary currency:</td>\r\n                        <td><Field className=\"stretch\" name={\"PrimaryCurrency\"} component={\"select\"}\r\n                                   title=\"Select Yes for primary (Balance) or No for secondary (Balance2) funding of the buy-ins, rebuys, and payouts. Secondary currency is only supported in the Gold edition.\">\r\n                            <option >{props.EditMessag.Object.PrimaryCurrency}</option>\r\n                            <option value=\"Yes\" >Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Buy-in:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BuyIn\"} placeholder={props.EditMessag.Object.BuyIn} component={'input'}\r\n                                   title=\"Select the buy-in for this tournament. The default value is 1500. The buy-in does not include the entry fee.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bounty:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Bounty\"} placeholder={props.EditMessag.Object.Bounty} component={'input'}\r\n                                   title=\"Select a portion of the buy-in to be set aside for each knockout bounty. This amount is deducted from the main prize pool and is awarded directly to a player each time they eliminate another player from the tournament.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Entry Fee:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"EntryFee\"} placeholder={props.EditMessag.Object.EntryFee}  component={'input'}\r\n                                   title=\"Select an entry fee for this tournament. This amount is added to the buy-in but is kept by the &quot;house&quot; and does not go into the prize pool. Pro/Gold feature. Must be 0 for Lite/Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Ticket\"} placeholder={props.EditMessag.Object.Ticket}  component={'input'}\r\n                                   title=\"Set an optional ticket token (15 alphanumeric chars max) that can be used in place of (or in addition to) the regular buy-in (typically won as a prize from an earlier tournament).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket required:</td>\r\n                        <td><Field className=\"stretch\" name={\"TicketRequired\"} component={\"select\"}\r\n                                   title=\"Select Yes and only players with a matching ticket may enter this tournament. Otherwise select No and non-ticketed players can just pay the buy-in.\">\r\n                            <option >{props.EditMessag.Object.TicketRequired} </option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket funded:</td>\r\n                        <td><Field className=\"stretch\" name={\"TicketFunded\"} component={\"select\"}\r\n                                   title=\"Select Yes and the house will pay the buy-in and bounty for players with tickets. Select No and players will pay their own way if tickets are required. If required and funded are both No then ticketed players enter for free and do not increase the prizepool.\">\r\n                            <option >{props.EditMessag.Object.TicketFunded}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Prize bonus:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PrizeBonus\"} placeholder={props.EditMessag.Object.PrizeBonus}\r\n                                   component={'input'}\r\n                                   title=\"This is the number of house chips that are added to the prize pool. The amount can be a single sum, a per entrant amount, or a guaranteed minimum prizepool, depending on the Multiply Bonus setting. The default value is 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Multiply bonus:</td>\r\n                        <td><Field className=\"stretch\" name={\"MultiplyBonus\"} component={\"select\"}\r\n                                   title=\"Set to Yes to multiply the prize bonus by the number of entrants. Set to No to add the prize bonus as-is. Set to Min to treat the prize bonus as a guaranteed minimum prize pool.\">\r\n                            <option >{props.EditMessag.Object.MultiplyBonus}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                            <option value=\"Min\">Min</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Starting chips:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartingChips\"} placeholder={props.EditMessag.Object.StartingChips}\r\n                                   component={'input'}\r\n                                   title=\"Set the number of starting chips for each player, from 10 to 25000 chips. The default value is 1500.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bonus ticket:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BonusTicket\"} placeholder={props.EditMessag.Object.BonusTicket}\r\n                                   component={'input'}\r\n                                   title=\"Set an optional bonus ticket prefix to add extra starting chips. For example, if set to &quot;Bonus&quot;, a player holding a ticket named &quot;Bonus100&quot; will get an extra 100 chips added to their starting stack.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Add-on chips:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"AddOnChips\"} placeholder={props.EditMessag.Object.AddOnChips}\r\n                                   component={'input'}\r\n                                   title=\"Set the number of add-on chips (50000 max) to be offered at the end of the rebuy period for the same price as a regular rebuy. Use 0 for no add-on.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn clock:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TurnClock\"} placeholder={props.EditMessag.Object.TurnClock}\r\n                                   component={'input'}\r\n                                   title=\"This is the number of seconds (10 to 120) that the player has to act on each turn. The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn warning:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TurnWarning\"} placeholder={props.EditMessag.Object.TurnWarning}\r\n                                   component={'input'}\r\n                                   title=\"This is number of seconds remaining (5 to 119) on the turn clock when a warning is sent to the player and (if sync is enabled) their time bank button appears. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BankClock\"} placeholder={props.EditMessag.Object.BankClock}\r\n                                   component={'input'}\r\n                                   title=\"This is a reserve of time (0 to 600 seconds) available to each player on request and via disconnect detection. The default value is 60.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank sync:</td>\r\n                        <td><Field className=\"stretch\" name={\"BankSync\"} component={\"select\"}\r\n                                   title=\"Select Yes (the default) to show the time bank button with the turn warning. Select No to show the time bank button immediately.\">\r\n                            <option >{props.EditMessag.Object.BankSync}</option>\r\n                            <option value=\"Yes\" >Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank reset:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BankReset\"} placeholder={props.EditMessag.Object.BankReset}\r\n                                   component={'input'}\r\n                                   title=\"This is the number of hands that must be played before a player's time bank is automatically refilled. Use 0 to disable the reset feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Disconnect protection:</td>\r\n                        <td><Field className=\"stretch\" name={\"DisProtect\"} component={\"select\"}\r\n                                   title=\"Select Yes to automatically activate a player's time bank if they disconnect during their turn and run out of normal time.\">\r\n                            <option>{props.EditMessag.Object.DisProtect}</option>\r\n                            <option value=\"Yes\" >Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Level duration:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LevelDuration\"} placeholder={props.EditMessag.Object.Level}\r\n                                   component={'input'}\r\n                                   title=\"This is the number of minutes (1 to 1000) in each blinds level. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy levels:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyLevels\"} placeholder={props.EditMessag.Object.RebuyLevels}\r\n                                   component={'input'}\r\n                                   title=\"Set the length of the rebuy period in levels (1000 max). Enter 0 for a freezeout (non-rebuy) tournament. See details in the help file.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy threshold:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Threshold\"} placeholder={props.EditMessag.Object.Threshold}\r\n                                   component={'input'}\r\n                                   title=\"This is the maximum number of chips that a player can have to request a rebuy. Typically this is the same as the Starting Chips value.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum rebuys:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MaxRebuys\"} placeholder={props.EditMessag.Object.MaxRebuys}\r\n                                   component={'input'}\r\n                                   title=\"Set the maximum number of rebuys that each player can make during the rebuy period. Enter -1 for unlimited rebuys.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy cost:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyCost\"} placeholder={props.EditMessag.Object.RebuyCost}\r\n                                   component={'input'}\r\n                                   title=\"This amount is deducted from the player's account and added to the prize pool for each rebuy and add-on. Typically it is equal to the Buy-In amount.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy fee:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyFee\"} placeholder={props.EditMessag.Object.RebuyFee} component={'input'}\r\n                                   title=\"This amount is deducted from the player's account and added to the house account for each rebuy and add-on. Typically it is equal to 0. Pro/Gold feature. Must be 0 for Lite/Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break time:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BreakTime\"} placeholder={props.EditMessag.Object.BreakTime}\r\n                                   component={'input'}\r\n                                   title=\"This is the number of minutes in each rest break, 0 to 60. Use 0 for no rest breaks.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break interval:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BreakInterval\"} placeholder={props.EditMessag.Object.BreakInterval}\r\n                                   component={'input'}\r\n                                   title=\"Depending on the Break Sync setting, this is either the minutes past the hour (0 to 59) or the number of levels between breaks (1 to 1000).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break sync:</td>\r\n                        <td><Field className=\"stretch\" name={\"BreakSync\"} component={\"select\"}\r\n                                   title=\"Set to Yes to synchronize rest breaks with the system clock where Break Interval represents minutes past each hour for the break start time. Set to No run breaks after each set number of levels as specified in the Break Interval setting.\">\r\n                            <option >{props.EditMessag.Object.BreakSync}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Stop on chop:</td>\r\n                        <td><Field className=\"stretch\" name={\"StopOnChop\"} component={\"select\"}\r\n                                   title=\"Set this option to Yes to stop a tournament early if the remaining players are all due an equal payout (or an equal ticket if there are no payouts).\">\r\n                            <option >{props.EditMessag.Object.StopOnChop}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Proportional chop:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PropChop\"} placeholder={props.EditMessag.Object.PropChop} component={'input'}\r\n                                   title=\"Set from 0 to 100, representing the percentage of the prizepool that will be paid out proportionally (based on chip counts) when Stop On Chop is enabled. If less than 100, the remainder of the prizepool is divided equally.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bring-in percent:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BringInPercent\"} placeholder={props.EditMessag.Object.BringInPercent}\r\n                                   component={'input'}\r\n                                   title=\"This is the &quot;Bring In&quot; amount for Stud and Razz games, expressed as a percentage of the Small Bet (1 to 99). The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Blinds schedule:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Blinds\"} component={'input'} placeholder={props.EditMessag.Object.Blinds}\r\n                                   value=\"10/20/0, 15/30/0, 25/50/0, 50/100/0, 75/150/0, 100/200/0, 100/200/25, 200/400/25, 300/600/50, 400/800/50, 600/1200/75, 800/1600/75, 1000/2000/100, 1500/3000/150, 2000/4000/200, 3000/6000/300, 4000/8000/400, 6000/12000/600, 8000/16000/800, 10000/20000/1000, 15000/30000/1500, 20000/40000/2000, 25000/50000/2500, 35000/70000/3500, 45000/90000/4500, 55000/110000/5500, 70000/140000/7000, 85000/170000/8500, 100000/200000/10000, 125000/250000/12500\"\r\n                                   title=\"Edit the values in this list to specify a schedule of increasing blinds and antes for the tournament. When a Limit game is selected, the small and big bets are calculated automatically. Stud/Razz games use only the ante and bet values.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout structure:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Payout\"} component={'input'} placeholder={props.EditMessag.Object.Payout}\r\n                                   value=\"2-4, 100.00|5-7, 65.00, 35.00|8-10, 50.00, 30.00, 20.00|11-20, 45.00, 28.00, 17.00, 10.00|21-40, 36.00, 23.00, 15.00, 11.00, 8.00, 7.00|41-70, 30.00, 20.00, 14.00, 10.00, 8.00, 7.00, 6.00, 5.00|71-100, 29.00, 18.00, 12.50, 10.00, 8.00, 6.50, 5.50, 4.50, 3.50, 2.50|101-200, 28.00, 17.50, 11.50, 8.50, 7.00, 5.50, 4.50, 3.50, 2.50, 1.50, 1.00x10|201-400, 27.00, 16.50, 10.50, 8.00, 6.25, 4.75, 3.75, 2.75, 1.75, 1.25, 0.75x10, 0.50x20|401-700, 26.00, 15.50, 10.00, 7.50, 6.00, 4.50, 3.50, 2.50, 1.50, 1.00, 0.65x10, 0.40x20, 0.25x30|701-1000, 25.00, 15.00, 10.00, 7.25, 5.50, 4.25, 3.25, 2.25, 1.25, 0.75, 0.55x10, 0.40x20, 0.25x30, 0.15x30\"\r\n                                   title=\"Edit the values in this list to specify a structure of comma-separated payout percentages (beginning with 1st place) for various ranges of entrants (2 to 1000). The Paid and Total columns are calculated automatically.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout fractions:</td>\r\n                        <td>\r\n                            <Field className=\"stretch\" name={\"PayoutFractions\"} component={\"select\"}\r\n                                   title=\"Set to Yes (the default) to allow payouts in 0.01 chip multiples or No for whole number chip multiples.\">\r\n                                <option >{props.EditMessag.Object.PayoutFractions}</option>\r\n                                <option value=\"Yes\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                            </Field>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout tickets:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PayoutTickets\"} placeholder={props.EditMessag.Object.PayoutTickets}\r\n                                   component={'input'}\r\n                                   title=\"This is an optional comma-separated list of tickets to pay out, starting with first place. Typically used in satellite tournaments so that winners can use ticket as entry into next level.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Unregister at logout:</td>\r\n                        <td><Field className=\"stretch\" name={\"UnregLogout\"} component={\"select\"}\r\n                                   title=\"When set to Yes, players will be unregistered from the tournament if they log out before it starts.\">\r\n                            <option >{props.EditMessag.Object.UnregLogout}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Table graphic:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TableGraphic\"} placeholder={props.EditMessag.Object.TableGraphic}\r\n                                   component={'input'}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the table graphic. Leave this value blank to use the default system graphic.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Final table graphic:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TableGraphicFinal\"} placeholder={props.EditMessag.Object.TableGraphicFinal}\r\n                                   component={'input'}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the final table graphic (if tournament is multi-table). Leave this value blank to use the regular table graphic at the final table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Note\"} placeholder={props.EditMessag.Object.Note} component={'input'}\r\n                                   title=\"This is an optional note field, not seen by the players. 500 characters maximum.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            {/*<Field type=\"button\" value=\"Ok\" onClick=\"send('RGSaveAdd')\" component={\"button\"}/> */}\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n\r\n                            &nbsp;\r\n                            {/*<NavLink to=\"/ringgames\">*/}\r\n                            {/*    <span>Cancel</span>*/}\r\n                            {/*</NavLink>*/}\r\n\r\n                            <NavLink to='/tournaments'><Button variant=\"contained\" color=\"primary\" >\r\n                                Return\r\n                            </Button></NavLink>\r\n                            {props.EditMessag.Error !== '' ? <h3 style={{color: 'red'}}>{props.EditMessag.Error === '' ?\r\n                                <CircularProgress/> : props.EditMessag.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.EditMessag.Result}</h3>}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('edittableTournaments'));\r\n}\r\n\r\n\r\nlet ContactFormTournamentsEdit = reduxForm({\r\n    form: 'edittableTournaments',\r\n    onSubmitSuccess: afterSubmit,\r\n})(FormEditTournaments);\r\n\r\n\r\nfunction makeid(length) {\r\n    let result = '';\r\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    let a = `Tournament ${result}`\r\n    return a;\r\n}\r\n\r\n\r\nconst EditTournaments = (props) => {\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n\r\n            values.GameID === undefined ? props.EditMessag.Object.Name : values.GameID,\r\n            values.Description === undefined ? '' : values.Description,\r\n            values.AutoStart === undefined ? 'Yes' : values.AutoStart,\r\n            values.GameType === undefined ? 'No Limit Hold\\'em' : values.GameType,\r\n            values.MixedList === undefined ? '' : values.MixedList,\r\n            values.Shootout === undefined ? '' : values.Shootout,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Private === undefined ? 'No' : values.Private,\r\n            values.PermRegister === undefined ? '' : values.PermRegister,\r\n            values.PermUnregister === undefined ? '' : values.PermUnregister,\r\n            values.PermObserve === undefined ? '' : values.PermObserve,\r\n            values.PermPlayerChat === undefined ? '' : values.PermPlayerChat,\r\n            values.PermObserverChat === undefined ? '' : values.PermObserverChat,\r\n            values.SuspendChatAllIn === undefined ? 'No' : values.SuspendChatAllIn,\r\n            values.Tables === undefined ? '1' : values.Tables,\r\n            values.Seats === undefined ? '9' : values.Seats,\r\n            values.StartFull === undefined ? 'No' : values.StartFull,\r\n            values.StartMin === undefined ? '0' : values.StartMin,\r\n            values.StartCode === undefined ? '0' : values.StartCode,\r\n            values.StartTime === undefined ? '0000-00-00 00:00' : values.StartTime,\r\n            values.RegMinutes === undefined ? '0' : values.RegMinutes,\r\n            values.LateRegMinutes === undefined ? '0' : values.LateRegMinutes,\r\n            values.LatePenalty === undefined ? '0' : values.LatePenalty,\r\n            values.MinPlayers === undefined ? '2' : values.MinPlayers,\r\n            values.RecurMinutes === undefined ? '0' : values.RecurMinutes,\r\n            values.ResetSeconds === undefined ? '30' : values.ResetSeconds,\r\n            values.MaxRuns === undefined ? '0' : values.MaxRuns,\r\n            values.NoShowMinutes === undefined ? '0' : values.NoShowMinutes,\r\n            values.PrimaryCurrency === undefined ? 'Yes' : values.PrimaryCurrency,\r\n            values.BuyIn === undefined ? '1500' : values.BuyIn,\r\n            values.Bounty === undefined ? '0' : values.Bounty,\r\n            values.EntryFee === undefined ? '0' : values.EntryFee,\r\n            values.Ticket === undefined ? '' : values.Ticket,\r\n            values.TicketRequired === undefined ? 'No' : values.TicketRequired,\r\n            values.TicketFunded === undefined ? 'No' : values.TicketFunded,\r\n            values.PrizeBonus === undefined ? '0' : values.PrizeBonus,\r\n            values.MultiplyBonus === undefined ? 'No' : values.MultiplyBonus,\r\n            values.StartingChips === undefined ? '1500' : values.StartingChips,\r\n            values.BonusTicket === undefined ? '' : values.BonusTicket,\r\n            values.AddOnChips === undefined ? '0' : values.AddOnChips,\r\n            values.TurnClock === undefined ? '30' : values.TurnClock,\r\n            values.TurnWarning === undefined ? '10' : values.TurnWarning,\r\n            values.BankClock === undefined ? '60' : values.BankClock,\r\n            values.BankSync === undefined ? 'Yes' : values.BankSync,\r\n            values.BankReset === undefined ? '0' : values.BankReset,\r\n            values.DisProtect === undefined ? 'Yes' : values.DisProtect,\r\n            values.LevelDuration === undefined ? '10' : values.LevelDuration,\r\n            values.RebuyLevels === undefined ? '0' : values.RebuyLevels,\r\n            values.Threshold === undefined ? '1500' : values.Threshold,\r\n            values.MaxRebuys === undefined ? '0' : values.MaxRebuys,\r\n            values.RebuyCost === undefined ? '0' : values.RebuyCost,\r\n            values.RebuyFee === undefined ? '0' : values.RebuyFee,\r\n            values.BreakTime === undefined ? '0' : values.BreakTime,\r\n            values.BreakInterval === undefined ? '6' : values.BreakInterval,\r\n            values.BreakSync === undefined ? '0' : values.BreakSync,\r\n            values.StopOnChop === undefined ? '0' : values.StopOnChop,\r\n            values.PropChop === undefined ? '0' : values.PropChop,\r\n            values.BringInPercent === undefined ? '30' : values.BringInPercent,\r\n            values.Blinds === undefined ? '10/20/0, 15/30/0, 25/50/0, 50/100/0, 75/150/0, 100/200/0, 100/200/25, 200/400/25, 300/600/50, 400/800/50, 600/1200/75, 800/1600/75, 1000/2000/100, 1500/3000/150, 2000/4000/200, 3000/6000/300, 4000/8000/400, 6000/12000/600, 8000/16000/800, 10000/20000/1000, 15000/30000/1500, 20000/40000/2000, 25000/50000/2500, 35000/70000/3500, 45000/90000/4500, 55000/110000/5500, 70000/140000/7000, 85000/170000/8500, 100000/200000/10000, 125000/250000/12500' : values.Blinds,\r\n            values.Payout === undefined ? '2-4, 100.00|5-7, 65.00, 35.00|8-10, 50.00, 30.00, 20.00|11-20, 45.00, 28.00, 17.00, 10.00|21-40, 36.00, 23.00, 15.00, 11.00, 8.00, 7.00|41-70, 30.00, 20.00, 14.00, 10.00, 8.00, 7.00, 6.00, 5.00|71-100, 29.00, 18.00, 12.50, 10.00, 8.00, 6.50, 5.50, 4.50, 3.50, 2.50|101-200, 28.00, 17.50, 11.50, 8.50, 7.00, 5.50, 4.50, 3.50, 2.50, 1.50, 1.00x10|201-400, 27.00, 16.50, 10.50, 8.00, 6.25, 4.75, 3.75, 2.75, 1.75, 1.25, 0.75x10, 0.50x20|401-700, 26.00, 15.50, 10.00, 7.50, 6.00, 4.50, 3.50, 2.50, 1.50, 1.00, 0.65x10, 0.40x20, 0.25x30|701-1000, 25.00, 15.00, 10.00, 7.25, 5.50, 4.25, 3.25, 2.25, 1.25, 0.75, 0.55x10, 0.40x20, 0.25x30, 0.15x30' : values.Payout,\r\n            values.PayoutFractions === undefined ? 'Yes' : values.PayoutFractions,\r\n            values.PayoutTickets === undefined ? '' : values.PayoutTickets,\r\n            values.UnregLogout === undefined ? 'No' : values.UnregLogout,\r\n            values.TableGraphic === undefined ? '' : values.TableGraphic,\r\n            values.TableGraphicFinal === undefined ? '' : values.TableGraphicFinal,\r\n            values.Note === undefined ? '' : values.Note,\r\n            values.on1 === true ? \"Limit Hold'em,\" : '',\r\n            values.on2 === true ? \"Pot Limit Hold'em,\" : '',\r\n            values.on3 === true ? \"No Limit Hold'em,\" : '',\r\n            values.on4 === true ? \"Limit Omaha,\" : '',\r\n            values.on5 === true ? \"Pot Limit Omaha,\" : '',\r\n            values.on6 === true ? \"No Limit Omaha,\" : '',\r\n            values.on7 === true ? \"Limit Omaha Hi-Lo,\" : '',\r\n            values.on8 === true ? \"Pot Limit Omaha Hi-Lo,\" : '',\r\n            values.on9 === true ? \"No Limit Omaha Hi-Lo,\" : '',\r\n            values.on10 === true ? \"Limit Omaha-5,\" : '',\r\n            values.on11 === true ? \"Pot Limit Omaha-5,\" : '',\r\n            values.on12 === true ? \"No Limit Omaha-5,\" : '',\r\n            values.on13 === true ? \"Limit Omaha-5 Hi-Lo,\" : '',\r\n            values.on14 === true ? \"Pot Limit Omaha-5 Hi-Lo,\" : '',\r\n            values.on15 === true ? \"No Limit Omaha-5 Hi-Lo,\" : '',\r\n            values.on16 === true ? \"Limit Razz,\" : '',\r\n            values.on17 === true ? \"Limit Stud,\" : '',\r\n            values.on18 === true ? \"Limit Stud Hi-Lo,\" : '',\r\n\r\n\r\n        ];\r\n\r\n        props.editTournamentsThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormTournamentsEdit mixedThunk={props.mixedThunk} {...props} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default EditTournaments;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Poker\\Poker.jsx",["513","514","515","516","517","518","519"],"F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\AuthRedirectNoneToken.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\AuthRedirect.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getplayers\\Getplayers.jsx",["520","521","522","523","524","525","526","527","528","529","530","531","532"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\n\r\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { ChatBubbleOutline, Edit } from \"@material-ui/icons\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport { AddIcon } from \"@material-ui/data-grid\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport style from \"../Getplayers/Getplayers.module.css\";\r\nimport SendMessageTableContainer from \"../SendMesageTable/SendMessageTableContainer\";\r\nimport BalanceIncContainer from \"../Balance/BalanceIncContainer\";\r\nimport BalanceDecContainer from \"../Balance/BalanceDecContainer\";\r\nimport Icon from \"react-svg-icon\";\r\nimport diamond from \"./../../img/diamond.svg\";\r\nimport Diamond from \"../../IconionSvg/Diamond\";\r\nimport { authPlayersIpThunk } from \"../../Reducer/getplayersforip-reducer\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nfunction createData(Player, Balance, ERake, AdminProfile, Title) {\r\n  return { Player, Balance, ERake, AdminProfile, Title };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Donut\", 452, 25.0, 51, 4.9),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n  createData(\"Honeycomb\", 408, 3.2, 87, 6.5),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Jelly Bean\", 375, 0.0, 94, 0.0),\r\n  createData(\"KitKat\", 518, 26.0, 65, 7.0),\r\n  createData(\"Lollipop\", 392, 0.2, 98, 0.0),\r\n  createData(\"Marshmallow\", 318, 0, 81, 2.0),\r\n  createData(\"Nougat\", 360, 19.0, 9, 37.0),\r\n  createData(\"Oreo\", 437, 18.0, 63, 4.0),\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"Player\", numeric: false, disablePadding: true, label: \"Player\" },\r\n  { id: \"Balance\", numeric: true, disablePadding: false, label: \"Balance\" },\r\n  // {id: 'ERake', numeric: true, disablePadding: false, label: 'ERake'},\r\n\r\n  // {id: 'AdminProfile', numeric: true, disablePadding: false, label: 'AdminProfile'},\r\n  // {id: 'Title', numeric: true, disablePadding: false, label: 'Title'},\r\n  // {id: 'Level', numeric: true, disablePadding: false, label: 'Level'},\r\n\r\n  { id: \"PRake\", numeric: true, disablePadding: false, label: \"PRake\" },\r\n\r\n  // {id: 'Location', numeric: true, disablePadding: false, label: 'Location'},\r\n  { id: \"Agent\", numeric: true, disablePadding: false, label: \"Agent\" },\r\n  { id: \"RealName\", numeric: true, disablePadding: false, label: \"RealName\" },\r\n  { id: \"Email\", numeric: true, disablePadding: false, label: \"Email\" },\r\n  // {id: 'Balance2', numeric: true, disablePadding: false, label: 'Balance2'},\r\n  // {id: 'ERake2', numeric: true, disablePadding: false, label: 'ERake2'},\r\n  // {id: 'Permissions', numeric: true, disablePadding: false, label: 'Permissions'},\r\n  // {id: 'Tickets', numeric: true, disablePadding: false, label: 'Tickets'},\r\n  { id: \"Chip T/A\", numeric: true, disablePadding: false, label: \"Chip T/A\" },\r\n  { id: \"Chat\", numeric: true, disablePadding: false, label: \"Chat\" },\r\n  // {id: 'Color', numeric: true, disablePadding: false, label: 'Color'},\r\n  {\r\n    id: \"First Login\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"First Login\",\r\n  },\r\n  {\r\n    id: \"Last Login\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Last Login\",\r\n  },\r\n  {\r\n    id: \"Last Reset\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Last Reset\",\r\n  },\r\n  // {id: 'Last Reset2', numeric: true, disablePadding: false, label: 'Last Reset2'},\r\n  { id: \"Logins\", numeric: true, disablePadding: false, label: \"Logins\" },\r\n  // {id: 'Val', numeric: true, disablePadding: false, label: 'Val'},\r\n  { id: \"Avatar\", numeric: true, disablePadding: false, label: \"Avatar\" },\r\n  // {id: 'Custom', numeric: true, disablePadding: false, label: 'Custom'},\r\n  { id: \"Note\", numeric: true, disablePadding: false, label: \"Note\" },\r\n  { id: \"Gender\", numeric: true, disablePadding: false, label: \"Gender\" },\r\n  // {id: 'PRake2', numeric: true, disablePadding: false, label: 'PRake2'},\r\n  // {id: 'TFees', numeric: true, disablePadding: false, label: 'TFees'},\r\n  // {id: 'TFees2', numeric: true, disablePadding: false, label: 'TFees2'},\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            style={{ fontWeight: \"bold\" }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const [countDel, setCountDel] = useState(0);\r\n\r\n  useEffect(() => {\r\n    props.authPlayersThunk();\r\n  }, [countDel]);\r\n\r\n  let deletePlayers = () => {\r\n    for (let i = 0; i < props.getplayersobj.length; i++) {\r\n      props.deletePlayerThunk(props.getplayersobj[i]);\r\n    }\r\n    return setCountDel(countDel + 1);\r\n  };\r\n\r\n  let resetrake = () => {\r\n    for (let i = 0; i < props.getplayersobj.length; i++) {\r\n      props.resetRakeUserThunk(props.getplayersobj[i]);\r\n    }\r\n    return setCountDel(countDel + 1);\r\n  };\r\n\r\n  const editor = (name) => {\r\n    props.editPlayerThunkByObject(name);\r\n  };\r\n\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  const t = () => {\r\n    let arr = [];\r\n    props.getplayers.map((n) => arr.push(n.ERake));\r\n    const sum = arr.reduce((partial_sum, a) => partial_sum + a, 0);\r\n    let sum2 = Math.round(sum * 100) / 100;\r\n    return sum2;\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Players{\" \"}\r\n          <div style={{ fontSize: \"20px\" }}>\r\n            Total Rake:{\" \"}\r\n            <span style={{ fontWeight: \"bold\", color: \"green\" }}>{t()}</span>\r\n          </div>\r\n        </Typography>\r\n      )}\r\n\r\n      <FreeSolo\r\n        getplayers={props.getplayers}\r\n        searchPlayersThunk={props.searchPlayersThunk}\r\n      />\r\n\r\n      {numSelected > 0 ? (\r\n        <div>\r\n          <table>\r\n            <tr>\r\n              <td>\r\n                <Tooltip title=\"Increment\">\r\n                  <IconButton aria-label=\"Increment\">\r\n                    <span style={{ marginTop: \"5px\" }}>\r\n                      <a\r\n                        href={`#${props.getplayersobj[0]}`}\r\n                        title=\"Increment\"\r\n                        style={{ color: \"#706468\" }}\r\n                      >\r\n                        <table>\r\n                          <tr>\r\n                            <td>\r\n                              <MonetizationOnIcon />\r\n                            </td>\r\n                            <td>\r\n                              <AddIcon />\r\n                            </td>\r\n                          </tr>\r\n                        </table>\r\n                      </a>\r\n                      <div\r\n                        id={props.getplayersobj[0]}\r\n                        className={style.modalDialog}\r\n                      >\r\n                        <div>\r\n                          <a\r\n                            href=\"#close\"\r\n                            title=\"Close\"\r\n                            onClick={() => {\r\n                              setCountDel(countDel + 1);\r\n                            }}\r\n                            className={style.close}\r\n                          >\r\n                            X\r\n                          </a>\r\n                          <h5>Increment For {props.getplayersobj[0]}</h5>\r\n                          <BalanceIncContainer\r\n                            getplayersobj={props.getplayersobj}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </span>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <Tooltip title=\"Decrement\">\r\n                  <IconButton aria-label=\"Decrement\">\r\n                    <span style={{ marginTop: \"5px\" }}>\r\n                      <a\r\n                        href={`#${props.getplayersobj[0]}2`}\r\n                        title=\"Decrement\"\r\n                        style={{ color: \"#706468\" }}\r\n                      >\r\n                        <table>\r\n                          <tr>\r\n                            <td>\r\n                              <MonetizationOnIcon />\r\n                            </td>\r\n                            <td>\r\n                              <RemoveIcon />\r\n                            </td>\r\n                          </tr>\r\n                        </table>\r\n                      </a>\r\n                      <div\r\n                        id={`${props.getplayersobj[0]}2`}\r\n                        className={style.modalDialog}\r\n                      >\r\n                        <div>\r\n                          <a\r\n                            href=\"#close\"\r\n                            title=\"Close\"\r\n                            onClick={() => {\r\n                              setCountDel(countDel + 1);\r\n                            }}\r\n                            className={style.close}\r\n                          >\r\n                            X\r\n                          </a>\r\n                          <h5>Increment For {props.getplayersobj[0]}</h5>\r\n                          <BalanceDecContainer\r\n                            getplayersobj={props.getplayersobj}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </span>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <Tooltip title=\"Delete\">\r\n                  <IconButton aria-label=\"delete\">\r\n                    <DeleteIcon\r\n                      onClick={() => {\r\n                        deletePlayers();\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n              <td>\r\n                <Tooltip title=\"Reset Rake\">\r\n                  <IconButton aria-label=\"Reset Rake\">\r\n                    <FlipCameraAndroidIcon\r\n                      onClick={() => {\r\n                        resetrake();\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <NavLink to=\"/editplayers\" style={{}} title=\"Edit\">\r\n                  <Tooltip title=\"Edit User\">\r\n                    <IconButton aria-label=\"Edit User\">\r\n                      <Edit\r\n                        onClick={() => {\r\n                          editor(props.getplayersobj[0]);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </NavLink>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function Getplayers(props) {\r\n  useEffect(() => {\r\n    props.authPlayersThunk();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = props.getplayers.map((n) => n.Player);\r\n      props.getObj(newSelecteds);\r\n      setSelected(newSelecteds);\r\n\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, Player) => {\r\n    const selectedIndex = selected.indexOf(Player);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, Player);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n    props.getObj(newSelected);\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 20));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (Player) => selected.indexOf(Player) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, props.getplayers.length - page * rowsPerPage);\r\n\r\n  let sessionId = (session) => {\r\n    props.authSessionThunk(session);\r\n  };\r\n\r\n  function getIpForTable(a, b) {\r\n    for (let i = 0; i < b.Player.length; i++)\r\n      if (b.Player[i] === a) {\r\n        props.addImageCountryThunk(b.IP[i]);\r\n\r\n        return b.IP[i];\r\n      }\r\n  }\r\n\r\n  const j = (props) => props.getip.Player;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.resultgetplayers === \"\" ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <Paper className={classes.paper}>\r\n          <EnhancedTableToolbar {...props} numSelected={selected.length} />\r\n          <TableContainer>\r\n            <Table\r\n              stickyHeader\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              size={dense ? \"small\" : \"medium\"}\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={handleSelectAllClick}\r\n                onRequestSort={handleRequestSort}\r\n                rowCount={props.getplayers.length}\r\n              />\r\n\r\n              <TableBody>\r\n                {stableSort(props.getplayers, getComparator(order, orderBy))\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const isItemSelected = isSelected(row.Player);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      \r\n\r\n<>\r\n\r\n\r\n{props.getplayersOne==''&&<TableRow\r\n                        hover\r\n                        onClick={(event) => {\r\n                          handleClick(event, row.Player);\r\n                        }}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.Player}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ \"aria-labelledby\": labelId }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell\r\n                          component=\"th\"\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          padding=\"none\"\r\n                        >\r\n                          {row.Player}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\" style={{ fontWeight: \"bold\" }}>\r\n                          <Diamond /> {row.Balance}\r\n                        </TableCell>\r\n                        {/* <TableCell align=\"right\">{row.ERake}</TableCell> */}\r\n\r\n                        {/*<TableCell align=\"right\">{row.AdminProfile}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Title}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Level}</TableCell>*/}\r\n\r\n                        <TableCell align=\"right\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.PRake}\r\n                        </TableCell>\r\n\r\n                        <TableCell align=\"right\">{row.Location}</TableCell>\r\n                        <TableCell align=\"right\">{row.RealName}</TableCell>\r\n                        <TableCell align=\"right\">{row.Email}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.Balance2}</TableCell> */}\r\n                        {/* <TableCell align=\"right\">{row.ERake2}</TableCell> */}\r\n                        {/*<TableCell align=\"right\">{row.Permissions}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Tickets}</TableCell>*/}\r\n                        <TableCell align=\"right\">\r\n                          {row.ChipsTransfer}/{row.ChipsAccept}{\" \"}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{row.Chat}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.Color}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.FirstLogin}</TableCell>\r\n                        <TableCell align=\"right\">{row.LastLogin}</TableCell>\r\n                        <TableCell align=\"right\">{row.LastReset}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.LastReset2}</TableCell> */}\r\n                        <TableCell align=\"right\">{row.Logins}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.ValCode}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.Avatar}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.Custom}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.Note}</TableCell>\r\n\r\n                        <TableCell align=\"right\">{row.Gender}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.PRake2}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TFees}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TFees2}</TableCell> */}\r\n                      </TableRow>}\r\n                      \r\n                      \r\n                     \r\n                      {props.getplayersOne==row.Player&&\r\n\r\n                        <TableRow\r\n                        hover\r\n                        onClick={(event) => {\r\n                          handleClick(event, row.Player);\r\n                        }}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.Player}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ \"aria-labelledby\": labelId }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell\r\n                          component=\"th\"\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          padding=\"none\"\r\n                        >\r\n                          {row.Player}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\" style={{ fontWeight: \"bold\" }}>\r\n                          <Diamond /> {row.Balance}\r\n                        </TableCell>\r\n                        {/* <TableCell align=\"right\">{row.ERake}</TableCell> */}\r\n\r\n                        {/*<TableCell align=\"right\">{row.AdminProfile}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Title}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Level}</TableCell>*/}\r\n\r\n                        <TableCell align=\"right\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.PRake}\r\n                        </TableCell>\r\n\r\n                        <TableCell align=\"right\">{row.Location}</TableCell>\r\n                        <TableCell align=\"right\">{row.RealName}</TableCell>\r\n                        <TableCell align=\"right\">{row.Email}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.Balance2}</TableCell> */}\r\n                        {/* <TableCell align=\"right\">{row.ERake2}</TableCell> */}\r\n                        {/*<TableCell align=\"right\">{row.Permissions}</TableCell>*/}\r\n                        {/*<TableCell align=\"right\">{row.Tickets}</TableCell>*/}\r\n                        <TableCell align=\"right\">\r\n                          {row.ChipsTransfer}/{row.ChipsAccept}{\" \"}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{row.Chat}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.Color}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.FirstLogin}</TableCell>\r\n                        <TableCell align=\"right\">{row.LastLogin}</TableCell>\r\n                        <TableCell align=\"right\">{row.LastReset}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.LastReset2}</TableCell> */}\r\n                        <TableCell align=\"right\">{row.Logins}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.ValCode}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.Avatar}</TableCell>\r\n                        {/*<TableCell align=\"right\">{row.Custom}</TableCell>*/}\r\n                        <TableCell align=\"right\">{row.Note}</TableCell>\r\n\r\n                        <TableCell align=\"right\">{row.Gender}</TableCell>\r\n                        {/* <TableCell align=\"right\">{row.PRake2}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TFees}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TFees2}</TableCell> */}\r\n                      </TableRow>\r\n\r\n                      \r\n\r\n\r\n\r\n\r\n\r\n                      \r\n                      \r\n                      }\r\n\r\n\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n\r\n\r\n                    );\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                    <TableCell colSpan={33} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[15, 20, 25]}\r\n            component=\"div\"\r\n            count={props.getplayers.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n      )}\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FreeSolo(props) {\r\n    \r\n \r\n\r\n  return (\r\n    <div style={{ width: 300 }}>\r\n      <Autocomplete\r\n        freeSolo\r\n        id=\"free-solo-2-demo\"\r\n        disableClearable\r\n        options={props.getplayers.map((option) => option.Player)}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            onChange={props.searchPlayersThunk(params.inputProps.value)}\r\n            {...params}\r\n            label=\"Search Player\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputProps={{ ...params.InputProps, type: \"search\" }}\r\n\r\n\r\n\r\n            \r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","F:\\PROJECTTEXASROOM\\po\\src\\index.js",[],["533","534"],"F:\\PROJECTTEXASROOM\\po\\src\\Redux\\store.ts",[],"F:\\PROJECTTEXASROOM\\po\\src\\reportWebVitals.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\delgame-reducer.js",[],["535","536"],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\onlinegame-reducer.js",[],["537","538"],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getgame-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\onlinetournaments-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addtable-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addtabletournaments-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\rsetrakeall-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getplayersforip-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\session-reducer.js",[],["539","540"],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balanceransfer-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\allrake-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Ringgames\\RinggamesConteiner.jsx",["541","542"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {deleteGameThunk} from \"../../Reducer/delgame-reducer\";\r\nimport {offlineGameThunk} from \"../../Reducer/offlinegame-reducer\";\r\nimport {onlineGameThunk} from \"../../Reducer/onlinegame-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {authThunk, getGameObj} from \"../../Reducer/getgame-reducer\";\r\nimport AddMesage from \"./Ringgames\";\r\nimport {eddTablThunk, getGameOneThunk} from \"../../Reducer/edittable-reducer\";\r\nimport Ringgames from \"./Ringgames\";\r\nimport {addMessageForTableName} from \"../../Reducer/messagetable-reducer\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    getgames: state.Getgamereducer.AllRingGames,\r\n    getgamesobject: state.Getgamereducer.GameObj,\r\n    resultgetgames: state.Getgamereducer.Result,\r\n    token: state.Token\r\n\r\n})\r\n\r\nlet RingGamesConteiner = compose(connect(mapStateToProps, {\r\n    getGameOneThunk,\r\n    getGameObj,\r\n    authThunk,\r\n    deleteGameThunk,\r\n    offlineGameThunk,\r\n    onlineGameThunk,\r\n    eddTablThunk,\r\n    addMessageForTableName\r\n}),AuthRedirectNoneToken)(Ringgames);\r\nexport default RingGamesConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\AddFastPlayer\\AddFastPlayerContainer.jsx",["543","544"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPlayerThunk} from \"../../Reducer/addplayer-reducer\";\r\nimport AddPlayerfast from \"./AddFastPlayer\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    adplayer:state.Addplayer,\r\n    token: state.Token\r\n\r\n\r\n})\r\n\r\nlet AddFastPlayerConteiner = compose(connect(mapStateToProps, {addPlayerThunk}))(AddPlayerfast);\r\nexport default AddFastPlayerConteiner;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getallrake\\Getallrake.jsx",["545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\n\r\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { ChatBubbleOutline, Edit } from \"@material-ui/icons\";\r\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\r\nimport { AddIcon } from \"@material-ui/data-grid\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport style from \"../Getplayers/Getplayers.module.css\";\r\nimport SendMessageTableContainer from \"../SendMesageTable/SendMessageTableContainer\";\r\nimport BalanceIncContainer from \"../Balance/BalanceIncContainer\";\r\nimport BalanceDecContainer from \"../Balance/BalanceDecContainer\";\r\nimport Icon from \"react-svg-icon\";\r\nimport diamond from \"./../../img/diamond.svg\";\r\nimport Diamond from \"../../IconionSvg/Diamond\";\r\nimport { authPlayersIpThunk } from \"../../Reducer/getplayersforip-reducer\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nfunction createData(Player, Data, Rake, id) {\r\n  return { Player, Data, Rake, id };\r\n}\r\n\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  \r\n  { id: \"id\", numeric: false, disablePadding: true, label: \"id\" },\r\n  { id: \"user\", numeric: true, disablePadding: false, label: \"Player\" },\r\n  { id: \"rake\", numeric: true, disablePadding: false, label: \"Rake\" },\r\n  { id: \"data\", numeric: true, disablePadding: false, label: \"Data\" },\r\n  \r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            style={{ fontWeight: \"bold\" }}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const [countDel, setCountDel] = useState(0);\r\n\r\n  useEffect(() => {\r\n    props.addAllRakeThunk();\r\n  }, [countDel]);\r\n\r\n  let deletePlayers = () => {\r\n    for (let i = 0; i < props.allrakeobj.length; i++) {\r\n      props.deletePlayerThunk(props.allrakeobj[i]);\r\n    }\r\n    return setCountDel(countDel + 1);\r\n  };\r\n\r\n  let resetrake = () => {\r\n    for (let i = 0; i < props.allrakeobj.length; i++) {\r\n      props.resetRakeUserThunk(props.allrakeobj[i]);\r\n    }\r\n    return setCountDel(countDel + 1);\r\n  };\r\n\r\n  const editor = (name) => {\r\n    props.editPlayerThunkByObject(name);\r\n  };\r\n\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  const t = () => {\r\n    let arr = [];\r\n    props.allrake.map((n) => arr.push(n.ERake));\r\n    const sum = arr.reduce((partial_sum, a) => partial_sum + a, 0);\r\n    let sum2 = Math.round(sum * 100) / 100;\r\n    return sum2;\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          All Rake{\" \"}\r\n          <div style={{ fontSize: \"20px\" }}>\r\n            Total Rake:{\" \"}\r\n            <span style={{ fontWeight: \"bold\", color: \"green\" }}>{t()}</span>\r\n          </div>\r\n        </Typography>\r\n      )}\r\n\r\n      {/* <FreeSolo\r\n        getplayers={props.allrake}\r\n        searchPlayersThunk={props.searchPlayersThunk}\r\n      /> */}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <div>\r\n          <table>\r\n            <tr>\r\n              <td>\r\n                <Tooltip title=\"Increment\">\r\n                  <IconButton aria-label=\"Increment\">\r\n                    <span style={{ marginTop: \"5px\" }}>\r\n                      <a\r\n                        href={`#${props.allrakeobj[0]}`}\r\n                        title=\"Increment\"\r\n                        style={{ color: \"#706468\" }}\r\n                      >\r\n                        <table>\r\n                          <tr>\r\n                            <td>\r\n                              <MonetizationOnIcon />\r\n                            </td>\r\n                            <td>\r\n                              <AddIcon />\r\n                            </td>\r\n                          </tr>\r\n                        </table>\r\n                      </a>\r\n                      <div\r\n                        id={props.allrakeobj[0]}\r\n                        className={style.modalDialog}\r\n                      >\r\n                        <div>\r\n                          <a\r\n                            href=\"#close\"\r\n                            title=\"Close\"\r\n                            onClick={() => {\r\n                              setCountDel(countDel + 1);\r\n                            }}\r\n                            className={style.close}\r\n                          >\r\n                            X\r\n                          </a>\r\n                          <h5>Increment For {props.allrakeobj[0]}</h5>\r\n                          <BalanceIncContainer\r\n                            getplayersobj={props.allrakeobj}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </span>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <Tooltip title=\"Decrement\">\r\n                  <IconButton aria-label=\"Decrement\">\r\n                    <span style={{ marginTop: \"5px\" }}>\r\n                      <a\r\n                        href={`#${props.allrakeobj[0]}2`}\r\n                        title=\"Decrement\"\r\n                        style={{ color: \"#706468\" }}\r\n                      >\r\n                        <table>\r\n                          <tr>\r\n                            <td>\r\n                              <MonetizationOnIcon />\r\n                            </td>\r\n                            <td>\r\n                              <RemoveIcon />\r\n                            </td>\r\n                          </tr>\r\n                        </table>\r\n                      </a>\r\n                      <div\r\n                        id={`${props.allrakeobj[0]}2`}\r\n                        className={style.modalDialog}\r\n                      >\r\n                        <div>\r\n                          <a\r\n                            href=\"#close\"\r\n                            title=\"Close\"\r\n                            onClick={() => {\r\n                              setCountDel(countDel + 1);\r\n                            }}\r\n                            className={style.close}\r\n                          >\r\n                            X\r\n                          </a>\r\n                          <h5>Increment For {props.allrakeobj[0]}</h5>\r\n                          <BalanceDecContainer\r\n                            getplayersobj={props.allrakeobj}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </span>\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <Tooltip title=\"Delete\">\r\n                  <IconButton aria-label=\"delete\">\r\n                    <DeleteIcon\r\n                      onClick={() => {\r\n                        deletePlayers();\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n              <td>\r\n                <Tooltip title=\"Reset Rake\">\r\n                  <IconButton aria-label=\"Reset Rake\">\r\n                    <FlipCameraAndroidIcon\r\n                      onClick={() => {\r\n                        resetrake();\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </td>\r\n\r\n              <td>\r\n                <NavLink to=\"/editplayers\" style={{}} title=\"Edit\">\r\n                  <Tooltip title=\"Edit User\">\r\n                    <IconButton aria-label=\"Edit User\">\r\n                      <Edit\r\n                        onClick={() => {\r\n                          editor(props.allrakeobj[0]);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </NavLink>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 150,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function Getallrake(props) {\r\n  useEffect(() => {\r\n    props.addAllRakeThunk();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = props.allrake.map((n) => n.id);\r\n      props.getObj(newSelecteds);\r\n      setSelected(newSelecteds);\r\n\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, Player) => {\r\n    const selectedIndex = selected.indexOf(Player);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, Player);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n    props.getObj(newSelected);\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 20));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (Player) => selected.indexOf(Player) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage -\r\n    Math.min(rowsPerPage, props.allrake.length - page * rowsPerPage);\r\n\r\n  let sessionId = (session) => {\r\n    props.authSessionThunk(session);\r\n  };\r\n\r\n  function getIpForTable(a, b) {\r\n    for (let i = 0; i < b.Player.length; i++)\r\n      if (b.Player[i] === a) {\r\n        props.addImageCountryThunk(b.IP[i]);\r\n\r\n        return b.IP[i];\r\n      }\r\n  }\r\n\r\n  const j = (props) => props.getip.Player;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.resultgetplayers === \"\" ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <Paper className={classes.paper}>\r\n          <EnhancedTableToolbar {...props} numSelected={selected.length} />\r\n          <TableContainer>\r\n            <Table\r\n              stickyHeader\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              size={dense ? \"small\" : \"medium\"}\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={handleSelectAllClick}\r\n                onRequestSort={handleRequestSort}\r\n                rowCount={props.allrake.length}\r\n              />\r\n\r\n              <TableBody>\r\n                {stableSort(props.allrake, getComparator(order, orderBy))\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const isItemSelected = isSelected(row.id);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      \r\n\r\n<>\r\n\r\n\r\n<TableRow\r\n                        hover\r\n                        onClick={(event) => {\r\n                          handleClick(event, row.id);\r\n                        }}\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row.Player}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            checked={isItemSelected}\r\n                            inputProps={{ \"aria-labelledby\": labelId }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell\r\n                          component=\"th\"\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          padding=\"none\"\r\n                        >\r\n                          {row.id}\r\n                        </TableCell>\r\n                        \r\n                        \r\n                        <TableCell align=\"right\">{row.user}</TableCell>\r\n                       \r\n                        <TableCell align=\"right\">{row.rake}</TableCell>\r\n\r\n                        <TableCell align=\"right\">{row.data}</TableCell>\r\n                        \r\n                      </TableRow>\r\n                      \r\n                      \r\n                     \r\n                      \r\n\r\n\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n\r\n\r\n                    );\r\n                  })}\r\n                {emptyRows > 0 && (\r\n                  <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                    <TableCell colSpan={33} />\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            rowsPerPageOptions={[15, 20, 25]}\r\n            component=\"div\"\r\n            count={props.allrake.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n      )}\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// function FreeSolo(props) {\r\n    \r\n \r\n\r\n//   return (\r\n//     <div style={{ width: 300 }}>\r\n//       <Autocomplete\r\n//         freeSolo\r\n//         id=\"free-solo-2-demo\"\r\n//         disableClearable\r\n//         options={props.allrake.map((option) => option.Player)}\r\n//         renderInput={(params) => (\r\n//           <TextField\r\n//             onChange={props.searchPlayersThunk(params.inputProps.value)}\r\n//             {...params}\r\n//             label=\"Search Player\"\r\n//             margin=\"normal\"\r\n//             variant=\"outlined\"\r\n//             InputProps={{ ...params.InputProps, type: \"search\" }}\r\n\r\n\r\n\r\n            \r\n//           />\r\n//         )}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Tournaments\\Tournaments.jsx",["575","576","577","578","579","580","581"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {lighten, makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport {authTournamentsThunk, getTournamentsObj} from \"../../Reducer/gettournamentsgame-reducer\";\r\nimport {ChatBubbleOutline, DesktopAccessDisabled, DesktopWindows, Edit} from \"@material-ui/icons\";\r\nimport style from \"../Ringgames/Ringgames.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport SendMessageTableContainer from \"../SendMesageTable/SendMessageTableContainer\";\r\nimport SendMessageTableTurnamentsContainer from \"../SendMesageTableTurnaments/SendMessageTableTurnamentsContainer\";\r\nimport {addMessageForTableTurnamentsName} from \"../../Reducer/messagetableturnaments-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nfunction createData(Name, Game, Status, Chips, BuyIn) {\r\n    return {Name, Game, Status, Chips, BuyIn};\r\n}\r\n\r\nconst rows = [\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Donut', 452, 25.0, 51, 4.9),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n    createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n    createData('KitKat', 518, 26.0, 65, 7.0),\r\n    createData('Lollipop', 392, 0.2, 98, 0.0),\r\n    createData('Marshmallow', 318, 0, 81, 2.0),\r\n    createData('Nougat', 360, 19.0, 9, 37.0),\r\n    createData('Oreo', 437, 18.0, 63, 4.0),\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    {id: 'Name', numeric: false, disablePadding: true, label: 'Name'},\r\n    {id: 'Game', numeric: true, disablePadding: false, label: 'Game'},\r\n    {id: 'Mixed', numeric: true, disablePadding: false, label: 'Mixed'},\r\n    {id: 'Status', numeric: true, disablePadding: false, label: 'Status'},\r\n    {id: 'Chips', numeric: true, disablePadding: false, label: 'Chips'},\r\n    {id: 'Buy-in', numeric: true, disablePadding: false, label: 'Buy-in'},\r\n    {id: 'Auto', numeric: true, disablePadding: false, label: 'Auto'},\r\n    {id: 'Tables', numeric: true, disablePadding: false, label: 'Tables'},\r\n    {id: 'St/Tb', numeric: true, disablePadding: false, label: 'St/Tb'},\r\n    {id: 'SFull', numeric: true, disablePadding: false, label: 'SFull'},\r\n    {id: 'Start time', numeric: true, disablePadding: false, label: 'Start time'},\r\n    {id: 'Reg', numeric: true, disablePadding: false, label: 'Reg'},\r\n    {id: 'MinPlay', numeric: true, disablePadding: false, label: 'MinPlay'},\r\n    {id: 'Clocks', numeric: true, disablePadding: false, label: 'Clocks'},\r\n    {id: 'Level', numeric: true, disablePadding: false, label: 'Level'},\r\n    {id: 'SChop', numeric: true, disablePadding: false, label: 'SChop'},\r\n    {id: 'Unreg', numeric: true, disablePadding: false, label: 'Unreg'},\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const {classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort} = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{'aria-label': 'select all desserts'}}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n\r\n\r\n    const [countDel, setCountDel] = useState(0);\r\n    useEffect(() => {\r\n        props.authTournamentsThunk();\r\n    }, [countDel]);\r\n    const classes = useToolbarStyles();\r\n    const {numSelected} = props;\r\n\r\n\r\n    let deleteTournaments = () => {\r\n        for (let i = 0; i < props.gettsobject.length; i++) {\r\n            props.deleteTournamentsThunk(props.gettsobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n\r\n    let offlineTournaments = () => {\r\n        for (let i = 0; i < props.gettsobject.length; i++) {\r\n            props.offlinetournamentsThunk(props.gettsobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n    let onlineTournaments = () => {\r\n        for (let i = 0; i < props.gettsobject.length; i++) {\r\n            props.onlineTournamentsThunk(props.gettsobject[i]);\r\n        }\r\n        return setCountDel(countDel + 1);\r\n    }\r\n\r\n\r\n    const editor = (name) => {\r\n        props.getTournamentsOneThunk(name)\r\n    }\r\n\r\n    let formessage = () => {\r\n        for (let i = 0; i < props.gettsobject.length; i++) {\r\n            props.addMessageForTableTurnamentsName(props.gettsobject[i]);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Tournaments\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n\r\n\r\n                <div>\r\n                    <table>\r\n                        <tr>\r\n                            <td><Tooltip title=\"Delete\">\r\n                                <IconButton aria-label=\"delete\">\r\n                                    <DeleteIcon onClick={() => {\r\n                                        deleteTournaments()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip></td>\r\n                            <td><Tooltip title=\"Disabled\">\r\n                                <IconButton aria-label=\"Disabled\">\r\n                                    <DesktopAccessDisabled className={style.red} onClick={() => {\r\n                                        offlineTournaments()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            </td>\r\n\r\n\r\n                            <td><Tooltip title=\"Enabled\">\r\n                                <IconButton aria-label=\"Enabled\">\r\n                                    <DesktopWindows className={style.green} onClick={() => {\r\n                                        onlineTournaments()\r\n                                    }}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            </td>\r\n\r\n                            <td>\r\n\r\n\r\n                                <NavLink to='/edittournament'\r\n                                         style={{}}\r\n                                         title='Edit'>\r\n                                    <Tooltip title=\"Edit Tournaments\">\r\n                                        <IconButton aria-label=\"Edit Tournaments\">\r\n                                            <Edit onClick={() => {\r\n                                                editor(props.gettsobject[0]);\r\n                                            }}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </NavLink>\r\n\r\n                            </td>\r\n\r\n\r\n                            <td>\r\n                                <Tooltip title=\"Message\">\r\n                                    <IconButton aria-label=\"Message\">\r\n\r\n                                    <span>\r\n                                                <a href={`#${props.gettsobject[0]}`} title='Message' onClick={() => {\r\n                                                    formessage(props.gettsobject[0])\r\n\r\n                                                }}\r\n                                                   style={{color: '#706468'}}><ChatBubbleOutline/></a>\r\n                                                <div id={props.gettsobject[0]} className={style.modalDialog}>\r\n                                                    <div>\r\n                                                        <a href=\"#close\" title=\"Close\" className={style.close}>X</a>\r\n                                                        <h3>Message From {props.gettsobject[0]}</h3>\r\n                                                        <SendMessageTableTurnamentsContainer\r\n                                                            myprops={props.gettsobject[0]}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </span>\r\n\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n\r\n\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"filter list\">\r\n                        <FilterListIcon/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function Tournaments(props) {\r\n\r\n\r\n    useEffect(() => {\r\n        props.authTournamentsThunk();\r\n\r\n    }, []);\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = props.getgamestourn.map((n) => n.Name);\r\n            props.getTournamentsObj(newSelecteds);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, Name) => {\r\n        const selectedIndex = selected.indexOf(Name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, Name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n        props.getTournamentsObj(newSelected);\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (Name) => selected.indexOf(Name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.getgamestourn.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length}  {...props}/>\r\n                {props.resultgetgames === \"\" ? <div style={{textAlign: 'center'}}><CircularProgress/></div> : <div>\r\n                    <TableContainer>\r\n                        <Table\r\n                            className={classes.table}\r\n                            aria-labelledby=\"tableTitle\"\r\n                            size={dense ? 'small' : 'medium'}\r\n                            aria-label=\"enhanced table\"\r\n                        >\r\n                            <EnhancedTableHead\r\n                                classes={classes}\r\n                                numSelected={selected.length}\r\n                                order={order}\r\n                                orderBy={orderBy}\r\n                                onSelectAllClick={handleSelectAllClick}\r\n                                onRequestSort={handleRequestSort}\r\n                                rowCount={props.getgamestourn.length}\r\n                            />\r\n                            <TableBody>\r\n                                {stableSort(props.getgamestourn, getComparator(order, orderBy))\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, index) => {\r\n                                        const isItemSelected = isSelected(row.Name);\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                onClick={(event) => handleClick(event, row.Name)}\r\n                                                role=\"checkbox\"\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={row.Name}\r\n                                                selected={isItemSelected}\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        checked={isItemSelected}\r\n                                                        inputProps={{'aria-labelledby': labelId}}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                    {row.Name}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{row.Game}</TableCell>\r\n                                                <TableCell align=\"right\">{row.MixedList}</TableCell>\r\n\r\n\r\n                                                <TableCell align=\"right\">{row.Status}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Chips}</TableCell>\r\n                                                <TableCell align=\"right\">{row.BuyIn}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Auto}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Tables}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Seats}</TableCell>\r\n                                                <TableCell align=\"right\">{row.StartFull}</TableCell>\r\n                                                <TableCell align=\"right\">{row.StartTime}</TableCell>\r\n                                                <TableCell align=\"right\">{row.RegMinutes}</TableCell>\r\n                                                <TableCell align=\"right\">{row.MinPlayers}</TableCell>\r\n                                                <TableCell align=\"right\">{row.TurnClock}/{row.TimeBank}</TableCell>\r\n                                                <TableCell align=\"right\">{row.Level}</TableCell>\r\n                                                <TableCell align=\"right\">{row.StopOnChop}</TableCell>\r\n                                                <TableCell align=\"right\">{row.UnregLogout}</TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                {emptyRows > 0 && (\r\n                                    <TableRow style={{height: (dense ? 33 : 53) * emptyRows}}>\r\n                                        <TableCell colSpan={18}/>\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>}\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={props.getgamestourn.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense}/>}\r\n                label=\"Dense padding\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewTournaments\\NewTournaments.jsx",["582","583","584"],"import React from \"react\";\r\nimport style from './NewTournaments.module.css';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {myInputs, mySelected} from \"../../forinput/newinput\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {keyframes} from 'styled-components';\r\nimport styled from 'styled-components'\r\nimport {bounceInRight, zoomIn} from 'react-animations';\r\n\r\n\r\nconst Bounce = styled.div`animation: 0.5s ${keyframes`${zoomIn}`} ease-out`;\r\n\r\n\r\nconst FormAddTournaments = (props) => {\r\n\r\n    let adValueFromSelect = (value) => {\r\n        if (value === 'Mixed') {\r\n            props.mixedThunk(value);\r\n        }\r\n        props.mixedThunk(value);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <form onSubmit={props.handleSubmit}>\r\n                <table className={style.table}>\r\n\r\n                    <tbody>\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>New Tournament</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Name:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"GameID\"} component={'input'}\r\n                                   title=\"Specify a unique tournament name, up to 40 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Description:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Description\"} value=\"\" component={'input'}\r\n                                   title=\"This is an optional description, up to 500 characters. It is displayed at the top of the tournament's information window and may include HTML tags, including links. See help file for details.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Auto online:</td>\r\n                        <td><Field className=\"stretch\" name={\"AutoStart\"} component={\"select\"}\r\n                                   title=\"When this option is set to Yes, the tournament table will be put online when the game server is started. Otherwise tables must be manually put online with the Action button.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Game:</td>\r\n                        <td><Field className=\"stretch\" name={\"GameType\"} component={\"select\"}\r\n                                   onChange={(event) => adValueFromSelect(event.target.value)}\r\n\r\n                                   title=\"Select a Hold'em, Omaha, Omaha-5, Razz, 7-Card Stud, or Mixed game. When Mixed is selected, fill in the Mixed field also. Only Limit games are available in the Trial Version.\">\r\n\r\n                            <option value=\"\" disabled>No Limit Hold'em</option>\r\n                            <option value=\"Limit Hold'em\">Limit Hold'em</option>\r\n                            <option value=\"Pot Limit Hold'em\">Pot Limit Hold'em</option>\r\n                            <option value=\"No Limit Hold'em\" selected=\"\">No Limit Hold'em</option>\r\n                            <option value=\"Limit Omaha\">Limit Omaha</option>\r\n                            <option value=\"Pot Limit Omaha\">Pot Limit Omaha</option>\r\n                            <option value=\"No Limit Omaha\">No Limit Omaha</option>\r\n                            <option value=\"Limit Omaha Hi-Lo\">Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha Hi-Lo\">Pot Limit Omaha Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha Hi-Lo\">No Limit Omaha Hi-Lo</option>\r\n                            <option value=\"Limit Omaha-5\">Limit Omaha-5</option>\r\n                            <option value=\"Pot Limit Omaha-5\">Pot Limit Omaha-5</option>\r\n                            <option value=\"No Limit Omaha-5\">No Limit Omaha-5</option>\r\n                            <option value=\"Limit Omaha-5 Hi-Lo\">Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Pot Limit Omaha-5 Hi-Lo\">Pot Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"No Limit Omaha-5 Hi-Lo\">No Limit Omaha-5 Hi-Lo</option>\r\n                            <option value=\"Limit Razz\">Limit Razz</option>\r\n                            <option value=\"Limit Stud\">Limit Stud</option>\r\n                            <option value=\"Limit Stud Hi-Lo\">Limit Stud Hi-Lo</option>\r\n                            <option value=\"Mixed\">Mixed</option>\r\n                        </Field></td>\r\n                    </tr>\r\n\r\n                    {props.mixed === 'Mixed' ? <tr>\r\n                        <td>Mixed:</td>\r\n                        {/*<td>Limit Razz: <Field className=\"stretch\" type=\"checkbox\" name={\"MixedList1\"} value=\"\" component={'input'}*/}\r\n                        {/*           title=\"Select a list of games when Game type is set to Mixed, otherwise leave blank. Each game is played for a full level and the list loops indefinitely.\"/>*/}\r\n\r\n\r\n                        <td>\r\n\r\n                            <Bounce><Field type=\"checkbox\" component={'input'} name={\"on1\"} />Limit\r\n                                Hold'em<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on2\"} />Pot Limit\r\n                                Hold'em <br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on3\"}/>No Limit\r\n                                Hold'em<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on4\"}/>Limit Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on5\"}/>Pot Limit\r\n                                Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on6\"}/>No Limit\r\n                                Omaha<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on7\"}/>Limit Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on8\"}/>Pot Limit\r\n                                Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on9\"}/>No Limit Omaha\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on10\"}/>Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on11\"}/>Pot Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on12\"}/>No Limit\r\n                                Omaha-5<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on13\"}/>Limit Omaha-5\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on14\"}/>Pot Limit\r\n                                Omaha-5 Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on15\"}/>No Limit\r\n                                Omaha-5\r\n                                Hi-Lo<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on16\"}/>Limit Razz<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on17\"}/>Limit Stud<br></br>\r\n                                <Field type=\"checkbox\" component={'input'} name={\"on18\"}/>Limit Stud Hi-Lo<br></br></Bounce>\r\n\r\n\r\n                        </td>\r\n                    </tr> : ''}\r\n\r\n                    <tr>\r\n                        <td>Shootout:</td>\r\n                        <td><Field className=\"stretch\" name={\"Shootout\"} component={\"select\"}\r\n                                   title=\"Select Yes for a shootout format where all tables play down to a single player before merging. Select No for a standard format with auto table balancing. Late registration and rebuys are not available for shootout tournaments.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Password\"} value=\"\" component={'input'}\r\n                                   title=\"Specify a password needed to register for this tournament or leave this field blank for an open tournament. You can also use the register permission to restrict play to specific players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Private:</td>\r\n                        <td><Field className=\"stretch\" name={\"Private\"} component={\"select\"}\r\n                                   title=\"If a password is set for the tournament, select Yes to make it completely private or select No to allow observers to watch. You can also use the observe permission to restrict observers.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Register permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermRegister\"} value=\"\" component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict registration to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Unregister permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermUnregister\"} value=\"\" component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict unregistration to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the password setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observe permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermObserve\"} value=\"\" component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict observing to specific players who have the same token. Prefix with a dash (-) to only exclude players who have the token. This setting must be blank if the private setting is used.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player chat permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermPlayerChat\"} value=\"\" component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to players who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all seated players.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Observer chat permission:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PermObserverChat\"} value=\"\"\r\n                                   component={'input'}\r\n                                   title=\"Set a permission token (15 alphanumeric chars max) to restrict table chat to observers who have the same token. Prefix with a dash (-) to only exclude players who have the token. Leave blank to allow chat from all observers.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Suspend chat all-in:</td>\r\n                        <td><Field className=\"stretch\" name={\"SuspendChatAllIn\"} component={\"select\"}\r\n                                   title=\"Select Yes to suspend the table chat when any player has an all-in bet.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Tables:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Tables\"} placeholder=\"1\" component={'input'}\r\n                                   title=\"Select the number of tables in the tournament, from 1 to 100 (Pro/Gold version only). Set to 1 for the Lite or Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Seats per table:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Seats\"} placeholder=\"9\" component={'input'}\r\n                                   title=\"Select the number of seats at each table, from 2 to 10.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start when full:</td>\r\n                        <td><Field className=\"stretch\" name={\"StartFull\"} component={\"select\"}\r\n                                   title=\"Select Yes and the tournament will automatically start when enough players register to fill all seats. When this setting is enabled (along with System tab -> Client Settings -> Sit and Go tab), the tournament will be listed under the &quot;Sit &amp; Go&quot; tab in the client.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start now:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartMin\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"This is the minimum number of registered players that must check their &quot;Start Now&quot; box to start the tournament immediately. Select 0 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start code:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartCode\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"This is a code (1 to 999999) that can be entered in the Lobby window (Options menu) to start the tournament. Enter 0 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Start time:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartTime\"} placeholder=\"0000-00-00 00:00\"\r\n                                   component={'input'}\r\n                                   title=\"Enter a fixed time to auto-start the tournament in yyyy-mm-dd hh:mm format. Enter 0000-00-00 00:00 to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Registration period:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RegMinutes\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the number of minutes available for registration prior to the start time, up to 999999. A value of 0 represents an unlimited period. A value of -1 prevents registrations until the current tournament has completed.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Late registration:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LateRegMinutes\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the number of minutes available for late registration, 0 to 999999. Late registration will terminate early if payouts begin or the tournament fills up (max entrants = tables * seats per table).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Late penalty:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LatePenalty\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the number of chips to deduct from the starting stack of a late registration player. Use a negative number to represent a per-minute late penalty.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Minimum players:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MinPlayers\"} placeholder=\"2\"\r\n                                   component={'input'}\r\n                                   title=\"This is the minimum number of players (2 to 1000) that must be registered to auto start the tournament at a set time. This feature is ignored when the Start Time setting is 0000-00-00 00:00.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Recur minutes:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RecurMinutes\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Enter the number of minutes (0 to 999999) to add to the Start Time for an auto-recurring tournament. Reference: 1440 = 1 day, 10080 = 1 week.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Reset seconds:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ResetSeconds\"} placeholder=\"30\"\r\n                                   component={'input'}\r\n                                   title=\"Enter the number of seconds (10 to 999999, default 30) after the tournament completes before clearing the results and resetting for the next one.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum runs:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MaxRuns\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"Enter the maximum number of times this tournament can run before it is automatically taken offline. The count resets each time the tournament is put online. Enter 0 (the default) to disable this feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>No-shows minutes:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"NoShowMinutes\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Specify the number of minutes at which no-show players (never clicked their ready button) are removed from the tournament. Enter 0 to disable this feature. Buy-ins are refunded so best used only for freeroll tournaments.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Primary currency:</td>\r\n                        <td><Field className=\"stretch\" name={\"PrimaryCurrency\"} component={\"select\"}\r\n                                   title=\"Select Yes for primary (Balance) or No for secondary (Balance2) funding of the buy-ins, rebuys, and payouts. Secondary currency is only supported in the Gold edition.\">\r\n                            <option value=\"Yes\" selected=\"\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Buy-in:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BuyIn\"} placeholder=\"1500\" component={'input'}\r\n                                   title=\"Select the buy-in for this tournament. The default value is 1500. The buy-in does not include the entry fee.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bounty:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Bounty\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"Select a portion of the buy-in to be set aside for each knockout bounty. This amount is deducted from the main prize pool and is awarded directly to a player each time they eliminate another player from the tournament.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Entry Fee:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"EntryFee\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"Select an entry fee for this tournament. This amount is added to the buy-in but is kept by the &quot;house&quot; and does not go into the prize pool. Pro/Gold feature. Must be 0 for Lite/Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Ticket\"} placeholder=\"\" component={'input'}\r\n                                   title=\"Set an optional ticket token (15 alphanumeric chars max) that can be used in place of (or in addition to) the regular buy-in (typically won as a prize from an earlier tournament).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket required:</td>\r\n                        <td><Field className=\"stretch\" name={\"TicketRequired\"} component={\"select\"}\r\n                                   title=\"Select Yes and only players with a matching ticket may enter this tournament. Otherwise select No and non-ticketed players can just pay the buy-in.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Ticket funded:</td>\r\n                        <td><Field className=\"stretch\" name={\"TicketFunded\"} component={\"select\"}\r\n                                   title=\"Select Yes and the house will pay the buy-in and bounty for players with tickets. Select No and players will pay their own way if tickets are required. If required and funded are both No then ticketed players enter for free and do not increase the prizepool.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Prize bonus:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PrizeBonus\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"This is the number of house chips that are added to the prize pool. The amount can be a single sum, a per entrant amount, or a guaranteed minimum prizepool, depending on the Multiply Bonus setting. The default value is 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Multiply bonus:</td>\r\n                        <td><Field className=\"stretch\" name={\"MultiplyBonus\"} component={\"select\"}\r\n                                   title=\"Set to Yes to multiply the prize bonus by the number of entrants. Set to No to add the prize bonus as-is. Set to Min to treat the prize bonus as a guaranteed minimum prize pool.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                            <option value=\"Min\">Min</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Starting chips:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"StartingChips\"} placeholder=\"1500\"\r\n                                   component={'input'}\r\n                                   title=\"Set the number of starting chips for each player, from 10 to 25000 chips. The default value is 1500.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bonus ticket:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BonusTicket\"} placeholder=\"\"\r\n                                   component={'input'}\r\n                                   title=\"Set an optional bonus ticket prefix to add extra starting chips. For example, if set to &quot;Bonus&quot;, a player holding a ticket named &quot;Bonus100&quot; will get an extra 100 chips added to their starting stack.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Add-on chips:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"AddOnChips\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the number of add-on chips (50000 max) to be offered at the end of the rebuy period for the same price as a regular rebuy. Use 0 for no add-on.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn clock:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TurnClock\"} placeholder=\"30\"\r\n                                   component={'input'}\r\n                                   title=\"This is the number of seconds (10 to 120) that the player has to act on each turn. The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Turn warning:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TurnWarning\"} placeholder=\"10\"\r\n                                   component={'input'}\r\n                                   title=\"This is number of seconds remaining (5 to 119) on the turn clock when a warning is sent to the player and (if sync is enabled) their time bank button appears. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BankClock\"} placeholder=\"60\"\r\n                                   component={'input'}\r\n                                   title=\"This is a reserve of time (0 to 600 seconds) available to each player on request and via disconnect detection. The default value is 60.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank sync:</td>\r\n                        <td><Field className=\"stretch\" name={\"BankSync\"} component={\"select\"}\r\n                                   title=\"Select Yes (the default) to show the time bank button with the turn warning. Select No to show the time bank button immediately.\">\r\n                            <option value=\"Yes\" selected=\"\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Time bank reset:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BankReset\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"This is the number of hands that must be played before a player's time bank is automatically refilled. Use 0 to disable the reset feature.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Disconnect protection:</td>\r\n                        <td><Field className=\"stretch\" name={\"DisProtect\"} component={\"select\"}\r\n                                   title=\"Select Yes to automatically activate a player's time bank if they disconnect during their turn and run out of normal time.\">\r\n                            <option value=\"Yes\" selected=\"\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Level duration:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LevelDuration\"} placeholder=\"10\"\r\n                                   component={'input'}\r\n                                   title=\"This is the number of minutes (1 to 1000) in each blinds level. The default value is 10.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy levels:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyLevels\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the length of the rebuy period in levels (1000 max). Enter 0 for a freezeout (non-rebuy) tournament. See details in the help file.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy threshold:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Threshold\"} placeholder=\"1500\"\r\n                                   component={'input'}\r\n                                   title=\"This is the maximum number of chips that a player can have to request a rebuy. Typically this is the same as the Starting Chips value.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Maximum rebuys:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"MaxRebuys\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"Set the maximum number of rebuys that each player can make during the rebuy period. Enter -1 for unlimited rebuys.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy cost:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyCost\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"This amount is deducted from the player's account and added to the prize pool for each rebuy and add-on. Typically it is equal to the Buy-In amount.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Rebuy fee:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RebuyFee\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"This amount is deducted from the player's account and added to the house account for each rebuy and add-on. Typically it is equal to 0. Pro/Gold feature. Must be 0 for Lite/Trial version.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break time:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BreakTime\"} placeholder=\"0\"\r\n                                   component={'input'}\r\n                                   title=\"This is the number of minutes in each rest break, 0 to 60. Use 0 for no rest breaks.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break interval:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BreakInterval\"} placeholder=\"6\"\r\n                                   component={'input'}\r\n                                   title=\"Depending on the Break Sync setting, this is either the minutes past the hour (0 to 59) or the number of levels between breaks (1 to 1000).\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Break sync:</td>\r\n                        <td><Field className=\"stretch\" name={\"BreakSync\"} component={\"select\"}\r\n                                   title=\"Set to Yes to synchronize rest breaks with the system clock where Break Interval represents minutes past each hour for the break start time. Set to No run breaks after each set number of levels as specified in the Break Interval setting.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Stop on chop:</td>\r\n                        <td><Field className=\"stretch\" name={\"StopOnChop\"} component={\"select\"}\r\n                                   title=\"Set this option to Yes to stop a tournament early if the remaining players are all due an equal payout (or an equal ticket if there are no payouts).\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Proportional chop:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PropChop\"} placeholder=\"0\" component={'input'}\r\n                                   title=\"Set from 0 to 100, representing the percentage of the prizepool that will be paid out proportionally (based on chip counts) when Stop On Chop is enabled. If less than 100, the remainder of the prizepool is divided equally.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Bring-in percent:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"BringInPercent\"} placeholder=\"30\"\r\n                                   component={'input'}\r\n                                   title=\"This is the &quot;Bring In&quot; amount for Stud and Razz games, expressed as a percentage of the Small Bet (1 to 99). The default value is 30.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Blinds schedule:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Blinds\"} component={'input'}\r\n                                   value=\"10/20/0, 15/30/0, 25/50/0, 50/100/0, 75/150/0, 100/200/0, 100/200/25, 200/400/25, 300/600/50, 400/800/50, 600/1200/75, 800/1600/75, 1000/2000/100, 1500/3000/150, 2000/4000/200, 3000/6000/300, 4000/8000/400, 6000/12000/600, 8000/16000/800, 10000/20000/1000, 15000/30000/1500, 20000/40000/2000, 25000/50000/2500, 35000/70000/3500, 45000/90000/4500, 55000/110000/5500, 70000/140000/7000, 85000/170000/8500, 100000/200000/10000, 125000/250000/12500\"\r\n                                   title=\"Edit the values in this list to specify a schedule of increasing blinds and antes for the tournament. When a Limit game is selected, the small and big bets are calculated automatically. Stud/Razz games use only the ante and bet values.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout structure:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Payout\"} component={'input'}\r\n                                   value=\"2-4, 100.00|5-7, 65.00, 35.00|8-10, 50.00, 30.00, 20.00|11-20, 45.00, 28.00, 17.00, 10.00|21-40, 36.00, 23.00, 15.00, 11.00, 8.00, 7.00|41-70, 30.00, 20.00, 14.00, 10.00, 8.00, 7.00, 6.00, 5.00|71-100, 29.00, 18.00, 12.50, 10.00, 8.00, 6.50, 5.50, 4.50, 3.50, 2.50|101-200, 28.00, 17.50, 11.50, 8.50, 7.00, 5.50, 4.50, 3.50, 2.50, 1.50, 1.00x10|201-400, 27.00, 16.50, 10.50, 8.00, 6.25, 4.75, 3.75, 2.75, 1.75, 1.25, 0.75x10, 0.50x20|401-700, 26.00, 15.50, 10.00, 7.50, 6.00, 4.50, 3.50, 2.50, 1.50, 1.00, 0.65x10, 0.40x20, 0.25x30|701-1000, 25.00, 15.00, 10.00, 7.25, 5.50, 4.25, 3.25, 2.25, 1.25, 0.75, 0.55x10, 0.40x20, 0.25x30, 0.15x30\"\r\n                                   title=\"Edit the values in this list to specify a structure of comma-separated payout percentages (beginning with 1st place) for various ranges of entrants (2 to 1000). The Paid and Total columns are calculated automatically.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout fractions:</td>\r\n                        <td>\r\n                            <Field className=\"stretch\" name={\"PayoutFractions\"} component={\"select\"}\r\n                                   title=\"Set to Yes (the default) to allow payouts in 0.01 chip multiples or No for whole number chip multiples.\">\r\n                                <option value=\"Yes\" selected=\"\">Yes</option>\r\n                                <option value=\"No\">No</option>\r\n                            </Field>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Payout tickets:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PayoutTickets\"} placeholder=\"\"\r\n                                   component={'input'}\r\n                                   title=\"This is an optional comma-separated list of tickets to pay out, starting with first place. Typically used in satellite tournaments so that winners can use ticket as entry into next level.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Unregister at logout:</td>\r\n                        <td><Field className=\"stretch\" name={\"UnregLogout\"} component={\"select\"}\r\n                                   title=\"When set to Yes, players will be unregistered from the tournament if they log out before it starts.\">\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\" selected=\"\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Table graphic:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TableGraphic\"} placeholder=\"\"\r\n                                   component={'input'}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the table graphic. Leave this value blank to use the default system graphic.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Final table graphic:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TableGraphicFinal\"} placeholder=\"\"\r\n                                   component={'input'}\r\n                                   title=\"Pro/Gold feature. Enter the full path of a local image file (700 x 510 GIF, PNG or JPG format) to use as the final table graphic (if tournament is multi-table). Leave this value blank to use the regular table graphic at the final table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Note\"} placeholder=\"\" component={'input'}\r\n                                   title=\"This is an optional note field, not seen by the players. 500 characters maximum.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            {/*<Field type=\"button\" value=\"Ok\" onClick=\"send('RGSaveAdd')\" component={\"button\"}/> */}\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n\r\n                            &nbsp;\r\n                            {/*<NavLink to=\"/ringgames\">*/}\r\n                            {/*    <span>Cancel</span>*/}\r\n                            {/*</NavLink>*/}\r\n\r\n                            <NavLink to='/tournaments'><Button variant=\"contained\" color=\"primary\" >\r\n                                Return\r\n                            </Button></NavLink>\r\n                            {props.adturnamentsnew.Error !== '' ? <h3 style={{color: 'red'}}>{props.adturnamentsnew.Error === '' ?\r\n                                <CircularProgress/> : props.adturnamentsnew.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.adturnamentsnew.Result}</h3>}\r\n                            {/*<Field type=\"button\" value=\"Cancel\" onClick=\"send('RGCancel')\" component={\"button\"}/>*/}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('addtableTournaments'));\r\n}\r\n\r\n\r\nlet ContactFormTournaments = reduxForm({\r\n    form: 'addtableTournaments',\r\n    onSubmitSuccess: afterSubmit,\r\n})(FormAddTournaments);\r\n\r\n\r\nfunction makeid(length) {\r\n    let result = '';\r\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    let a = `Tournament ${result}`\r\n    return a;\r\n}\r\n\r\n\r\nconst AddTournaments = (props) => {\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n\r\n            values.GameID === undefined ? makeid(5) : values.GameID,\r\n            values.Description === undefined ? '' : values.Description,\r\n            values.AutoStart === undefined ? 'Yes' : values.AutoStart,\r\n            values.GameType === undefined ? 'No Limit Hold\\'em' : values.GameType,\r\n            values.MixedList === undefined ? '' : values.MixedList,\r\n            values.Shootout === undefined ? '' : values.Shootout,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Private === undefined ? 'No' : values.Private,\r\n            values.PermRegister === undefined ? '' : values.PermRegister,\r\n            values.PermUnregister === undefined ? '' : values.PermUnregister,\r\n            values.PermObserve === undefined ? '' : values.PermObserve,\r\n            values.PermPlayerChat === undefined ? '' : values.PermPlayerChat,\r\n            values.PermObserverChat === undefined ? '' : values.PermObserverChat,\r\n            values.SuspendChatAllIn === undefined ? 'No' : values.SuspendChatAllIn,\r\n            values.Tables === undefined ? '1' : values.Tables,\r\n            values.Seats === undefined ? '9' : values.Seats,\r\n            values.StartFull === undefined ? 'No' : values.StartFull,\r\n            values.StartMin === undefined ? '0' : values.StartMin,\r\n            values.StartCode === undefined ? '0' : values.StartCode,\r\n            values.StartTime === undefined ? '0000-00-00 00:00' : values.StartTime,\r\n            values.RegMinutes === undefined ? '0' : values.RegMinutes,\r\n            values.LateRegMinutes === undefined ? '0' : values.LateRegMinutes,\r\n            values.LatePenalty === undefined ? '0' : values.LatePenalty,\r\n            values.MinPlayers === undefined ? '2' : values.MinPlayers,\r\n            values.RecurMinutes === undefined ? '0' : values.RecurMinutes,\r\n            values.ResetSeconds === undefined ? '30' : values.ResetSeconds,\r\n            values.MaxRuns === undefined ? '0' : values.MaxRuns,\r\n            values.NoShowMinutes === undefined ? '0' : values.NoShowMinutes,\r\n            values.PrimaryCurrency === undefined ? 'Yes' : values.PrimaryCurrency,\r\n            values.BuyIn === undefined ? '1500' : values.BuyIn,\r\n            values.Bounty === undefined ? '0' : values.Bounty,\r\n            values.EntryFee === undefined ? '0' : values.EntryFee,\r\n            values.Ticket === undefined ? '' : values.Ticket,\r\n            values.TicketRequired === undefined ? 'No' : values.TicketRequired,\r\n            values.TicketFunded === undefined ? 'No' : values.TicketFunded,\r\n            values.PrizeBonus === undefined ? '0' : values.PrizeBonus,\r\n            values.MultiplyBonus === undefined ? 'No' : values.MultiplyBonus,\r\n            values.StartingChips === undefined ? '1500' : values.StartingChips,\r\n            values.BonusTicket === undefined ? '' : values.BonusTicket,\r\n            values.AddOnChips === undefined ? '0' : values.AddOnChips,\r\n            values.TurnClock === undefined ? '30' : values.TurnClock,\r\n            values.TurnWarning === undefined ? '10' : values.TurnWarning,\r\n            values.BankClock === undefined ? '60' : values.BankClock,\r\n            values.BankSync === undefined ? 'Yes' : values.BankSync,\r\n            values.BankReset === undefined ? '0' : values.BankReset,\r\n            values.DisProtect === undefined ? 'Yes' : values.DisProtect,\r\n            values.LevelDuration === undefined ? '10' : values.LevelDuration,\r\n            values.RebuyLevels === undefined ? '0' : values.RebuyLevels,\r\n            values.Threshold === undefined ? '1500' : values.Threshold,\r\n            values.MaxRebuys === undefined ? '0' : values.MaxRebuys,\r\n            values.RebuyCost === undefined ? '0' : values.RebuyCost,\r\n            values.RebuyFee === undefined ? '0' : values.RebuyFee,\r\n            values.BreakTime === undefined ? '0' : values.BreakTime,\r\n            values.BreakInterval === undefined ? '6' : values.BreakInterval,\r\n            values.BreakSync === undefined ? '0' : values.BreakSync,\r\n            values.StopOnChop === undefined ? '0' : values.StopOnChop,\r\n            values.PropChop === undefined ? '0' : values.PropChop,\r\n            values.BringInPercent === undefined ? '30' : values.BringInPercent,\r\n            values.Blinds === undefined ? '10/20/0, 15/30/0, 25/50/0, 50/100/0, 75/150/0, 100/200/0, 100/200/25, 200/400/25, 300/600/50, 400/800/50, 600/1200/75, 800/1600/75, 1000/2000/100, 1500/3000/150, 2000/4000/200, 3000/6000/300, 4000/8000/400, 6000/12000/600, 8000/16000/800, 10000/20000/1000, 15000/30000/1500, 20000/40000/2000, 25000/50000/2500, 35000/70000/3500, 45000/90000/4500, 55000/110000/5500, 70000/140000/7000, 85000/170000/8500, 100000/200000/10000, 125000/250000/12500' : values.Blinds,\r\n            values.Payout === undefined ? '2-4, 100.00|5-7, 65.00, 35.00|8-10, 50.00, 30.00, 20.00|11-20, 45.00, 28.00, 17.00, 10.00|21-40, 36.00, 23.00, 15.00, 11.00, 8.00, 7.00|41-70, 30.00, 20.00, 14.00, 10.00, 8.00, 7.00, 6.00, 5.00|71-100, 29.00, 18.00, 12.50, 10.00, 8.00, 6.50, 5.50, 4.50, 3.50, 2.50|101-200, 28.00, 17.50, 11.50, 8.50, 7.00, 5.50, 4.50, 3.50, 2.50, 1.50, 1.00x10|201-400, 27.00, 16.50, 10.50, 8.00, 6.25, 4.75, 3.75, 2.75, 1.75, 1.25, 0.75x10, 0.50x20|401-700, 26.00, 15.50, 10.00, 7.50, 6.00, 4.50, 3.50, 2.50, 1.50, 1.00, 0.65x10, 0.40x20, 0.25x30|701-1000, 25.00, 15.00, 10.00, 7.25, 5.50, 4.25, 3.25, 2.25, 1.25, 0.75, 0.55x10, 0.40x20, 0.25x30, 0.15x30' : values.Payout,\r\n            values.PayoutFractions === undefined ? 'Yes' : values.PayoutFractions,\r\n            values.PayoutTickets === undefined ? '' : values.PayoutTickets,\r\n            values.UnregLogout === undefined ? 'No' : values.UnregLogout,\r\n            values.TableGraphic === undefined ? '' : values.TableGraphic,\r\n            values.TableGraphicFinal === undefined ? '' : values.TableGraphicFinal,\r\n            values.Note === undefined ? '' : values.Note,\r\n            values.on1 === true ? \"Limit Hold'em,\" : '',\r\n            values.on2 === true ? \"Pot Limit Hold'em,\" : '',\r\n            values.on3 === true ?\"No Limit Hold'em,\" : '',\r\n            values.on4 === true ?\"Limit Omaha,\": '',\r\n            values.on5 === true ?\"Pot Limit Omaha,\": '',\r\n            values.on6 === true ?\"No Limit Omaha,\": '',\r\n            values.on7 === true ?\"Limit Omaha Hi-Lo,\": '',\r\n            values.on8 === true ?\"Pot Limit Omaha Hi-Lo,\": '',\r\n            values.on9 === true ?\"No Limit Omaha Hi-Lo,\": '',\r\n            values.on10 === true ?\"Limit Omaha-5,\": '',\r\n            values.on11 === true ?\"Pot Limit Omaha-5,\": '',\r\n            values.on12 === true ?\"No Limit Omaha-5,\": '',\r\n            values.on13 === true ?\"Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on14 === true ?\"Pot Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on15 === true ?\"No Limit Omaha-5 Hi-Lo,\": '',\r\n            values.on16 === true ?\"Limit Razz,\": '',\r\n            values.on17 === true ?\"Limit Stud,\": '',\r\n            values.on18 === true ?\"Limit Stud Hi-Lo,\": '',\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            // values.GameID,\r\n            // values.Description === undefined ? '' : values.Description,\r\n            // values.AutoStart,\r\n            // values.GameType,\r\n            // values.MixedList,\r\n            // values.MixedHands === undefined ? 0 : values.MixedHands,\r\n            // values.Password === undefined ? '' : values.Password,\r\n            // values.Private,\r\n            // values.PermPlay === undefined ? '' : values.PermPlay,\r\n            // values.PermObserve === undefined ? '' : values.PermObserve,\r\n            // values.PermPlayerChat === undefined ? '' : values.PermPlayerChat,\r\n            // values.PermObserverChat === undefined ? '' : values.PermObserverChat,\r\n            // values.SuspendChatAllIn,\r\n            // values.Seats === undefined ? 9 : values.Seats,\r\n            // // values.StartMin,\r\n            // // values.StartCode,\r\n            // values.PrimaryCurrency,\r\n            // values.SmallestChip === undefined ? 0.01 : values.SmallestChip,\r\n            // values.BuyInMin === undefined ? 400 : values.BuyInMin,\r\n            // values.BuyInMax === undefined ? 5000 : values.BuyInMax,\r\n            // values.BuyInDef === undefined ? 1200 : values.BuyInDef,\r\n            // values.CapLimit === undefined ? 20 : values.CapLimit,\r\n            // values.RakePercent === undefined ? 0 : values.RakePercent,\r\n            // values.RakeCap === undefined ? 0 : values.RakeCap,\r\n            // values.TurnClock === undefined ? 30 : values.TurnClock,\r\n            // values.TurnWarning === undefined ? 10 : values.TurnWarning,\r\n            // values.BankClock === undefined ? 60 : values.BankClock,\r\n            // values.BankSync,\r\n            // values.BankReset === undefined ? 0 : values.BankReset,\r\n            // values.DisProtect,\r\n            // values.SmallBlind === undefined ? 10 : values.SmallBlind,\r\n            // values.BigBlind === undefined ? 20 : values.BigBlind,\r\n            // values.AllowStraddle,\r\n            // values.SmallBet === undefined ? 20 : values.SmallBet,\r\n            // values.BigBet === undefined ? 40 : values.BigBet,\r\n            // values.Ante === undefined ? 0 : values.Ante,\r\n            // values.AnteAll,\r\n            // values.BringIn === undefined ? 0 : values.BringIn,\r\n            // values.AllowDupeIPs,\r\n            // values.RatholeMinutes === undefined ? 0 : values.RatholeMinutes,\r\n            // values.SitoutMinutes === undefined ? 10 : values.SitoutMinutes,\r\n            // values.SitoutRelaxed,\r\n            // values.TableGraphic === undefined ? '' : values.TableGraphic,\r\n            // values.Note === undefined ? '' : values.Note\r\n        ];\r\n\r\n        props.addTurnamentsThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormTournaments mixed={props.adturnamentsnew.Mixed} adturnamentsnew={props.adturnamentsnew} mixedThunk={props.mixedThunk} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default AddTournaments;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\IconionSvg\\Diamond.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceDec.jsx",["585","586"],"import React from \"react\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {authDecBalanceThunk} from \"../../Reducer/balanceincdec-reducer\";\r\n\r\n\r\nconst SendMessageTable = (props) => {\r\n\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n\r\n            <Field name={\"numberbalance\"} step=\"any\" min=\"0\" type=\"number\" component={\"input\"}/>\r\n            <div>\r\n\r\n\r\n                <button style={{\r\n                    background: 'red',\r\n                    padding: '5px 15px',\r\n                    color: '#fff',\r\n                    border: 'solid red 1px',\r\n                    borderRadius: '5px'\r\n                }}>Send\r\n                </button>\r\n            </div>\r\n\r\n            {props.balance.Result}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('balanceformdec'));\r\n}\r\n\r\n\r\nlet BalanceForm = reduxForm({form: 'balanceformdec', onSubmitSuccess: afterSubmit})(SendMessageTable);\r\n\r\n\r\nconst BalanceAddOrClearDec = (props) => {\r\n\r\n    const onSubmit = (values) => {\r\n\r\nfor(let o=0; o<props.getplayersobj.length; o++)\r\n{\r\n    props.authDecBalanceThunk(values.numberbalance,props.getplayersobj[o]);\r\n}\r\n\r\n\r\n    }\r\n    return <BalanceForm balance={props.balance} getplayersobj={props.getplayersobj} onSubmit={onSubmit}/>\r\n}\r\nexport default BalanceAddOrClearDec;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\offlinegame-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\offlinetournaments-reducer.js",[],["587","588"],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\edittournament-reducer.js",["589"],"import {editTurnaments, getOneTournaments} from \"../API/Api\";\r\nimport {eddTablThunk} from \"./edittable-reducer\";\r\n\r\n\r\nconst EDIT_TOURNAMENT = \"EDIT_TOURNAMENT\";\r\nconst EDIT_TOURNAMENTS_RESULT_OK = \"EDIT_TOURNAMENTS_RESULT_OK\";\r\nconst NAME_OK_TOURNAMENTS = \"NAME_OK_TOURNAMENTS\";\r\nconst EDIT_TOURNAMENTS_RESULT_OK_NULL = \"EDIT_TOURNAMENTS_RESULT_OK_NULL\";\r\n\r\n\r\nlet initialization = {\r\n    Error: '',\r\n    Object: {},\r\n    Result: ''\r\n\r\n};\r\n\r\nlet EditTournamentsReducer = (state = initialization, action) => {\r\n    switch (action.type) {\r\n        case EDIT_TOURNAMENT:\r\n            return {\r\n                ...state,\r\n                Error: action.result\r\n            };\r\n\r\n\r\n        case NAME_OK_TOURNAMENTS:\r\n            return {\r\n\r\n                ...state,\r\n                Object: action.object,\r\n\r\n            };\r\n\r\n        case EDIT_TOURNAMENTS_RESULT_OK:\r\n            return {\r\n\r\n                ...state,\r\n                Result: action.result\r\n            };\r\n        case EDIT_TOURNAMENTS_RESULT_OK_NULL:\r\n            return {\r\n\r\n                ...state,\r\n                Result: action.result\r\n            };\r\n\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let editTForGames = (result) => ({type: EDIT_TOURNAMENT,  result});\r\nexport let editTForGamesResult = (result) => ({type: EDIT_TOURNAMENTS_RESULT_OK,  result});\r\nexport let eddTournThunk = (object) => ({type: NAME_OK_TOURNAMENTS, object});\r\nexport let editTForGamesResultNull = (result) => ({type: EDIT_TOURNAMENTS_RESULT_OK_NULL, result});\r\n\r\n\r\n\r\nexport const editTournamentsThunk = (args) =>\r\n    async (dispatch) => {\r\n        let response = await editTurnaments.editTurnamentsForApi(args);\r\n        if (response.data.Result === \"Error\") {\r\n            dispatch(editTForGames(response.data.Error));\r\n            dispatch(editTForGamesResult(response.data.Result));\r\n        } else {\r\n            dispatch(editTForGamesResult(response.data.Result));\r\n            dispatch(editTForGames(''));\r\n        }\r\n    }\r\n\r\n\r\n\r\nexport const getTournamentsOneThunk = (name) =>\r\n    async (dispatch) => {\r\n\r\n        let response = await getOneTournaments.getTournamentsOneApi(name);\r\n        if (response.status === 200) {\r\n            dispatch(eddTournThunk(response.data));\r\n\r\n        }\r\n    }\r\n\r\n\r\nexport default EditTournamentsReducer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\addplayer-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\delplayer-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\ipcountry-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\auth-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balancestatisticaplayers-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\gettournamentsgame-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\NewTournaments\\NewTournamentsConteiner.jsx",["590"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport AddTournaments from \"./NewTournaments\";\r\nimport {addTurnamentsThunk, mixedThunk} from \"../../Reducer/addtabletournaments-reducer\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\nadturnamentsnew:state.Addturnaments,\r\ntoken: state.Token\r\n\r\n})\r\n\r\nlet NewTournamentsConteiner = compose(connect(mapStateToProps, {addTurnamentsThunk,mixedThunk}),AuthRedirectNoneToken)(AddTournaments);\r\nexport default NewTournamentsConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditRingGame\\EditRingGameConteiner.jsx",["591"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {editTableForGamesResultNull, editTableThunk} from \"../../Reducer/edittable-reducer\";\r\nimport EditTable from \"./EditRingGame\";\r\nimport RedirectAfterGood from \"../../Hoc/RedirectAfterGood\";\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    EditMessag: state.EditMessag,\r\n    getgames: state.Getgamereducer.AllRingGames,\r\n    token: state.Token\r\n\r\n\r\n})\r\n\r\nlet EditRingGameConteiner = compose(connect(mapStateToProps, {\r\n    editTableThunk,\r\n    editTableForGamesResultNull\r\n}), RedirectAfterGood,AuthRedirectNoneToken)(EditTable);\r\nexport default EditRingGameConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Poker\\PokerContainer.jsx",["592","593"],"import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Poker from \"./Poker\";\nimport {addPlayerSessionThunk} from \"../../Reducer/session-reducer\";\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\nimport {addSessionThunk} from \"../../Reducer/session-reducer\";\nimport {addNameThunk} from \"../../Reducer/session-reducer\";\nimport {addBalanceThunk} from \"../../Reducer/session-reducer\";\n\n\n\n\n\n\nlet mapStateToProps = (state) => ({\n    session: state.Session,\n    token:state.Token \n    \n\n\n})\n\nlet PokerContainer = compose(connect(mapStateToProps, {\n    addPlayerSessionThunk,\n    addSessionThunk,\n    addNameThunk,\n    addBalanceThunk\n    \n}))(Poker);\nexport default PokerContainer;\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditPlayer\\EditPlayer.jsx",["594","595","596"],"import React from \"react\";\r\nimport style from './EditPlayer.module.css';\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, CircularProgress} from \"@material-ui/core\";\r\nimport {eddPlayerThunk} from \"../../Reducer/editplayer-reducer\";\r\n\r\n\r\nconst FormEditPlayer = (props) => {\r\ndebugger\r\n    let d = new Date();\r\n    function addZero(i) {\r\n        if (i < 10) {\r\n            i = \"0\" + i;\r\n            return i;\r\n        }\r\n        return i;}\r\n\r\n    let time = `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`;\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n\r\n\r\n                <table className={style.table}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <th colSpan=\"2\"><h2>Edit Player Account</h2></th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan=\"2\">&nbsp;</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Player:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Player\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Player}\r\n                                   title=\"Enter a unique player name, up to 12 characters. You may only include letters, numbers, dashes, and underscore characters.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Admin profile:</td>\r\n                        <td><Field className=\"stretch\" name={\"AdminProfile\"} component={'select'}\r\n                                   placeholder={props.EditPlayer.Object.AdminProfile}\r\n                                   title=\"Remote Admin profile name. A blank value indicates no admin rights. This feature is only available in the Gold version.\">\r\n                            <option\r\n                                value={props.EditPlayer.Object.AdminProfile}>{props.EditPlayer.Object.AdminProfile}</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Title:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Title\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Title}\r\n                                   title=\"This is an optional parameter (0 to 15 characters) that can be used to identify a player with a specific site title (moderator, banker, administrator, etc.). The title appears in the player's mouseover hint when seated at a table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Level:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Level\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Level}\r\n                                   title=\"This is an optional parameter (0 to 50 characters) that can be used to identify a player's level or ranking as a player based on parameters determined by the site administrator. The level appears in the player's mouseover hint when seated at a table.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Real name:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"RealName\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.RealName}\r\n                                   title=\"Player's real name, 0 to 50 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Password:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Password\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Password}\r\n                                   title=\"Player's password.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Gender:</td>\r\n                        <td><Field className=\"stretch\" name={\"Gender\"} title=\"Player's gender.\" component={'select'}>\r\n                            <option value={props.EditPlayer.Object.Gender}>{props.EditPlayer.Object.Gender}</option>\r\n                            <option value=\"Male\">Male</option>\r\n                            <option value=\"Female\">Female</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Location:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Location\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Location}\r\n                                   title=\"Player's location (e.g., City), from 1 to 30 characters.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Balance:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Balance\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Balance}\r\n                                   title=\"Player's primary account balance. The default value for a new account is determined from the &quot;Starting balance&quot; system setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Balance2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Balance2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Balance2}\r\n                                   title=\"Player's secondary account balance (Gold edition only). The default value for a new account is determined from the &quot;Starting balance 2&quot; system setting.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last reset:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastReset\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.LastReset}\r\n                                   placeholder={`${time}`}\r\n                                   title=\"This is the last date and time that the player's primary balance was last reset.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last reset2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastReset2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.LastReset2}\r\n                                   placeholder={`${time}`}\r\n                                   title=\"This is the last date and time that the player's secondary balance was last reset.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Permissions:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Permissions\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Permissions}\r\n                                   title=\"This is a comma-separated list of permission tokens, giving the player access to restricted ring tables, tournaments, and chat that have a matching token. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Tickets:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Tickets\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Tickets}\r\n                                   title=\"This is a comma-separated list of ticket tokens, given as prizes from satellite tournaments for entry into other tournaments. Tokens are case sensitive and up to 15 alphanumeric characters each.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips transfer:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsTransfer\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to transfer primary (balance) chips to other players from lobby menu. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option\r\n                                value={props.EditPlayer.Object.ChipsTransfer}>{props.EditPlayer.Object.ChipsTransfer}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips transfer2:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsTransfer2\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to transfer secondary (balance2) chips to other players from lobby menu. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option\r\n                                value={props.EditPlayer.Object.ChipsTransfer2}>{props.EditPlayer.Object.ChipsTransfer2}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips accept:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsAccept\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to accept primary (balance) chip transfers from other players. &quot;Allow primary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option\r\n                                value={props.EditPlayer.Object.ChipsAccept}>{props.EditPlayer.Object.ChipsAccept}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chips accept2:</td>\r\n                        <td><Field className=\"stretch\" name={\"ChipsAccept2\"} component={'select'}\r\n                                   title=\"Set to Yes to allow player to accept secondary (balance2) chip transfers from other players. &quot;Allow secondary chip transfers&quot; on System tab must also be enabled.\">\r\n                            <option\r\n                                value={props.EditPlayer.Object.ChipsAccept2}>{props.EditPlayer.Object.ChipsAccept2}</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                        </Field></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Chat\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Chat}\r\n                                   \r\n                                   title=\"Set to 0000-00-00 00:00 to enable chat privileges or set to a date &amp; time in the future when chat privileges will be automatically reinstated. Set to 9999-99-99 99:99 to keep a permanent ban.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat color 1:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor1\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.ChatColor1}\r\n                                   title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) in the lobby window and when seated at a table. Leave blank to use the default &quot;Player chat color&quot; setting specified in the system settings.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Chat color 2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ChatColor2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.ChatColor2}\r\n                                   title=\"This is an optional setting that determines the player's chat color (#RRGGBB format) when they are an observer at a table. Leave blank to use the default &quot;Observer chat color&quot; setting specified in the system settings.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>First login:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"FirstLogin\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.FirstLogin}\r\n                                   title=\"This is the date and time that the player first logged into your site. It is initially set to all zeros.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last login:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"LastLogin\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.LastLogin}\r\n                                   title=\"This is the last date and time that the player logged into your site. It is initially set to all zeros.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Logins:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Logins\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Logins}\r\n                                   title=\"This is the number of times the player has logged into your site.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Email:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Email\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Email}\r\n                                   title=\"Player's email address. If a player forgets their password, a reset code will be sent to this address.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Val code:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ValCode\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.ValCode}\r\n                                   title=\"This is a random code sent by the server to the player's email address for account validation or password resets. This field is erased automatically once the account is validated.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Avatar index:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Avatar\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Avatar}\r\n                                   title=\"This is the player's avatar number in the communal avatar set. Set value to 0 to use the Avatar file instead.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Avatar file:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"AvatarFile\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.AvatarFile}\r\n                                   title=\"This is an optional (Pro/Gold only) setting that assigns a specific 32x32 image (GIF, PNG, JPG) file to the player to use as their avatar. This setting is ignored if Avatar Index is not set to 0.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Custom:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Custom\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Custom}\r\n                                   title=\"Optional custom field, up to 50 characters. The caption and other options for this field are set in the Account Settings group on the System tab.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Note:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"Note\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.Note}\r\n                                   title=\"Optional field for notes, up to 250 characters.\"/></td>\r\n                    </tr>\r\n                    {/* <tr>\r\n                        <td>ERake:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ERake\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.ERake}\r\n                                   title=\"Player's accumulated primary currency rake contributions, calculated via the equal distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>ERake2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"ERake2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.ERake2}\r\n                                   title=\"Player's accumulated secondary currency rake contributions, calculated via the equal distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>PRake:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PRake\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.PRake}\r\n                                   title=\"Player's accumulated primary currency rake contributions, calculated via the proportional distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>PRake2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"PRake2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.PRake2}\r\n                                   title=\"Player's accumulated secondary currency rake contributions, calculated via the proportional distribution method.\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>TFees:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TFees\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.TFees}\r\n                                   title=\"Player's accumulated primary currency tournament fee contributions.\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>TFees2:</td>\r\n                        <td><Field className=\"stretch\" type=\"text\" name={\"TFees2\"} component={'input'}\r\n                                   placeholder={props.EditPlayer.Object.TFees2}\r\n                                   title=\"Player's accumulated secondary currency tournament fee contributions.\"/></td>\r\n                    </tr> */}\r\n                    <tr>\r\n                        <td colSpan=\"2\" height=\"60\" align=\"center\">\r\n                            <button className={style.button}>\r\n                                Ok\r\n                            </button>\r\n\r\n\r\n                            &nbsp;\r\n\r\n\r\n                            <NavLink to='/conplayers'><Button variant=\"contained\" color=\"primary\" >\r\n                                Return\r\n                            </Button></NavLink>\r\n\r\n                            {props.EditPlayer.Error !== '' ? <h3 style={{color: 'red'}}>{props.EditPlayer.Error === '' ?\r\n                                <CircularProgress/> : props.EditPlayer.Error}</h3>\r\n                                : <h3 style={{color: 'green'}}>{props.EditPlayer.Result}</h3>}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('editplayer'));\r\n}\r\n\r\n\r\nlet ContactFormEditPlayer = reduxForm({form: 'editplayer', onSubmitSuccess: afterSubmit,})(FormEditPlayer);\r\n\r\nconst EditTablePlayer = (props) => {\r\n    let d = new Date();\r\n    function addZero(i) {\r\n        if (i < 10) {\r\n            i = \"0\" + i;\r\n            return i;\r\n        }\r\n        return i;}\r\n\r\n    let time = `${d.getFullYear()}-${addZero(d.getMonth() + 1)}-${addZero(d.getDate())} ${addZero(d.getHours())}:${addZero(d.getMinutes())}`;\r\n\r\n\r\n    const onSubmit = (values) => {\r\n        let args = [\r\n            values.Player === undefined ? props.EditPlayer.Object.Player : values.Player,\r\n            values.AdminProfile === undefined ? props.EditPlayer.Object.AdminProfile : values.AdminProfile,\r\n            values.Title === undefined ? props.EditPlayer.Object.Title : values.Title,\r\n            values.Level === undefined ? props.EditPlayer.Object.Level : values.Level,\r\n            values.RealName === undefined ? props.EditPlayer.Object.RealName : values.RealName,\r\n            values.Password === undefined ? '' : values.Password,\r\n            values.Location === undefined ? props.EditPlayer.Object.Location : values.Location,\r\n            values.Email === undefined ? props.EditPlayer.Object.Email : values.Email,\r\n            values.ValCode === undefined ? props.EditPlayer.Object.ValCode : values.ValCode,\r\n            values.Balance === undefined ? props.EditPlayer.Object.Balance : values.Balance,\r\n            values.Balance2 === undefined ? props.EditPlayer.Object.Balance2 : values.Balance2,\r\n            values.LastReset === undefined ? time : values.LastReset,\r\n            values.LastReset2 === undefined ? time : values.LastReset2,\r\n            values.Avatar === undefined ? props.EditPlayer.Object.Avatar : values.Avatar,\r\n            values.AvatarFile === undefined ? props.EditPlayer.Object.AvatarFile : values.AvatarFile,\r\n            values.Logins === undefined ? props.EditPlayer.Object.Logins : values.Logins,\r\n            values.FirstLogin === undefined ? time : values.FirstLogin,\r\n            values.LastLogin === undefined ? time : values.LastLogin,\r\n            values.Gender === undefined ? props.EditPlayer.Object.Gender : values.Gender,\r\n            values.Permissions === undefined ? props.EditPlayer.Object.Permissions : values.Permissions,\r\n            values.Tickets === undefined ? props.EditPlayer.Object.Tickets : values.Tickets,\r\n            values.ChipsTransfer === undefined ? props.EditPlayer.Object.ChipsTransfer : values.ChipsTransfer,\r\n            values.ChipsTransfer2 === undefined ? props.EditPlayer.Object.ChipsTransfer2 : values.ChipsTransfer2,\r\n            values.ChipsAccept === undefined ? props.EditPlayer.Object.ChipsAccept : values.ChipsAccept,\r\n            values.ChipsAccept2 === undefined ? props.EditPlayer.Object.ChipsAccept2 : values.ChipsAccept2,\r\n            values.Chat === undefined ? time : values.Chat,\r\n            values.ChatColor1 === undefined ? props.EditPlayer.Object.ChatColor1 : values.ChatColor1,\r\n            values.ChatColor2 === undefined ? props.EditPlayer.Object.ChatColor2 : values.ChatColor2,\r\n            values.Custom === undefined ? props.EditPlayer.Object.Custom : values.Custom,\r\n            values.Note === undefined ? props.EditPlayer.Object.Note : values.Note,\r\n            values.ERake === undefined ? props.EditPlayer.Object.ERake : values.ERake,\r\n            values.ERake2 === undefined ? props.EditPlayer.Object.ERake2 : values.ERake2,\r\n            values.PRake === undefined ? props.EditPlayer.Object.PRake : values.PRake,\r\n            values.PRake2 === undefined ? props.EditPlayer.Object.PRake2 : values.PRake2,\r\n            values.TFees === undefined ? props.EditPlayer.Object.TFees : values.TFees,\r\n            values.TFees2 === undefined ? props.EditPlayer.Object.TFees2 : values.TFees2,\r\n        ];\r\n\r\n        props.editPlayerThunk(args);\r\n    }\r\n\r\n\r\n    return <div>\r\n\r\n        <ContactFormEditPlayer adtablenew={props.adtablenew} EditMessag={props.EditPlayer} {...props}\r\n                               onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nexport default EditTablePlayer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Passwordreplace\\Passwordreplace.jsx",["597","598","599"],"import React from \"react\";\nimport {makeStyles, withStyles} from \"@material-ui/core/styles\";\nimport {Field, reduxForm, reset, formValueSelector} from \"redux-form\";\nimport {myInputs} from \"./../../forinput/newinput\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\n\n\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {passwordReplaceThunk} from \"../../Reducer/passwordreplace-reducer\";\n\nconst BootstrapInput = withStyles((theme) => ({\n    root: {\n        \"label + &\": {\n            marginTop: theme.spacing(3),\n        },\n    },\n    input: {\n        borderRadius: 4,\n        position: \"relative\",\n        backgroundColor: theme.palette.background.paper,\n        border: \"1px solid #ced4da\",\n        fontSize: 16,\n        padding: \"10px 26px 10px 12px\",\n        transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n            \"-apple-system\",\n            \"BlinkMacSystemFont\",\n            '\"Segoe UI\"',\n            \"Roboto\",\n            '\"Helvetica Neue\"',\n            \"Arial\",\n            \"sans-serif\",\n            '\"Apple Color Emoji\"',\n            '\"Segoe UI Emoji\"',\n            '\"Segoe UI Symbol\"',\n        ].join(\",\"),\n        \"&:focus\": {\n            borderRadius: 4,\n            borderColor: \"#80bdff\",\n            boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\n        },\n    },\n}))(InputBase);\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        backgroundColor: \"#1a1a1a\",\n        padding: \"15px\",\n        border: \"1px solid #FEF4B0!important\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst CssTextField = withStyles({\n    root: {\n        \"& label.Mui-focused\": {\n            color: \"green\",\n        },\n        \"& .MuiInput-underline:after\": {},\n        \"& .MuiOutlinedInput-root\": {\n            \"& fieldset\": {\n                borderRadius: \"0px\",\n            },\n            \"&.MuiInputBase-root\": {\n                backgroundColor: \"#fff\",\n                borderRadius: \"0px\",\n            },\n\n            \"&:hover fieldset\": {},\n            \"&.Mui-focused fieldset\": {},\n        },\n    },\n})(Field);\n\nconst BootstrapButton = withStyles({\n    root: {\n        boxShadow: \"none\",\n        textTransform: \"none\",\n        fontSize: 21,\n        padding: \"10px 12px\",\n        border: \"1px solid\",\n        borderRadius: \"50px\",\n        lineHeight: 1.5,\n        backgroundColor: \"green\",\n        borderColor: \"green\",\n        fontFamily: [\n            \"-apple-system\",\n            \"BlinkMacSystemFont\",\n            '\"Segoe UI\"',\n            \"Roboto\",\n            '\"Helvetica Neue\"',\n            \"Arial\",\n            \"sans-serif\",\n            '\"Apple Color Emoji\"',\n            '\"Segoe UI Emoji\"',\n            '\"Segoe UI Symbol\"',\n        ].join(\",\"),\n        \"&:hover\": {\n            backgroundColor: \"#333\",\n            borderColor: \"#333\",\n            boxShadow: \"none\",\n        },\n        \"&:active\": {\n            boxShadow: \"none\",\n            backgroundColor: \"#333\",\n            borderColor: \"#333\",\n        },\n        \"&:focus\": {\n            boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.5)\",\n        },\n    },\n})(Button);\n\nconst Passwordreplace = (props) => {\n    const classes = useStyles();\n\n    const handleChange = (event) => {\n        props.authTransferUserThunk(event.target.value);\n    };\n\n\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <form className={classes.form} noValidate onSubmit={props.handleSubmit}>\n                    {/*<Field*/}\n                    {/*    component={\"select\"}*/}\n                    {/*    style={{*/}\n                    {/*        backgroundColor: \"#fff\",*/}\n                    {/*        width: \"99%\",*/}\n                    {/*        padding: \"15px\",*/}\n                    {/*        border: \"none\",*/}\n                    {/*    }}*/}\n                    {/*    name={\"user\"}*/}\n                    {/*>*/}\n                    {/*    {props.getplayers.map((n) => (*/}\n                    {/*        <option value={n.Player}>{n.Player}</option>*/}\n                    {/*    ))}*/}\n                    {/*</Field>*/}\n                    <CssTextField\n                        component={myInputs}\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name={\"password\"}\n                        placeholder=\"New Password\"\n                        type=\"text\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n\n                    />\n\n                    <BootstrapButton\n                        size=\"large\"\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Go\n                    </BootstrapButton>\n                    {/* <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\">\n                                Forgot password?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid> */}\n                </form>\n            </div>\n\n            <Box mt={8}>{/*<Copyright />*/}</Box>\n        </Container>\n    );\n};\n\nconst afterSubmit = (result, dispatch) => {\n    dispatch(reset(\"passwordreplace\"));\n};\n\nlet Passwrep = reduxForm({\n    form: \"passwordreplace\",\n    onSubmitSuccess: afterSubmit,\n})(Passwordreplace);\n\nconst PasswordreplaceContainer = (props) => {\n    const onSubmit = (values) => {\n        let pass = [props.session.Name, values.password];\n\n        props.passwordReplaceThunk(pass);\n    };\n\n    return (\n        <div>\n            <Passwrep {...props} onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\nlet mapStateToProps = (state) => ({\n    token: state.Token,\n    session: state.Session,\n    transfer: state.Transfer,\n    getplayers: state.GetPlayers.AllPlayers,\n});\n\nlet PasswordreplaceContainerContainer = compose(\n    connect(mapStateToProps, {\n\n        passwordReplaceThunk,\n    })\n)(PasswordreplaceContainer);\nexport default PasswordreplaceContainerContainer;\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\messagetableturnaments-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\getplayers-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\editplayer-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\totalrake-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Login\\LoginContainer.jsx",["600","601"],"import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport LoginAdmin from \"./Login\";\n\nimport {addPlayerTokenThunk} from \"../../Reducer/auth-reducer\";\nimport {addPlayerSessionThunk} from \"../../Reducer/session-reducer\";\nimport {authPlayersThunk} from \"../../Reducer/getplayers-reducer\";\nimport AuthRedirect from \"./../../Hoc/AuthRedirect\";\n\n\nlet mapStateToProps = (state) => ({\n    token: state.Token,\n    session: state.Session,\n\n\n})\n\nlet LoginContainer = compose(connect(mapStateToProps, {\n    addPlayerTokenThunk, addPlayerSessionThunk, authPlayersThunk\n\n}))(LoginAdmin);\nexport default LoginContainer;\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatisticBetweenPlayers\\BalanceStatisticBetweenPlayers.jsx",["602","603","604","605","606","607"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport {Button, Link, Menu, MenuItem} from \"@material-ui/core\";\nimport  '../BalanceStatistic/style.css';\nfunction createData(name, agent, balance, time) {\n  return { name, agent, balance, time };\n}\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'id', numeric: false, disablePadding: true, label: 'Id' },\n  { id: 'user1', numeric: true, disablePadding: false, label: 'Sender' },\n  { id: 'user2', numeric: true, disablePadding: false, label: 'Recipient' },\n  { id: 'amount', numeric: true, disablePadding: false, label: 'Amount' },\n  { id: 'data', numeric: true, disablePadding: false, label: 'Data & Time' },\n  \n  \n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n\n  const refresh=()=>{\n    props.addBalPlayersThunk();\n\n  }\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Balance\n        </Typography>\n      )}\n\n<Button variant=\"contained\" style={{backgroundColor:'#f7941d', color:'#fff'}} onClick={refresh}>Refresh</Button>\n\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n   \n    borderRadius:'0'\n    \n  },\n  \n  table: {\n    minWidth: 100,\n   \n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function BalanceStatisticBetweenPlayers(props) {\n\n\n    useEffect(() => {\n        props.addBalPlayersThunk();\n       \n\n    }, []);\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = props.allbalpl.map((n) => n.id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.allbalpl.length - page * rowsPerPage);\n\n  return (\n      \n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar addBalPlayersThunk={props.addBalPlayersThunk} numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={props.allbalpl.length}\n            />\n            <TableBody>\n              {stableSort(props.allbalpl, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.id);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell> \n                      \n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.id}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.user1}</TableCell>\n                      <TableCell align=\"right\">{row.user2}</TableCell>\n                      <TableCell align=\"right\">{row.balance < 0 ? <div style={{color:'red', fontSize:'15px',fontWeight:'bold'}}>{row.balance}</div>:\n                      <div style={{color:'green', fontSize:'15px',fontWeight:'bold'}}>{row.balance}</div>}</TableCell>\n                      <TableCell align=\"right\">{row.data}</TableCell>\n                      \n                      \n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[50, 100, 500]}\n          component=\"div\"\n          count={props.allbalpl.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceDecContainer.jsx",["608"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {authDecBalanceThunk} from \"../../Reducer/balanceincdec-reducer\";\r\nimport BalanceAddOrClearDec from \"./BalanceDec\";\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n    balance:state.Balance\r\n\r\n})\r\n\r\nlet BalanceDecContainer = compose(connect(mapStateToProps, {authDecBalanceThunk}))(BalanceAddOrClearDec);\r\nexport default BalanceDecContainer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTableTurnaments\\SendMessageTableTurnamentsContainer.jsx",["609"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport MessageforTable from \"./SendMessageTableTurnaments\";\r\n\r\nimport {addMessageTableTournamentsThunk} from \"../../Reducer/messagetableturnaments-reducer\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    messag:state.Messageournaments\r\n\r\n})\r\n\r\nlet SendMessageTableTurnamentsContainer = compose(connect(mapStateToProps, {\r\n    addMessageTableTournamentsThunk}))(MessageforTable);\r\nexport default SendMessageTableTurnamentsContainer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\messagetable-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\EditPlayer\\EditPlayerContainer.jsx",["610","611"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport RedirectAfterGood from \"../../Hoc/RedirectAfterGood\";\r\nimport EditTablePlayer from \"./EditPlayer\";\r\nimport {editPlayerThunk} from \"../../Reducer/editplayer-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    EditPlayer:state.EditPlayerNice,\r\n    getgames: state.Getgamereducer.AllRingGames,\r\n\r\n\r\n\r\n})\r\n\r\nlet EditPlayerConteiner = compose(connect(mapStateToProps, {editPlayerThunk}))(EditTablePlayer);\r\nexport default EditPlayerConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceStatistic\\BalanceStatisticContainer.jsx",["612"],"import React from \"react\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport BalanceStatistic from \"./BalanceStatistic\";\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\nimport {addBalThunk} from \"../../Reducer/balancestatistica-reducer\";\n\n\n\nlet mapStateToProps = (state) => ({\n    \nallbal:state.Allbalance.Object,\ntoken: state.Token\n\n})\n\nlet BalanceStatisticContainer = compose(connect(mapStateToProps, {\n    addBalThunk\n}),AuthRedirectNoneToken)(BalanceStatistic);\nexport default BalanceStatisticContainer;\n",["613","614"],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Getplayers\\GetplayersConteiner.jsx",["615"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport Getplayers from \"./Getplayers\";\r\nimport {authPlayersThunk, authSessionThunk, getObj} from \"../../Reducer/getplayers-reducer\";\r\nimport {eddPlayerThunk, editPlayerThunkByObject} from \"../../Reducer/editplayer-reducer\";\r\nimport {addPlayerForGamesResult} from \"../../Reducer/addplayer-reducer\";\r\nimport {deletePlayerThunk} from \"../../Reducer/delplayer-reducer\";\r\nimport {resetRakeAllThunk, resetRakeUserThunk, resetResultRakeOk} from \"../../Reducer/rsetrakeall-reducer\";\r\nimport {authPlayersIpThunk} from \"../../Reducer/getplayersforip-reducer\";\r\nimport {addImageCountryThunk} from \"../../Reducer/ipcountry-reducer\";\r\nimport {addPlayerTokenThunk} from \"../../Reducer/auth-reducer\";\r\nimport {addTotalRakeThunk} from \"../../Reducer/totalrake-reducer\";\r\nimport {searchPlayersThunk} from \"../../Reducer/getplayers-reducer\";\r\n\r\n\r\nimport AuthRedirectNoneToken from \"./../../Hoc/AuthRedirectNoneToken\";\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    getplayers: state.GetPlayers.AllPlayers,\r\n    getplayersOne: state.GetPlayers.PlayerOne,\r\n    resultgetplayers: state.GetPlayers.Result,\r\n    resultresetallrake: state.Resetrake.Result,\r\n    resultresetallrakeok: state.Resetrake.ResultOk,\r\n    resultBalance: state.Balance,\r\n    getplayersobj: state.GetPlayers.Obj,\r\n    getip:state.GetPlayersIp,\r\n    getimg:state.GetCountryIp,\r\n    token: state.Token,\r\n    totalrake:state.TotalRake.TotalRake\r\n\r\n\r\n})\r\n\r\nlet GetplayersConteiner = compose(connect(mapStateToProps, {\r\n    addPlayerTokenThunk,\r\n    addImageCountryThunk,\r\n    authPlayersIpThunk,\r\n    authSessionThunk,\r\n    getObj,\r\n    resetRakeUserThunk,\r\n    resetResultRakeOk,\r\n    authPlayersThunk,\r\n    eddPlayerThunk,\r\n    addPlayerForGamesResult,\r\n    deletePlayerThunk,\r\n    resetRakeAllThunk,\r\n    editPlayerThunkByObject,\r\n    addTotalRakeThunk,\r\n    searchPlayersThunk\r\n}),AuthRedirectNoneToken)(Getplayers);\r\nexport default GetplayersConteiner;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Hoc\\RedirectAfterGoodTournaments.jsx",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\Balance\\BalanceIncContainer.jsx",["616"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {authIncBalanceThunk} from \"../../Reducer/balanceincdec-reducer\";\r\nimport BalanceAddOrClearInc from \"./BalanceInc\";\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n    balance:state.Balance\r\n\r\n})\r\n\r\nlet BalanceIncContainer = compose(connect(mapStateToProps, {authIncBalanceThunk}))(BalanceAddOrClearInc);\r\nexport default BalanceIncContainer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balancestatistica-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTable\\SendMessageTableContainer.jsx",["617"],"import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport MessageforTable from \"./SendMessageTable\";\r\nimport {addMessageForTableName, addMessageTableThunk} from \"../../Reducer/messagetable-reducer\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    messag:state.AddMessag,\r\n\r\n})\r\n\r\nlet SendMessageTableContainer = compose(connect(mapStateToProps, {addMessageTableThunk,addMessageForTableName}))(MessageforTable);\r\nexport default SendMessageTableContainer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\edittable-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\SendMesageTable\\SendMessageTable.jsx",["618"],"import React from \"react\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\nconst SendMessageTable = (props) => {\r\n\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n\r\n            <Field name={\"textArea\"} component={\"textarea\"}/>\r\n            <div>\r\n\r\n\r\n                <button style={{\r\n                    background: 'red',\r\n                    padding: '5px 15px',\r\n                    color: '#fff',\r\n                    border: 'solid red 1px',\r\n                    borderRadius: '5px'\r\n                }}>Send\r\n                </button>\r\n            </div>\r\n\r\n            {props.messag.Result}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('addMessage'));\r\n}\r\n\r\n\r\nlet AddMesageForTable = reduxForm({form: 'addMessage', onSubmitSuccess: afterSubmit})(SendMessageTable);\r\n\r\n\r\nconst MessageforTable = (props) => {\r\n    const onSubmit = (values) => {\r\n\r\ndebugger\r\n        props.addMessageTableThunk(props.messag.MessageName, values.textArea);\r\n    }\r\n    return <AddMesageForTable messag={props.messag} onSubmit={onSubmit}/>\r\n}\r\nexport default MessageforTable;\r\n\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\conectedplayers-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\balanceincdec-reducer.js",["619"],"import {playerBalance} from \"../API/Api\";\r\n\r\n\r\nconst BALANCE_PLAYERS_INC = \"BALANCE_PLAYERS_INC\";\r\nconst BALANCE_PLAYERS_DEC = \"BALANCE_PLAYERS_DEC\";\r\nconst GET_RESULT_PLAYERS_FOR_LOADER = \"GET_RESULT_PLAYERS_FOR_LOADER\";\r\n\r\nlet initialization = {\r\n\r\n    ResultInc: '',\r\n    ResultDec: '',\r\n    Result:''\r\n};\r\n\r\nlet BalanceReducer = (state = initialization, action) => {\r\n\r\n    switch (action.type) {\r\n        case BALANCE_PLAYERS_INC:\r\n            return {\r\n                ...state,\r\n                ResultInc: action.data\r\n            };\r\n\r\n            case BALANCE_PLAYERS_DEC:\r\n            return {\r\n                ...state,\r\n                ResultDec: action.data\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport let getIncBalance = (data) => ({type: BALANCE_PLAYERS_INC, data});\r\nexport let getDecBalance = (data) => ({type: BALANCE_PLAYERS_DEC, data});\r\n\r\n\r\nexport const authIncBalanceThunk = (summa,player) =>\r\n    async (dispatch) => {\r\n\r\n        let response = await playerBalance.incrementBalance(summa,player);\r\n        if (response.status === 200) {\r\n            dispatch(getIncBalance(response.data));\r\n\r\n        }\r\n    }\r\n\r\nexport const authDecBalanceThunk = (summa,player) =>\r\n    async (dispatch) => {\r\n\r\n        let response = await playerBalance.decrementBalance(summa,player);\r\n        if (response.status === 200) {\r\n            dispatch(getDecBalance(response.data));\r\n\r\n        }\r\n    }\r\n\r\n\r\nexport default BalanceReducer;\r\n","F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\deltournaments-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\API\\Api.js",["620","621","622"],"F:\\PROJECTTEXASROOM\\po\\src\\Reducer\\passwordreplace-reducer.js",[],"F:\\PROJECTTEXASROOM\\po\\src\\Components\\BalanceTransfer\\BalanceTransfer.jsx",["623","624","625","626","627","628","629","630","631","632","633","634","635","636"],{"ruleId":"637","severity":1,"message":"638","line":1,"column":16,"nodeType":"639","messageId":"640","endLine":1,"endColumn":26},{"ruleId":"637","severity":1,"message":"641","line":25,"column":8,"nodeType":"639","messageId":"640","endLine":25,"endColumn":13},{"ruleId":"637","severity":1,"message":"642","line":49,"column":9,"nodeType":"639","messageId":"640","endLine":49,"endColumn":12},{"ruleId":"643","replacedBy":"644"},{"ruleId":"645","replacedBy":"646"},{"ruleId":"637","severity":1,"message":"647","line":4,"column":17,"nodeType":"639","messageId":"640","endLine":4,"endColumn":21},{"ruleId":"637","severity":1,"message":"648","line":10,"column":9,"nodeType":"639","messageId":"640","endLine":10,"endColumn":19},{"ruleId":"637","severity":1,"message":"649","line":11,"column":8,"nodeType":"639","messageId":"640","endLine":11,"endColumn":13},{"ruleId":"650","severity":1,"message":"651","line":134,"column":8,"nodeType":"652","endLine":134,"endColumn":21,"suggestions":"653"},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"643","replacedBy":"655"},{"ruleId":"645","replacedBy":"656"},{"ruleId":"637","severity":1,"message":"657","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":15},{"ruleId":"637","severity":1,"message":"658","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":26},{"ruleId":"637","severity":1,"message":"659","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":18},{"ruleId":"637","severity":1,"message":"660","line":11,"column":8,"nodeType":"639","messageId":"640","endLine":11,"endColumn":27},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"661","line":24,"column":9,"nodeType":"639","messageId":"640","endLine":24,"endColumn":18},{"ruleId":"637","severity":1,"message":"662","line":24,"column":20,"nodeType":"639","messageId":"640","endLine":24,"endColumn":30},{"ruleId":"637","severity":1,"message":"663","line":25,"column":8,"nodeType":"639","messageId":"640","endLine":25,"endColumn":29},{"ruleId":"637","severity":1,"message":"664","line":28,"column":9,"nodeType":"639","messageId":"640","endLine":28,"endColumn":24},{"ruleId":"637","severity":1,"message":"665","line":32,"column":10,"nodeType":"639","messageId":"640","endLine":32,"endColumn":20},{"ruleId":"650","severity":1,"message":"651","line":166,"column":8,"nodeType":"652","endLine":166,"endColumn":18,"suggestions":"666"},{"ruleId":"650","severity":1,"message":"651","line":342,"column":8,"nodeType":"652","endLine":342,"endColumn":10,"suggestions":"667"},{"ruleId":"668","severity":1,"message":"669","line":455,"column":85,"nodeType":"670","messageId":"671","endLine":455,"endColumn":87},{"ruleId":"672","severity":1,"message":"673","line":88,"column":36,"nodeType":"674","endLine":88,"endColumn":84},{"ruleId":"672","severity":1,"message":"673","line":153,"column":36,"nodeType":"674","endLine":153,"endColumn":79},{"ruleId":"643","replacedBy":"675"},{"ruleId":"645","replacedBy":"676"},{"ruleId":"637","severity":1,"message":"677","line":5,"column":9,"nodeType":"639","messageId":"640","endLine":5,"endColumn":23},{"ruleId":"637","severity":1,"message":"678","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":13},{"ruleId":"637","severity":1,"message":"677","line":5,"column":9,"nodeType":"639","messageId":"640","endLine":5,"endColumn":23},{"ruleId":"637","severity":1,"message":"679","line":125,"column":9,"nodeType":"639","messageId":"640","endLine":125,"endColumn":13},{"ruleId":"668","severity":1,"message":"669","line":198,"column":78,"nodeType":"670","messageId":"671","endLine":198,"endColumn":80},{"ruleId":"643","replacedBy":"680"},{"ruleId":"645","replacedBy":"681"},{"ruleId":"637","severity":1,"message":"682","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":35},{"ruleId":"637","severity":1,"message":"647","line":23,"column":17,"nodeType":"639","messageId":"640","endLine":23,"endColumn":21},{"ruleId":"637","severity":1,"message":"683","line":23,"column":23,"nodeType":"639","messageId":"640","endLine":23,"endColumn":27},{"ruleId":"637","severity":1,"message":"684","line":23,"column":29,"nodeType":"639","messageId":"640","endLine":23,"endColumn":37},{"ruleId":"637","severity":1,"message":"665","line":25,"column":10,"nodeType":"639","messageId":"640","endLine":25,"endColumn":20},{"ruleId":"650","severity":1,"message":"651","line":225,"column":8,"nodeType":"652","endLine":225,"endColumn":10,"suggestions":"685"},{"ruleId":"637","severity":1,"message":"682","line":1,"column":28,"nodeType":"639","messageId":"640","endLine":1,"endColumn":36},{"ruleId":"637","severity":1,"message":"686","line":2,"column":8,"nodeType":"639","messageId":"640","endLine":2,"endColumn":14},{"ruleId":"637","severity":1,"message":"687","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":19},{"ruleId":"637","severity":1,"message":"688","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":24},{"ruleId":"637","severity":1,"message":"689","line":7,"column":8,"nodeType":"639","messageId":"640","endLine":7,"endColumn":16},{"ruleId":"637","severity":1,"message":"647","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":12},{"ruleId":"637","severity":1,"message":"690","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":12},{"ruleId":"637","severity":1,"message":"691","line":11,"column":8,"nodeType":"639","messageId":"640","endLine":11,"endColumn":24},{"ruleId":"637","severity":1,"message":"692","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":18},{"ruleId":"637","severity":1,"message":"693","line":16,"column":8,"nodeType":"639","messageId":"640","endLine":16,"endColumn":13},{"ruleId":"650","severity":1,"message":"651","line":125,"column":6,"nodeType":"652","endLine":125,"endColumn":8,"suggestions":"694"},{"ruleId":"643","replacedBy":"695"},{"ruleId":"645","replacedBy":"696"},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"643","replacedBy":"697"},{"ruleId":"645","replacedBy":"698"},{"ruleId":"637","severity":1,"message":"699","line":1,"column":9,"nodeType":"639","messageId":"640","endLine":1,"endColumn":15},{"ruleId":"637","severity":1,"message":"700","line":1,"column":17,"nodeType":"639","messageId":"640","endLine":1,"endColumn":28},{"ruleId":"637","severity":1,"message":"701","line":1,"column":30,"nodeType":"639","messageId":"640","endLine":1,"endColumn":40},{"ruleId":"637","severity":1,"message":"684","line":1,"column":42,"nodeType":"639","messageId":"640","endLine":1,"endColumn":50},{"ruleId":"637","severity":1,"message":"702","line":1,"column":52,"nodeType":"639","messageId":"640","endLine":1,"endColumn":64},{"ruleId":"637","severity":1,"message":"703","line":1,"column":66,"nodeType":"639","messageId":"640","endLine":1,"endColumn":72},{"ruleId":"637","severity":1,"message":"665","line":24,"column":10,"nodeType":"639","messageId":"640","endLine":24,"endColumn":20},{"ruleId":"650","severity":1,"message":"651","line":230,"column":8,"nodeType":"652","endLine":230,"endColumn":10,"suggestions":"704"},{"ruleId":"643","replacedBy":"705"},{"ruleId":"645","replacedBy":"706"},{"ruleId":"637","severity":1,"message":"699","line":3,"column":9,"nodeType":"639","messageId":"640","endLine":3,"endColumn":15},{"ruleId":"707","severity":1,"message":"708","line":55,"column":46,"nodeType":"709","endLine":55,"endColumn":65},{"ruleId":"707","severity":1,"message":"708","line":56,"column":46,"nodeType":"709","endLine":56,"endColumn":65},{"ruleId":"707","severity":1,"message":"708","line":57,"column":46,"nodeType":"709","endLine":57,"endColumn":65},{"ruleId":"707","severity":1,"message":"708","line":58,"column":46,"nodeType":"709","endLine":58,"endColumn":65},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"710","line":5,"column":9,"nodeType":"639","messageId":"640","endLine":5,"endColumn":17},{"ruleId":"637","severity":1,"message":"711","line":5,"column":19,"nodeType":"639","messageId":"640","endLine":5,"endColumn":29},{"ruleId":"637","severity":1,"message":"712","line":11,"column":9,"nodeType":"639","messageId":"640","endLine":11,"endColumn":28},{"ruleId":"637","severity":1,"message":"710","line":5,"column":9,"nodeType":"639","messageId":"640","endLine":5,"endColumn":17},{"ruleId":"637","severity":1,"message":"711","line":5,"column":19,"nodeType":"639","messageId":"640","endLine":5,"endColumn":29},{"ruleId":"637","severity":1,"message":"713","line":11,"column":9,"nodeType":"639","messageId":"640","endLine":11,"endColumn":29},{"ruleId":"672","severity":1,"message":"673","line":229,"column":120,"nodeType":"674","endLine":229,"endColumn":164},{"ruleId":"672","severity":1,"message":"673","line":235,"column":119,"nodeType":"674","endLine":235,"endColumn":162},{"ruleId":"637","severity":1,"message":"714","line":647,"column":10,"nodeType":"639","messageId":"640","endLine":647,"endColumn":16},{"ruleId":"637","severity":1,"message":"715","line":1,"column":16,"nodeType":"639","messageId":"640","endLine":1,"endColumn":25},{"ruleId":"637","severity":1,"message":"682","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":35},{"ruleId":"637","severity":1,"message":"716","line":3,"column":9,"nodeType":"639","messageId":"640","endLine":3,"endColumn":25},{"ruleId":"637","severity":1,"message":"717","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":41},{"ruleId":"718","severity":1,"message":"719","line":12,"column":5,"nodeType":"720","messageId":"721","endLine":14,"endColumn":6},{"ruleId":"668","severity":1,"message":"722","line":30,"column":36,"nodeType":"670","messageId":"671","endLine":30,"endColumn":38},{"ruleId":"723","severity":1,"message":"724","line":54,"column":17,"nodeType":"709","endLine":62,"endColumn":18},{"ruleId":"637","severity":1,"message":"725","line":27,"column":10,"nodeType":"639","messageId":"640","endLine":27,"endColumn":27},{"ruleId":"637","severity":1,"message":"726","line":32,"column":8,"nodeType":"639","messageId":"640","endLine":32,"endColumn":33},{"ruleId":"637","severity":1,"message":"727","line":35,"column":8,"nodeType":"639","messageId":"640","endLine":35,"endColumn":12},{"ruleId":"637","severity":1,"message":"728","line":36,"column":8,"nodeType":"639","messageId":"640","endLine":36,"endColumn":15},{"ruleId":"637","severity":1,"message":"729","line":38,"column":10,"nodeType":"639","messageId":"640","endLine":38,"endColumn":28},{"ruleId":"637","severity":1,"message":"730","line":46,"column":7,"nodeType":"639","messageId":"640","endLine":46,"endColumn":11},{"ruleId":"650","severity":1,"message":"651","line":227,"column":6,"nodeType":"652","endLine":227,"endColumn":16,"suggestions":"731"},{"ruleId":"650","severity":1,"message":"651","line":470,"column":6,"nodeType":"652","endLine":470,"endColumn":8,"suggestions":"732"},{"ruleId":"637","severity":1,"message":"733","line":536,"column":7,"nodeType":"639","messageId":"640","endLine":536,"endColumn":16},{"ruleId":"637","severity":1,"message":"734","line":540,"column":12,"nodeType":"639","messageId":"640","endLine":540,"endColumn":25},{"ruleId":"637","severity":1,"message":"735","line":549,"column":9,"nodeType":"639","messageId":"640","endLine":549,"endColumn":10},{"ruleId":"668","severity":1,"message":"669","line":591,"column":21,"nodeType":"670","messageId":"671","endLine":591,"endColumn":23},{"ruleId":"668","severity":1,"message":"669","line":659,"column":43,"nodeType":"670","messageId":"671","endLine":659,"endColumn":45},{"ruleId":"643","replacedBy":"736"},{"ruleId":"645","replacedBy":"737"},{"ruleId":"643","replacedBy":"738"},{"ruleId":"645","replacedBy":"739"},{"ruleId":"643","replacedBy":"740"},{"ruleId":"645","replacedBy":"741"},{"ruleId":"643","replacedBy":"742"},{"ruleId":"645","replacedBy":"743"},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"744","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":17},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"745","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":29},{"ruleId":"637","severity":1,"message":"746","line":17,"column":8,"nodeType":"639","messageId":"640","endLine":17,"endColumn":18},{"ruleId":"637","severity":1,"message":"747","line":18,"column":8,"nodeType":"639","messageId":"640","endLine":18,"endColumn":15},{"ruleId":"637","severity":1,"message":"748","line":21,"column":8,"nodeType":"639","messageId":"640","endLine":21,"endColumn":18},{"ruleId":"637","severity":1,"message":"749","line":22,"column":8,"nodeType":"639","messageId":"640","endLine":22,"endColumn":22},{"ruleId":"637","severity":1,"message":"663","line":24,"column":8,"nodeType":"639","messageId":"640","endLine":24,"endColumn":29},{"ruleId":"637","severity":1,"message":"750","line":26,"column":10,"nodeType":"639","messageId":"640","endLine":26,"endColumn":17},{"ruleId":"637","severity":1,"message":"725","line":27,"column":10,"nodeType":"639","messageId":"640","endLine":27,"endColumn":27},{"ruleId":"637","severity":1,"message":"751","line":27,"column":29,"nodeType":"639","messageId":"640","endLine":27,"endColumn":33},{"ruleId":"637","severity":1,"message":"658","line":28,"column":8,"nodeType":"639","messageId":"640","endLine":28,"endColumn":26},{"ruleId":"637","severity":1,"message":"752","line":29,"column":10,"nodeType":"639","messageId":"640","endLine":29,"endColumn":17},{"ruleId":"637","severity":1,"message":"659","line":30,"column":8,"nodeType":"639","messageId":"640","endLine":30,"endColumn":18},{"ruleId":"637","severity":1,"message":"678","line":31,"column":8,"nodeType":"639","messageId":"640","endLine":31,"endColumn":13},{"ruleId":"637","severity":1,"message":"726","line":32,"column":8,"nodeType":"639","messageId":"640","endLine":32,"endColumn":33},{"ruleId":"637","severity":1,"message":"753","line":33,"column":8,"nodeType":"639","messageId":"640","endLine":33,"endColumn":27},{"ruleId":"637","severity":1,"message":"660","line":34,"column":8,"nodeType":"639","messageId":"640","endLine":34,"endColumn":27},{"ruleId":"637","severity":1,"message":"727","line":35,"column":8,"nodeType":"639","messageId":"640","endLine":35,"endColumn":12},{"ruleId":"637","severity":1,"message":"728","line":36,"column":8,"nodeType":"639","messageId":"640","endLine":36,"endColumn":15},{"ruleId":"637","severity":1,"message":"754","line":37,"column":8,"nodeType":"639","messageId":"640","endLine":37,"endColumn":15},{"ruleId":"637","severity":1,"message":"729","line":38,"column":10,"nodeType":"639","messageId":"640","endLine":38,"endColumn":28},{"ruleId":"637","severity":1,"message":"755","line":39,"column":8,"nodeType":"639","messageId":"640","endLine":39,"endColumn":17},{"ruleId":"637","severity":1,"message":"756","line":40,"column":8,"nodeType":"639","messageId":"640","endLine":40,"endColumn":20},{"ruleId":"637","severity":1,"message":"665","line":42,"column":10,"nodeType":"639","messageId":"640","endLine":42,"endColumn":20},{"ruleId":"650","severity":1,"message":"651","line":170,"column":6,"nodeType":"652","endLine":170,"endColumn":16,"suggestions":"757"},{"ruleId":"637","severity":1,"message":"758","line":172,"column":7,"nodeType":"639","messageId":"640","endLine":172,"endColumn":20},{"ruleId":"637","severity":1,"message":"759","line":179,"column":7,"nodeType":"639","messageId":"640","endLine":179,"endColumn":16},{"ruleId":"637","severity":1,"message":"760","line":186,"column":9,"nodeType":"639","messageId":"640","endLine":186,"endColumn":15},{"ruleId":"650","severity":1,"message":"651","line":413,"column":6,"nodeType":"652","endLine":413,"endColumn":8,"suggestions":"761"},{"ruleId":"637","severity":1,"message":"733","line":479,"column":7,"nodeType":"639","messageId":"640","endLine":479,"endColumn":16},{"ruleId":"637","severity":1,"message":"734","line":483,"column":12,"nodeType":"639","messageId":"640","endLine":483,"endColumn":25},{"ruleId":"637","severity":1,"message":"735","line":492,"column":9,"nodeType":"639","messageId":"640","endLine":492,"endColumn":10},{"ruleId":"637","severity":1,"message":"762","line":23,"column":9,"nodeType":"639","messageId":"640","endLine":23,"endColumn":29},{"ruleId":"637","severity":1,"message":"763","line":23,"column":31,"nodeType":"639","messageId":"640","endLine":23,"endColumn":48},{"ruleId":"637","severity":1,"message":"726","line":27,"column":8,"nodeType":"639","messageId":"640","endLine":27,"endColumn":33},{"ruleId":"637","severity":1,"message":"764","line":29,"column":9,"nodeType":"639","messageId":"640","endLine":29,"endColumn":41},{"ruleId":"637","severity":1,"message":"730","line":36,"column":7,"nodeType":"639","messageId":"640","endLine":36,"endColumn":11},{"ruleId":"650","severity":1,"message":"651","line":177,"column":8,"nodeType":"652","endLine":177,"endColumn":18,"suggestions":"765"},{"ruleId":"650","severity":1,"message":"651","line":355,"column":8,"nodeType":"652","endLine":355,"endColumn":10,"suggestions":"766"},{"ruleId":"637","severity":1,"message":"710","line":5,"column":9,"nodeType":"639","messageId":"640","endLine":5,"endColumn":17},{"ruleId":"637","severity":1,"message":"711","line":5,"column":19,"nodeType":"639","messageId":"640","endLine":5,"endColumn":29},{"ruleId":"637","severity":1,"message":"767","line":10,"column":9,"nodeType":"639","messageId":"640","endLine":10,"endColumn":22},{"ruleId":"637","severity":1,"message":"699","line":3,"column":9,"nodeType":"639","messageId":"640","endLine":3,"endColumn":15},{"ruleId":"637","severity":1,"message":"768","line":4,"column":9,"nodeType":"639","messageId":"640","endLine":4,"endColumn":28},{"ruleId":"643","replacedBy":"769"},{"ruleId":"645","replacedBy":"770"},{"ruleId":"637","severity":1,"message":"771","line":2,"column":9,"nodeType":"639","messageId":"640","endLine":2,"endColumn":21},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"745","line":6,"column":8,"nodeType":"639","messageId":"640","endLine":6,"endColumn":29},{"ruleId":"637","severity":1,"message":"772","line":6,"column":9,"nodeType":"639","messageId":"640","endLine":6,"endColumn":23},{"ruleId":"672","severity":1,"message":"673","line":108,"column":36,"nodeType":"674","endLine":108,"endColumn":59},{"ruleId":"672","severity":1,"message":"673","line":116,"column":36,"nodeType":"674","endLine":116,"endColumn":59},{"ruleId":"637","severity":1,"message":"773","line":3,"column":34,"nodeType":"639","messageId":"640","endLine":3,"endColumn":51},{"ruleId":"637","severity":1,"message":"774","line":16,"column":7,"nodeType":"639","messageId":"640","endLine":16,"endColumn":21},{"ruleId":"637","severity":1,"message":"775","line":136,"column":11,"nodeType":"639","messageId":"640","endLine":136,"endColumn":23},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"776","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":20},{"ruleId":"637","severity":1,"message":"682","line":1,"column":27,"nodeType":"639","messageId":"640","endLine":1,"endColumn":35},{"ruleId":"637","severity":1,"message":"647","line":23,"column":17,"nodeType":"639","messageId":"640","endLine":23,"endColumn":21},{"ruleId":"637","severity":1,"message":"683","line":23,"column":23,"nodeType":"639","messageId":"640","endLine":23,"endColumn":27},{"ruleId":"637","severity":1,"message":"684","line":23,"column":29,"nodeType":"639","messageId":"640","endLine":23,"endColumn":37},{"ruleId":"637","severity":1,"message":"665","line":25,"column":10,"nodeType":"639","messageId":"640","endLine":25,"endColumn":20},{"ruleId":"650","severity":1,"message":"651","line":225,"column":8,"nodeType":"652","endLine":225,"endColumn":10,"suggestions":"777"},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"778","line":4,"column":8,"nodeType":"639","messageId":"640","endLine":4,"endColumn":25},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"643","replacedBy":"779"},{"ruleId":"645","replacedBy":"780"},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"654","line":1,"column":8,"nodeType":"639","messageId":"640","endLine":1,"endColumn":13},{"ruleId":"637","severity":1,"message":"699","line":3,"column":9,"nodeType":"639","messageId":"640","endLine":3,"endColumn":15},{"ruleId":"637","severity":1,"message":"781","line":6,"column":7,"nodeType":"639","messageId":"640","endLine":6,"endColumn":36},{"ruleId":"637","severity":1,"message":"782","line":353,"column":13,"nodeType":"639","messageId":"640","endLine":353,"endColumn":17},{"ruleId":"637","severity":1,"message":"782","line":446,"column":13,"nodeType":"639","messageId":"640","endLine":446,"endColumn":17},{"ruleId":"637","severity":1,"message":"783","line":578,"column":13,"nodeType":"639","messageId":"640","endLine":578,"endColumn":17},{"ruleId":"637","severity":1,"message":"773","line":3,"column":34,"nodeType":"639","messageId":"640","endLine":3,"endColumn":51},{"ruleId":"637","severity":1,"message":"701","line":8,"column":8,"nodeType":"639","messageId":"640","endLine":8,"endColumn":18},{"ruleId":"637","severity":1,"message":"684","line":9,"column":8,"nodeType":"639","messageId":"640","endLine":9,"endColumn":16},{"ruleId":"637","severity":1,"message":"784","line":10,"column":8,"nodeType":"639","messageId":"640","endLine":10,"endColumn":22},{"ruleId":"637","severity":1,"message":"700","line":11,"column":8,"nodeType":"639","messageId":"640","endLine":11,"endColumn":19},{"ruleId":"637","severity":1,"message":"703","line":12,"column":8,"nodeType":"639","messageId":"640","endLine":12,"endColumn":14},{"ruleId":"637","severity":1,"message":"785","line":16,"column":9,"nodeType":"639","messageId":"640","endLine":16,"endColumn":22},{"ruleId":"637","severity":1,"message":"786","line":17,"column":8,"nodeType":"639","messageId":"640","endLine":17,"endColumn":9},{"ruleId":"637","severity":1,"message":"755","line":18,"column":8,"nodeType":"639","messageId":"640","endLine":18,"endColumn":17},{"ruleId":"637","severity":1,"message":"702","line":20,"column":8,"nodeType":"639","messageId":"640","endLine":20,"endColumn":20},{"ruleId":"637","severity":1,"message":"774","line":24,"column":7,"nodeType":"639","messageId":"640","endLine":24,"endColumn":21},{"ruleId":"637","severity":1,"message":"775","line":144,"column":11,"nodeType":"639","messageId":"640","endLine":144,"endColumn":23},{"ruleId":"787","severity":1,"message":"788","line":150,"column":34,"nodeType":"789","messageId":"790","endLine":150,"endColumn":36},{"ruleId":"668","severity":1,"message":"669","line":151,"column":26,"nodeType":"670","messageId":"671","endLine":151,"endColumn":28},"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'aces2' is defined but never used.","'fer' is assigned a value but never used.","no-native-reassign",["791"],"no-negated-in-lhs",["792"],"'Link' is defined but never used.","'makeStyles' is defined but never used.","'Paper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["793"],"'React' is defined but never used.",["791"],["792"],"'SSlider' is defined but never used.","'MonetizationOnIcon' is defined but never used.","'RemoveIcon' is defined but never used.","'BalanceDecContainer' is defined but never used.","'authThunk' is defined but never used.","'getGameObj' is defined but never used.","'FlipCameraAndroidIcon' is defined but never used.","'deleteGameThunk' is defined but never used.","'createData' is defined but never used.",["794"],["795"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["791"],["792"],"'addPlayerThunk' is defined but never used.","'style' is defined but never used.","'time' is assigned a value but never used.",["791"],["792"],"'useState' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.",["796"],"'Avatar' is defined but never used.","'CssBaseline' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Typography' is defined but never used.","'almaz' is defined but never used.",["797"],["791"],["792"],["791"],["792"],"'Button' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'NativeSelect' is defined but never used.","'Select' is defined but never used.",["798"],["791"],["792"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'myInputs' is defined but never used.","'mySelected' is defined but never used.","'mixedRingGamesThunk' is defined but never used.","'editTournamentsThunk' is defined but never used.","'makeid' is defined but never used.","'useEffect' is defined but never used.","'CircularProgress' is defined but never used.","'BalanceTransferContainerContainer' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '!==' and instead saw '!='.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'ChatBubbleOutline' is defined but never used.","'SendMessageTableContainer' is defined but never used.","'Icon' is defined but never used.","'diamond' is defined but never used.","'authPlayersIpThunk' is defined but never used.","'rows' is assigned a value but never used.",["799"],["800"],"'sessionId' is assigned a value but never used.","'getIpForTable' is defined but never used.","'j' is assigned a value but never used.",["791"],["792"],["791"],["792"],["791"],["792"],["791"],["792"],"'AddMesage' is defined but never used.","'AuthRedirectNoneToken' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'NavLink' is defined but never used.","'Edit' is defined but never used.","'AddIcon' is defined but never used.","'BalanceIncContainer' is defined but never used.","'Diamond' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.",["801"],"'deletePlayers' is assigned a value but never used.","'resetrake' is assigned a value but never used.","'editor' is assigned a value but never used.",["802"],"'authTournamentsThunk' is defined but never used.","'getTournamentsObj' is defined but never used.","'addMessageForTableTurnamentsName' is defined but never used.",["803"],["804"],"'bounceInRight' is defined but never used.","'authDecBalanceThunk' is defined but never used.",["791"],["792"],"'eddTablThunk' is defined but never used.","'eddPlayerThunk' is defined but never used.","'formValueSelector' is defined but never used.","'BootstrapInput' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'AuthRedirect' is defined but never used.",["805"],"'RedirectAfterGood' is defined but never used.",["791"],["792"],"'GET_RESULT_PLAYERS_FOR_LOADER' is assigned a value but never used.","'tur5' is assigned a value but never used.","'lat5' is assigned a value but never used.","'FormHelperText' is defined but never used.","'myInputsField' is defined but never used.","'s' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"810","fix":"812"},{"desc":"810","fix":"813"},{"desc":"810","fix":"814"},{"desc":"808","fix":"815"},{"desc":"810","fix":"816"},{"desc":"808","fix":"817"},{"desc":"810","fix":"818"},{"desc":"808","fix":"819"},{"desc":"810","fix":"820"},{"desc":"810","fix":"821"},"Update the dependencies array to be: [countRender, props]",{"range":"822","text":"823"},"Update the dependencies array to be: [countDel, props]",{"range":"824","text":"825"},"Update the dependencies array to be: [props]",{"range":"826","text":"827"},{"range":"828","text":"827"},{"range":"829","text":"827"},{"range":"830","text":"827"},{"range":"831","text":"825"},{"range":"832","text":"827"},{"range":"833","text":"825"},{"range":"834","text":"827"},{"range":"835","text":"825"},{"range":"836","text":"827"},{"range":"837","text":"827"},[4440,4453],"[countRender, props]",[6772,6782],"[countDel, props]",[12954,12956],"[props]",[6436,6438],[3409,3411],[8401,8403],[8767,8777],[16164,16166],[5889,5899],[13257,13259],[7584,7594],[13881,13883],[6470,6472]]
